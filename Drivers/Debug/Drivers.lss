
Drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000570c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000292  00800060  0000570c  000057a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  008002f2  008002f2  00005a32  2**0
                  ALLOC
  3 .stab         0000621c  00000000  00000000  00005a34  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000290f  00000000  00000000  0000bc50  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000e55f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  0000e6ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  0000e8f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  00010cfc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  00012082  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  00013258  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  00013418  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0001370e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0001407c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 f3 0c 	jmp	0x19e6	; 0x19e6 <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 0f 08 	jmp	0x101e	; 0x101e <__vector_10>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 2c 1a 	jmp	0x3458	; 0x3458 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e0       	ldi	r30, 0x0C	; 12
      68:	f7 e5       	ldi	r31, 0x57	; 87
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 3f       	cpi	r26, 0xF2	; 242
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	a2 ef       	ldi	r26, 0xF2	; 242
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 3f       	cpi	r26, 0xFE	; 254
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 5f 1a 	call	0x34be	; 0x34be <main>
      8a:	0c 94 84 2b 	jmp	0x5708	; 0x5708 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 38 2b 	jmp	0x5670	; 0x5670 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 ed       	ldi	r26, 0xD0	; 208
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 54 2b 	jmp	0x56a8	; 0x56a8 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 44 2b 	jmp	0x5688	; 0x5688 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 60 2b 	jmp	0x56c0	; 0x56c0 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 44 2b 	jmp	0x5688	; 0x5688 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 60 2b 	jmp	0x56c0	; 0x56c0 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 38 2b 	jmp	0x5670	; 0x5670 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 ed       	ldi	r24, 0xD0	; 208
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 54 2b 	jmp	0x56a8	; 0x56a8 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 40 2b 	jmp	0x5680	; 0x5680 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 ed       	ldi	r22, 0xD0	; 208
     69c:	71 e0       	ldi	r23, 0x01	; 1
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 5c 2b 	jmp	0x56b8	; 0x56b8 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 44 2b 	jmp	0x5688	; 0x5688 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 60 2b 	jmp	0x56c0	; 0x56c0 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 44 2b 	jmp	0x5688	; 0x5688 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 60 2b 	jmp	0x56c0	; 0x56c0 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 44 2b 	jmp	0x5688	; 0x5688 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 60 2b 	jmp	0x56c0	; 0x56c0 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 48 2b 	jmp	0x5690	; 0x5690 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 64 2b 	jmp	0x56c8	; 0x56c8 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 40 2b 	jmp	0x5680	; 0x5680 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 5c 2b 	jmp	0x56b8	; 0x56b8 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e8 52       	subi	r30, 0x28	; 40
     aca:	fe 4f       	sbci	r31, 0xFE	; 254
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <UART_vInit>:
 *      Author: olege
 */
#include "UART.h"

void UART_vInit(void)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
	UCSRC = 0b10000110;
     e36:	e0 e4       	ldi	r30, 0x40	; 64
     e38:	f0 e0       	ldi	r31, 0x00	; 0
     e3a:	86 e8       	ldi	r24, 0x86	; 134
     e3c:	80 83       	st	Z, r24
	UBRRL = 51;
     e3e:	e9 e2       	ldi	r30, 0x29	; 41
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	83 e3       	ldi	r24, 0x33	; 51
     e44:	80 83       	st	Z, r24
	SET_BIT(UCSRB,UCSRB_TXEN);
     e46:	aa e2       	ldi	r26, 0x2A	; 42
     e48:	b0 e0       	ldi	r27, 0x00	; 0
     e4a:	ea e2       	ldi	r30, 0x2A	; 42
     e4c:	f0 e0       	ldi	r31, 0x00	; 0
     e4e:	80 81       	ld	r24, Z
     e50:	88 60       	ori	r24, 0x08	; 8
     e52:	8c 93       	st	X, r24
	SET_BIT(UCSRB,UCSRB_RXEN);
     e54:	aa e2       	ldi	r26, 0x2A	; 42
     e56:	b0 e0       	ldi	r27, 0x00	; 0
     e58:	ea e2       	ldi	r30, 0x2A	; 42
     e5a:	f0 e0       	ldi	r31, 0x00	; 0
     e5c:	80 81       	ld	r24, Z
     e5e:	80 61       	ori	r24, 0x10	; 16
     e60:	8c 93       	st	X, r24
}
     e62:	cf 91       	pop	r28
     e64:	df 91       	pop	r29
     e66:	08 95       	ret

00000e68 <UART_vSend>:

void UART_vSend(u8 Copy_u8Data)
{
     e68:	df 93       	push	r29
     e6a:	cf 93       	push	r28
     e6c:	0f 92       	push	r0
     e6e:	cd b7       	in	r28, 0x3d	; 61
     e70:	de b7       	in	r29, 0x3e	; 62
     e72:	89 83       	std	Y+1, r24	; 0x01
	while((GET_BIT(UCSRA,UCSRA_UDRE)==0));
     e74:	eb e2       	ldi	r30, 0x2B	; 43
     e76:	f0 e0       	ldi	r31, 0x00	; 0
     e78:	80 81       	ld	r24, Z
     e7a:	88 2f       	mov	r24, r24
     e7c:	90 e0       	ldi	r25, 0x00	; 0
     e7e:	80 72       	andi	r24, 0x20	; 32
     e80:	90 70       	andi	r25, 0x00	; 0
     e82:	00 97       	sbiw	r24, 0x00	; 0
     e84:	b9 f3       	breq	.-18     	; 0xe74 <UART_vSend+0xc>
	UDR = Copy_u8Data;
     e86:	ec e2       	ldi	r30, 0x2C	; 44
     e88:	f0 e0       	ldi	r31, 0x00	; 0
     e8a:	89 81       	ldd	r24, Y+1	; 0x01
     e8c:	80 83       	st	Z, r24
}
     e8e:	0f 90       	pop	r0
     e90:	cf 91       	pop	r28
     e92:	df 91       	pop	r29
     e94:	08 95       	ret

00000e96 <UART_vReceive>:

u8 UART_vReceive(void)
{
     e96:	df 93       	push	r29
     e98:	cf 93       	push	r28
     e9a:	cd b7       	in	r28, 0x3d	; 61
     e9c:	de b7       	in	r29, 0x3e	; 62
	while((GET_BIT(UCSRA,UCSRA_RXC)==0));
     e9e:	eb e2       	ldi	r30, 0x2B	; 43
     ea0:	f0 e0       	ldi	r31, 0x00	; 0
     ea2:	80 81       	ld	r24, Z
     ea4:	88 23       	and	r24, r24
     ea6:	dc f7       	brge	.-10     	; 0xe9e <UART_vReceive+0x8>
	return UDR;
     ea8:	ec e2       	ldi	r30, 0x2C	; 44
     eaa:	f0 e0       	ldi	r31, 0x00	; 0
     eac:	80 81       	ld	r24, Z
}
     eae:	cf 91       	pop	r28
     eb0:	df 91       	pop	r29
     eb2:	08 95       	ret

00000eb4 <Timer0_vInit>:
#include "../DIO drivers/dio.h"

static void (*TIMER0_pvCallBackFunc)(void)= NULL;

void Timer0_vInit(void)
{
     eb4:	df 93       	push	r29
     eb6:	cf 93       	push	r28
     eb8:	cd b7       	in	r28, 0x3d	; 61
     eba:	de b7       	in	r29, 0x3e	; 62
	/*Set to CTC mode*/
	SET_BIT(TCCR0,TCCR0_WGM01);
     ebc:	a3 e5       	ldi	r26, 0x53	; 83
     ebe:	b0 e0       	ldi	r27, 0x00	; 0
     ec0:	e3 e5       	ldi	r30, 0x53	; 83
     ec2:	f0 e0       	ldi	r31, 0x00	; 0
     ec4:	80 81       	ld	r24, Z
     ec6:	88 60       	ori	r24, 0x08	; 8
     ec8:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,TCCR0_WGM00);
     eca:	a3 e5       	ldi	r26, 0x53	; 83
     ecc:	b0 e0       	ldi	r27, 0x00	; 0
     ece:	e3 e5       	ldi	r30, 0x53	; 83
     ed0:	f0 e0       	ldi	r31, 0x00	; 0
     ed2:	80 81       	ld	r24, Z
     ed4:	8f 7b       	andi	r24, 0xBF	; 191
     ed6:	8c 93       	st	X, r24

	/*Compare match Interrupt enable*/
	SET_BIT(TIMSK,TIMSK_OCIE0);
     ed8:	a9 e5       	ldi	r26, 0x59	; 89
     eda:	b0 e0       	ldi	r27, 0x00	; 0
     edc:	e9 e5       	ldi	r30, 0x59	; 89
     ede:	f0 e0       	ldi	r31, 0x00	; 0
     ee0:	80 81       	ld	r24, Z
     ee2:	82 60       	ori	r24, 0x02	; 2
     ee4:	8c 93       	st	X, r24


	/*Set compare match value*/
	OCR0=250;
     ee6:	ec e5       	ldi	r30, 0x5C	; 92
     ee8:	f0 e0       	ldi	r31, 0x00	; 0
     eea:	8a ef       	ldi	r24, 0xFA	; 250
     eec:	80 83       	st	Z, r24

	/*Set prescaler value*/
	SET_BIT(TCCR0,TCCR0_CS00);
     eee:	a3 e5       	ldi	r26, 0x53	; 83
     ef0:	b0 e0       	ldi	r27, 0x00	; 0
     ef2:	e3 e5       	ldi	r30, 0x53	; 83
     ef4:	f0 e0       	ldi	r31, 0x00	; 0
     ef6:	80 81       	ld	r24, Z
     ef8:	81 60       	ori	r24, 0x01	; 1
     efa:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,TCCR0_CS01);
     efc:	a3 e5       	ldi	r26, 0x53	; 83
     efe:	b0 e0       	ldi	r27, 0x00	; 0
     f00:	e3 e5       	ldi	r30, 0x53	; 83
     f02:	f0 e0       	ldi	r31, 0x00	; 0
     f04:	80 81       	ld	r24, Z
     f06:	8d 7f       	andi	r24, 0xFD	; 253
     f08:	8c 93       	st	X, r24
	SET_BIT(TCCR0,TCCR0_CS02);
     f0a:	a3 e5       	ldi	r26, 0x53	; 83
     f0c:	b0 e0       	ldi	r27, 0x00	; 0
     f0e:	e3 e5       	ldi	r30, 0x53	; 83
     f10:	f0 e0       	ldi	r31, 0x00	; 0
     f12:	80 81       	ld	r24, Z
     f14:	84 60       	ori	r24, 0x04	; 4
     f16:	8c 93       	st	X, r24


}
     f18:	cf 91       	pop	r28
     f1a:	df 91       	pop	r29
     f1c:	08 95       	ret

00000f1e <Timer0_u8SetCallBack>:

u8 Timer0_u8SetCallBack (void (*Copy_pvCallBackFun)(void))
{
     f1e:	df 93       	push	r29
     f20:	cf 93       	push	r28
     f22:	00 d0       	rcall	.+0      	; 0xf24 <Timer0_u8SetCallBack+0x6>
     f24:	0f 92       	push	r0
     f26:	cd b7       	in	r28, 0x3d	; 61
     f28:	de b7       	in	r29, 0x3e	; 62
     f2a:	9b 83       	std	Y+3, r25	; 0x03
     f2c:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState= OK;
     f2e:	81 e0       	ldi	r24, 0x01	; 1
     f30:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_pvCallBackFun != NULL)
     f32:	8a 81       	ldd	r24, Y+2	; 0x02
     f34:	9b 81       	ldd	r25, Y+3	; 0x03
     f36:	00 97       	sbiw	r24, 0x00	; 0
     f38:	39 f0       	breq	.+14     	; 0xf48 <Timer0_u8SetCallBack+0x2a>
	{
		TIMER0_pvCallBackFunc = Copy_pvCallBackFun;
     f3a:	8a 81       	ldd	r24, Y+2	; 0x02
     f3c:	9b 81       	ldd	r25, Y+3	; 0x03
     f3e:	90 93 f3 02 	sts	0x02F3, r25
     f42:	80 93 f2 02 	sts	0x02F2, r24
     f46:	01 c0       	rjmp	.+2      	; 0xf4a <Timer0_u8SetCallBack+0x2c>
	}

	else
	{
		Local_u8ErrorState = NULL_POINTER;
     f48:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_u8ErrorState;
     f4a:	89 81       	ldd	r24, Y+1	; 0x01
}
     f4c:	0f 90       	pop	r0
     f4e:	0f 90       	pop	r0
     f50:	0f 90       	pop	r0
     f52:	cf 91       	pop	r28
     f54:	df 91       	pop	r29
     f56:	08 95       	ret

00000f58 <Timer1_vSetChannelACompareMatch>:

void Timer1_vSetChannelACompareMatch(u16 Copy_u16CompareMatch)
{
     f58:	df 93       	push	r29
     f5a:	cf 93       	push	r28
     f5c:	00 d0       	rcall	.+0      	; 0xf5e <Timer1_vSetChannelACompareMatch+0x6>
     f5e:	cd b7       	in	r28, 0x3d	; 61
     f60:	de b7       	in	r29, 0x3e	; 62
     f62:	9a 83       	std	Y+2, r25	; 0x02
     f64:	89 83       	std	Y+1, r24	; 0x01
	OCR1A=Copy_u16CompareMatch;
     f66:	ea e4       	ldi	r30, 0x4A	; 74
     f68:	f0 e0       	ldi	r31, 0x00	; 0
     f6a:	89 81       	ldd	r24, Y+1	; 0x01
     f6c:	9a 81       	ldd	r25, Y+2	; 0x02
     f6e:	91 83       	std	Z+1, r25	; 0x01
     f70:	80 83       	st	Z, r24
}
     f72:	0f 90       	pop	r0
     f74:	0f 90       	pop	r0
     f76:	cf 91       	pop	r28
     f78:	df 91       	pop	r29
     f7a:	08 95       	ret

00000f7c <Timer1_vSetICR>:
void Timer1_vSetICR(u16 Copy_u16TOP)
{
     f7c:	df 93       	push	r29
     f7e:	cf 93       	push	r28
     f80:	00 d0       	rcall	.+0      	; 0xf82 <Timer1_vSetICR+0x6>
     f82:	cd b7       	in	r28, 0x3d	; 61
     f84:	de b7       	in	r29, 0x3e	; 62
     f86:	9a 83       	std	Y+2, r25	; 0x02
     f88:	89 83       	std	Y+1, r24	; 0x01
	ICR1 = Copy_u16TOP;
     f8a:	e6 e4       	ldi	r30, 0x46	; 70
     f8c:	f0 e0       	ldi	r31, 0x00	; 0
     f8e:	89 81       	ldd	r24, Y+1	; 0x01
     f90:	9a 81       	ldd	r25, Y+2	; 0x02
     f92:	91 83       	std	Z+1, r25	; 0x01
     f94:	80 83       	st	Z, r24
}
     f96:	0f 90       	pop	r0
     f98:	0f 90       	pop	r0
     f9a:	cf 91       	pop	r28
     f9c:	df 91       	pop	r29
     f9e:	08 95       	ret

00000fa0 <Timer1_vInit>:

void Timer1_vInit(void)
{
     fa0:	df 93       	push	r29
     fa2:	cf 93       	push	r28
     fa4:	cd b7       	in	r28, 0x3d	; 61
     fa6:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TCCR1A,TCCR1A_COM1A1);
     fa8:	af e4       	ldi	r26, 0x4F	; 79
     faa:	b0 e0       	ldi	r27, 0x00	; 0
     fac:	ef e4       	ldi	r30, 0x4F	; 79
     fae:	f0 e0       	ldi	r31, 0x00	; 0
     fb0:	80 81       	ld	r24, Z
     fb2:	80 68       	ori	r24, 0x80	; 128
     fb4:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A,TCCR1A_COM1A0);
     fb6:	af e4       	ldi	r26, 0x4F	; 79
     fb8:	b0 e0       	ldi	r27, 0x00	; 0
     fba:	ef e4       	ldi	r30, 0x4F	; 79
     fbc:	f0 e0       	ldi	r31, 0x00	; 0
     fbe:	80 81       	ld	r24, Z
     fc0:	8f 7b       	andi	r24, 0xBF	; 191
     fc2:	8c 93       	st	X, r24

	CLR_BIT(TCCR1A,TCCR1A_WGM10);
     fc4:	af e4       	ldi	r26, 0x4F	; 79
     fc6:	b0 e0       	ldi	r27, 0x00	; 0
     fc8:	ef e4       	ldi	r30, 0x4F	; 79
     fca:	f0 e0       	ldi	r31, 0x00	; 0
     fcc:	80 81       	ld	r24, Z
     fce:	8e 7f       	andi	r24, 0xFE	; 254
     fd0:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,TCCR1A_WGM11);
     fd2:	af e4       	ldi	r26, 0x4F	; 79
     fd4:	b0 e0       	ldi	r27, 0x00	; 0
     fd6:	ef e4       	ldi	r30, 0x4F	; 79
     fd8:	f0 e0       	ldi	r31, 0x00	; 0
     fda:	80 81       	ld	r24, Z
     fdc:	82 60       	ori	r24, 0x02	; 2
     fde:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,TCCR1B_WGM12);
     fe0:	ae e4       	ldi	r26, 0x4E	; 78
     fe2:	b0 e0       	ldi	r27, 0x00	; 0
     fe4:	ee e4       	ldi	r30, 0x4E	; 78
     fe6:	f0 e0       	ldi	r31, 0x00	; 0
     fe8:	80 81       	ld	r24, Z
     fea:	88 60       	ori	r24, 0x08	; 8
     fec:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,TCCR1B_WGM13);
     fee:	ae e4       	ldi	r26, 0x4E	; 78
     ff0:	b0 e0       	ldi	r27, 0x00	; 0
     ff2:	ee e4       	ldi	r30, 0x4E	; 78
     ff4:	f0 e0       	ldi	r31, 0x00	; 0
     ff6:	80 81       	ld	r24, Z
     ff8:	80 61       	ori	r24, 0x10	; 16
     ffa:	8c 93       	st	X, r24

	TCCR1B &= PRESCALER_MASK;
     ffc:	ae e4       	ldi	r26, 0x4E	; 78
     ffe:	b0 e0       	ldi	r27, 0x00	; 0
    1000:	ee e4       	ldi	r30, 0x4E	; 78
    1002:	f0 e0       	ldi	r31, 0x00	; 0
    1004:	80 81       	ld	r24, Z
    1006:	88 7f       	andi	r24, 0xF8	; 248
    1008:	8c 93       	st	X, r24
	TCCR1B |= DIV_BY_8;
    100a:	ae e4       	ldi	r26, 0x4E	; 78
    100c:	b0 e0       	ldi	r27, 0x00	; 0
    100e:	ee e4       	ldi	r30, 0x4E	; 78
    1010:	f0 e0       	ldi	r31, 0x00	; 0
    1012:	80 81       	ld	r24, Z
    1014:	82 60       	ori	r24, 0x02	; 2
    1016:	8c 93       	st	X, r24

}
    1018:	cf 91       	pop	r28
    101a:	df 91       	pop	r29
    101c:	08 95       	ret

0000101e <__vector_10>:



void __vector_10 (void) __attribute__((signal));
void __vector_10 (void)
{
    101e:	1f 92       	push	r1
    1020:	0f 92       	push	r0
    1022:	0f b6       	in	r0, 0x3f	; 63
    1024:	0f 92       	push	r0
    1026:	11 24       	eor	r1, r1
    1028:	2f 93       	push	r18
    102a:	3f 93       	push	r19
    102c:	4f 93       	push	r20
    102e:	5f 93       	push	r21
    1030:	6f 93       	push	r22
    1032:	7f 93       	push	r23
    1034:	8f 93       	push	r24
    1036:	9f 93       	push	r25
    1038:	af 93       	push	r26
    103a:	bf 93       	push	r27
    103c:	ef 93       	push	r30
    103e:	ff 93       	push	r31
    1040:	df 93       	push	r29
    1042:	cf 93       	push	r28
    1044:	cd b7       	in	r28, 0x3d	; 61
    1046:	de b7       	in	r29, 0x3e	; 62
	if(TIMER0_pvCallBackFunc != NULL)
    1048:	80 91 f2 02 	lds	r24, 0x02F2
    104c:	90 91 f3 02 	lds	r25, 0x02F3
    1050:	00 97       	sbiw	r24, 0x00	; 0
    1052:	29 f0       	breq	.+10     	; 0x105e <__vector_10+0x40>
	{
		TIMER0_pvCallBackFunc();
    1054:	e0 91 f2 02 	lds	r30, 0x02F2
    1058:	f0 91 f3 02 	lds	r31, 0x02F3
    105c:	09 95       	icall
	}
}
    105e:	cf 91       	pop	r28
    1060:	df 91       	pop	r29
    1062:	ff 91       	pop	r31
    1064:	ef 91       	pop	r30
    1066:	bf 91       	pop	r27
    1068:	af 91       	pop	r26
    106a:	9f 91       	pop	r25
    106c:	8f 91       	pop	r24
    106e:	7f 91       	pop	r23
    1070:	6f 91       	pop	r22
    1072:	5f 91       	pop	r21
    1074:	4f 91       	pop	r20
    1076:	3f 91       	pop	r19
    1078:	2f 91       	pop	r18
    107a:	0f 90       	pop	r0
    107c:	0f be       	out	0x3f, r0	; 63
    107e:	0f 90       	pop	r0
    1080:	1f 90       	pop	r1
    1082:	18 95       	reti

00001084 <SSD_u8SetNumber>:
#include "sev_seg.h"

u8 NUMBERS[10] = SEV_SEG_NUMBERS;

ERROR_STATUS SSD_u8SetNumber(SSD* SSDinfo , u8 SSD_u8Copy_Number)
{
    1084:	df 93       	push	r29
    1086:	cf 93       	push	r28
    1088:	00 d0       	rcall	.+0      	; 0x108a <SSD_u8SetNumber+0x6>
    108a:	0f 92       	push	r0
    108c:	cd b7       	in	r28, 0x3d	; 61
    108e:	de b7       	in	r29, 0x3e	; 62
    1090:	9a 83       	std	Y+2, r25	; 0x02
    1092:	89 83       	std	Y+1, r24	; 0x01
    1094:	6b 83       	std	Y+3, r22	; 0x03

	if(SSDinfo->Com_type == SSD_u8Com_Cathode)
    1096:	e9 81       	ldd	r30, Y+1	; 0x01
    1098:	fa 81       	ldd	r31, Y+2	; 0x02
    109a:	82 85       	ldd	r24, Z+10	; 0x0a
    109c:	88 23       	and	r24, r24
    109e:	79 f4       	brne	.+30     	; 0x10be <SSD_u8SetNumber+0x3a>
	{
		DIO_u8SetPortValue(SSDinfo->Port_num , NUMBERS[SSD_u8Copy_Number]);
    10a0:	e9 81       	ldd	r30, Y+1	; 0x01
    10a2:	fa 81       	ldd	r31, Y+2	; 0x02
    10a4:	23 85       	ldd	r18, Z+11	; 0x0b
    10a6:	8b 81       	ldd	r24, Y+3	; 0x03
    10a8:	88 2f       	mov	r24, r24
    10aa:	90 e0       	ldi	r25, 0x00	; 0
    10ac:	fc 01       	movw	r30, r24
    10ae:	e8 52       	subi	r30, 0x28	; 40
    10b0:	fd 4f       	sbci	r31, 0xFD	; 253
    10b2:	90 81       	ld	r25, Z
    10b4:	82 2f       	mov	r24, r18
    10b6:	69 2f       	mov	r22, r25
    10b8:	0e 94 56 11 	call	0x22ac	; 0x22ac <DIO_u8SetPortValue>
    10bc:	15 c0       	rjmp	.+42     	; 0x10e8 <SSD_u8SetNumber+0x64>
	}

	else if(SSDinfo->Com_type == SSD_u8Com_Anode)
    10be:	e9 81       	ldd	r30, Y+1	; 0x01
    10c0:	fa 81       	ldd	r31, Y+2	; 0x02
    10c2:	82 85       	ldd	r24, Z+10	; 0x0a
    10c4:	81 30       	cpi	r24, 0x01	; 1
    10c6:	81 f4       	brne	.+32     	; 0x10e8 <SSD_u8SetNumber+0x64>
	{
		DIO_u8SetPortValue(SSDinfo->Port_num , ~(NUMBERS[(SSD_u8Copy_Number)]));
    10c8:	e9 81       	ldd	r30, Y+1	; 0x01
    10ca:	fa 81       	ldd	r31, Y+2	; 0x02
    10cc:	23 85       	ldd	r18, Z+11	; 0x0b
    10ce:	8b 81       	ldd	r24, Y+3	; 0x03
    10d0:	88 2f       	mov	r24, r24
    10d2:	90 e0       	ldi	r25, 0x00	; 0
    10d4:	fc 01       	movw	r30, r24
    10d6:	e8 52       	subi	r30, 0x28	; 40
    10d8:	fd 4f       	sbci	r31, 0xFD	; 253
    10da:	80 81       	ld	r24, Z
    10dc:	98 2f       	mov	r25, r24
    10de:	90 95       	com	r25
    10e0:	82 2f       	mov	r24, r18
    10e2:	69 2f       	mov	r22, r25
    10e4:	0e 94 56 11 	call	0x22ac	; 0x22ac <DIO_u8SetPortValue>
	}
	return SS_TYPE;
    10e8:	87 e0       	ldi	r24, 0x07	; 7
}
    10ea:	0f 90       	pop	r0
    10ec:	0f 90       	pop	r0
    10ee:	0f 90       	pop	r0
    10f0:	cf 91       	pop	r28
    10f2:	df 91       	pop	r29
    10f4:	08 95       	ret

000010f6 <SSD_u8Enable>:

ERROR_STATUS SSD_u8Enable(SSD* SSDinfo)
{
    10f6:	df 93       	push	r29
    10f8:	cf 93       	push	r28
    10fa:	00 d0       	rcall	.+0      	; 0x10fc <SSD_u8Enable+0x6>
    10fc:	cd b7       	in	r28, 0x3d	; 61
    10fe:	de b7       	in	r29, 0x3e	; 62
    1100:	9a 83       	std	Y+2, r25	; 0x02
    1102:	89 83       	std	Y+1, r24	; 0x01
	DIO_u8SetPortDirection(SSDinfo->Port_num,DIO_u8PORT_OUTPUT);
    1104:	e9 81       	ldd	r30, Y+1	; 0x01
    1106:	fa 81       	ldd	r31, Y+2	; 0x02
    1108:	83 85       	ldd	r24, Z+11	; 0x0b
    110a:	6f ef       	ldi	r22, 0xFF	; 255
    110c:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <DIO_u8SetPortDirection>
	DIO_u8SetPinDirection(SSDinfo->Enable_port,SSDinfo->Enable_pin,DIO_u8PIN_OUTPUT);
    1110:	e9 81       	ldd	r30, Y+1	; 0x01
    1112:	fa 81       	ldd	r31, Y+2	; 0x02
    1114:	84 85       	ldd	r24, Z+12	; 0x0c
    1116:	e9 81       	ldd	r30, Y+1	; 0x01
    1118:	fa 81       	ldd	r31, Y+2	; 0x02
    111a:	95 85       	ldd	r25, Z+13	; 0x0d
    111c:	69 2f       	mov	r22, r25
    111e:	41 e0       	ldi	r20, 0x01	; 1
    1120:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <DIO_u8SetPinDirection>

	if(SSDinfo->Com_type == SSD_u8Com_Cathode)
    1124:	e9 81       	ldd	r30, Y+1	; 0x01
    1126:	fa 81       	ldd	r31, Y+2	; 0x02
    1128:	82 85       	ldd	r24, Z+10	; 0x0a
    112a:	88 23       	and	r24, r24
    112c:	51 f4       	brne	.+20     	; 0x1142 <SSD_u8Enable+0x4c>
	{
		DIO_u8SetPinValue(SSDinfo->Enable_port,SSDinfo->Enable_pin,DIO_u8PIN_LOW);
    112e:	e9 81       	ldd	r30, Y+1	; 0x01
    1130:	fa 81       	ldd	r31, Y+2	; 0x02
    1132:	84 85       	ldd	r24, Z+12	; 0x0c
    1134:	e9 81       	ldd	r30, Y+1	; 0x01
    1136:	fa 81       	ldd	r31, Y+2	; 0x02
    1138:	95 85       	ldd	r25, Z+13	; 0x0d
    113a:	69 2f       	mov	r22, r25
    113c:	40 e0       	ldi	r20, 0x00	; 0
    113e:	0e 94 47 10 	call	0x208e	; 0x208e <DIO_u8SetPinValue>
	}

	if(SSDinfo->Com_type == SSD_u8Com_Anode)
    1142:	e9 81       	ldd	r30, Y+1	; 0x01
    1144:	fa 81       	ldd	r31, Y+2	; 0x02
    1146:	82 85       	ldd	r24, Z+10	; 0x0a
    1148:	81 30       	cpi	r24, 0x01	; 1
    114a:	51 f4       	brne	.+20     	; 0x1160 <SSD_u8Enable+0x6a>
	{
		DIO_u8SetPinValue(SSDinfo->Enable_port,SSDinfo->Enable_pin,DIO_u8PIN_HIGH);
    114c:	e9 81       	ldd	r30, Y+1	; 0x01
    114e:	fa 81       	ldd	r31, Y+2	; 0x02
    1150:	84 85       	ldd	r24, Z+12	; 0x0c
    1152:	e9 81       	ldd	r30, Y+1	; 0x01
    1154:	fa 81       	ldd	r31, Y+2	; 0x02
    1156:	95 85       	ldd	r25, Z+13	; 0x0d
    1158:	69 2f       	mov	r22, r25
    115a:	41 e0       	ldi	r20, 0x01	; 1
    115c:	0e 94 47 10 	call	0x208e	; 0x208e <DIO_u8SetPinValue>
	}
	return SS_TYPE;
    1160:	87 e0       	ldi	r24, 0x07	; 7
}
    1162:	0f 90       	pop	r0
    1164:	0f 90       	pop	r0
    1166:	cf 91       	pop	r28
    1168:	df 91       	pop	r29
    116a:	08 95       	ret

0000116c <SSD_u8Disable>:

ERROR_STATUS SSD_u8Disable(SSD* SSDinfo)
{
    116c:	df 93       	push	r29
    116e:	cf 93       	push	r28
    1170:	00 d0       	rcall	.+0      	; 0x1172 <SSD_u8Disable+0x6>
    1172:	cd b7       	in	r28, 0x3d	; 61
    1174:	de b7       	in	r29, 0x3e	; 62
    1176:	9a 83       	std	Y+2, r25	; 0x02
    1178:	89 83       	std	Y+1, r24	; 0x01
	if(SSDinfo->Com_type == SSD_u8Com_Cathode)
    117a:	e9 81       	ldd	r30, Y+1	; 0x01
    117c:	fa 81       	ldd	r31, Y+2	; 0x02
    117e:	82 85       	ldd	r24, Z+10	; 0x0a
    1180:	88 23       	and	r24, r24
    1182:	51 f4       	brne	.+20     	; 0x1198 <SSD_u8Disable+0x2c>
	{
		DIO_u8SetPinValue(SSDinfo->Enable_port,SSDinfo->Enable_pin,DIO_u8PIN_HIGH);
    1184:	e9 81       	ldd	r30, Y+1	; 0x01
    1186:	fa 81       	ldd	r31, Y+2	; 0x02
    1188:	84 85       	ldd	r24, Z+12	; 0x0c
    118a:	e9 81       	ldd	r30, Y+1	; 0x01
    118c:	fa 81       	ldd	r31, Y+2	; 0x02
    118e:	95 85       	ldd	r25, Z+13	; 0x0d
    1190:	69 2f       	mov	r22, r25
    1192:	41 e0       	ldi	r20, 0x01	; 1
    1194:	0e 94 47 10 	call	0x208e	; 0x208e <DIO_u8SetPinValue>
	}

	if(SSDinfo->Com_type == SSD_u8Com_Anode)
    1198:	e9 81       	ldd	r30, Y+1	; 0x01
    119a:	fa 81       	ldd	r31, Y+2	; 0x02
    119c:	82 85       	ldd	r24, Z+10	; 0x0a
    119e:	81 30       	cpi	r24, 0x01	; 1
    11a0:	51 f4       	brne	.+20     	; 0x11b6 <SSD_u8Disable+0x4a>
	{
		DIO_u8SetPinValue(SSDinfo->Enable_port,SSDinfo->Enable_pin,DIO_u8PIN_LOW);
    11a2:	e9 81       	ldd	r30, Y+1	; 0x01
    11a4:	fa 81       	ldd	r31, Y+2	; 0x02
    11a6:	84 85       	ldd	r24, Z+12	; 0x0c
    11a8:	e9 81       	ldd	r30, Y+1	; 0x01
    11aa:	fa 81       	ldd	r31, Y+2	; 0x02
    11ac:	95 85       	ldd	r25, Z+13	; 0x0d
    11ae:	69 2f       	mov	r22, r25
    11b0:	40 e0       	ldi	r20, 0x00	; 0
    11b2:	0e 94 47 10 	call	0x208e	; 0x208e <DIO_u8SetPinValue>
	}
	return SS_TYPE;
    11b6:	87 e0       	ldi	r24, 0x07	; 7
}
    11b8:	0f 90       	pop	r0
    11ba:	0f 90       	pop	r0
    11bc:	cf 91       	pop	r28
    11be:	df 91       	pop	r29
    11c0:	08 95       	ret

000011c2 <servo_rotate>:
 *      Author: olege
 */

#include "servo.h"

void servo_rotate(u16 angle) {
    11c2:	df 93       	push	r29
    11c4:	cf 93       	push	r28
    11c6:	cd b7       	in	r28, 0x3d	; 61
    11c8:	de b7       	in	r29, 0x3e	; 62
    11ca:	62 97       	sbiw	r28, 0x12	; 18
    11cc:	0f b6       	in	r0, 0x3f	; 63
    11ce:	f8 94       	cli
    11d0:	de bf       	out	0x3e, r29	; 62
    11d2:	0f be       	out	0x3f, r0	; 63
    11d4:	cd bf       	out	0x3d, r28	; 61
    11d6:	9a 8b       	std	Y+18, r25	; 0x12
    11d8:	89 8b       	std	Y+17, r24	; 0x11

	u16 duty_cycle = ((angle * 1000)) / 180 + 1000;
    11da:	29 89       	ldd	r18, Y+17	; 0x11
    11dc:	3a 89       	ldd	r19, Y+18	; 0x12
    11de:	88 ee       	ldi	r24, 0xE8	; 232
    11e0:	93 e0       	ldi	r25, 0x03	; 3
    11e2:	ac 01       	movw	r20, r24
    11e4:	24 9f       	mul	r18, r20
    11e6:	c0 01       	movw	r24, r0
    11e8:	25 9f       	mul	r18, r21
    11ea:	90 0d       	add	r25, r0
    11ec:	34 9f       	mul	r19, r20
    11ee:	90 0d       	add	r25, r0
    11f0:	11 24       	eor	r1, r1
    11f2:	24 eb       	ldi	r18, 0xB4	; 180
    11f4:	30 e0       	ldi	r19, 0x00	; 0
    11f6:	b9 01       	movw	r22, r18
    11f8:	0e 94 24 2b 	call	0x5648	; 0x5648 <__udivmodhi4>
    11fc:	cb 01       	movw	r24, r22
    11fe:	88 51       	subi	r24, 0x18	; 24
    1200:	9c 4f       	sbci	r25, 0xFC	; 252
    1202:	98 8b       	std	Y+16, r25	; 0x10
    1204:	8f 87       	std	Y+15, r24	; 0x0f

    OCR1A = duty_cycle;
    1206:	ea e4       	ldi	r30, 0x4A	; 74
    1208:	f0 e0       	ldi	r31, 0x00	; 0
    120a:	8f 85       	ldd	r24, Y+15	; 0x0f
    120c:	98 89       	ldd	r25, Y+16	; 0x10
    120e:	91 83       	std	Z+1, r25	; 0x01
    1210:	80 83       	st	Z, r24
    1212:	80 e0       	ldi	r24, 0x00	; 0
    1214:	90 e0       	ldi	r25, 0x00	; 0
    1216:	a8 e4       	ldi	r26, 0x48	; 72
    1218:	b2 e4       	ldi	r27, 0x42	; 66
    121a:	8b 87       	std	Y+11, r24	; 0x0b
    121c:	9c 87       	std	Y+12, r25	; 0x0c
    121e:	ad 87       	std	Y+13, r26	; 0x0d
    1220:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1222:	6b 85       	ldd	r22, Y+11	; 0x0b
    1224:	7c 85       	ldd	r23, Y+12	; 0x0c
    1226:	8d 85       	ldd	r24, Y+13	; 0x0d
    1228:	9e 85       	ldd	r25, Y+14	; 0x0e
    122a:	20 e0       	ldi	r18, 0x00	; 0
    122c:	30 e0       	ldi	r19, 0x00	; 0
    122e:	4a ef       	ldi	r20, 0xFA	; 250
    1230:	54 e4       	ldi	r21, 0x44	; 68
    1232:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1236:	dc 01       	movw	r26, r24
    1238:	cb 01       	movw	r24, r22
    123a:	8f 83       	std	Y+7, r24	; 0x07
    123c:	98 87       	std	Y+8, r25	; 0x08
    123e:	a9 87       	std	Y+9, r26	; 0x09
    1240:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1242:	6f 81       	ldd	r22, Y+7	; 0x07
    1244:	78 85       	ldd	r23, Y+8	; 0x08
    1246:	89 85       	ldd	r24, Y+9	; 0x09
    1248:	9a 85       	ldd	r25, Y+10	; 0x0a
    124a:	20 e0       	ldi	r18, 0x00	; 0
    124c:	30 e0       	ldi	r19, 0x00	; 0
    124e:	40 e8       	ldi	r20, 0x80	; 128
    1250:	5f e3       	ldi	r21, 0x3F	; 63
    1252:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1256:	88 23       	and	r24, r24
    1258:	2c f4       	brge	.+10     	; 0x1264 <servo_rotate+0xa2>
		__ticks = 1;
    125a:	81 e0       	ldi	r24, 0x01	; 1
    125c:	90 e0       	ldi	r25, 0x00	; 0
    125e:	9e 83       	std	Y+6, r25	; 0x06
    1260:	8d 83       	std	Y+5, r24	; 0x05
    1262:	3f c0       	rjmp	.+126    	; 0x12e2 <servo_rotate+0x120>
	else if (__tmp > 65535)
    1264:	6f 81       	ldd	r22, Y+7	; 0x07
    1266:	78 85       	ldd	r23, Y+8	; 0x08
    1268:	89 85       	ldd	r24, Y+9	; 0x09
    126a:	9a 85       	ldd	r25, Y+10	; 0x0a
    126c:	20 e0       	ldi	r18, 0x00	; 0
    126e:	3f ef       	ldi	r19, 0xFF	; 255
    1270:	4f e7       	ldi	r20, 0x7F	; 127
    1272:	57 e4       	ldi	r21, 0x47	; 71
    1274:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1278:	18 16       	cp	r1, r24
    127a:	4c f5       	brge	.+82     	; 0x12ce <servo_rotate+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    127c:	6b 85       	ldd	r22, Y+11	; 0x0b
    127e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1280:	8d 85       	ldd	r24, Y+13	; 0x0d
    1282:	9e 85       	ldd	r25, Y+14	; 0x0e
    1284:	20 e0       	ldi	r18, 0x00	; 0
    1286:	30 e0       	ldi	r19, 0x00	; 0
    1288:	40 e2       	ldi	r20, 0x20	; 32
    128a:	51 e4       	ldi	r21, 0x41	; 65
    128c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1290:	dc 01       	movw	r26, r24
    1292:	cb 01       	movw	r24, r22
    1294:	bc 01       	movw	r22, r24
    1296:	cd 01       	movw	r24, r26
    1298:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    129c:	dc 01       	movw	r26, r24
    129e:	cb 01       	movw	r24, r22
    12a0:	9e 83       	std	Y+6, r25	; 0x06
    12a2:	8d 83       	std	Y+5, r24	; 0x05
    12a4:	0f c0       	rjmp	.+30     	; 0x12c4 <servo_rotate+0x102>
    12a6:	88 ec       	ldi	r24, 0xC8	; 200
    12a8:	90 e0       	ldi	r25, 0x00	; 0
    12aa:	9c 83       	std	Y+4, r25	; 0x04
    12ac:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    12ae:	8b 81       	ldd	r24, Y+3	; 0x03
    12b0:	9c 81       	ldd	r25, Y+4	; 0x04
    12b2:	01 97       	sbiw	r24, 0x01	; 1
    12b4:	f1 f7       	brne	.-4      	; 0x12b2 <servo_rotate+0xf0>
    12b6:	9c 83       	std	Y+4, r25	; 0x04
    12b8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12ba:	8d 81       	ldd	r24, Y+5	; 0x05
    12bc:	9e 81       	ldd	r25, Y+6	; 0x06
    12be:	01 97       	sbiw	r24, 0x01	; 1
    12c0:	9e 83       	std	Y+6, r25	; 0x06
    12c2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12c4:	8d 81       	ldd	r24, Y+5	; 0x05
    12c6:	9e 81       	ldd	r25, Y+6	; 0x06
    12c8:	00 97       	sbiw	r24, 0x00	; 0
    12ca:	69 f7       	brne	.-38     	; 0x12a6 <servo_rotate+0xe4>
    12cc:	14 c0       	rjmp	.+40     	; 0x12f6 <servo_rotate+0x134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12ce:	6f 81       	ldd	r22, Y+7	; 0x07
    12d0:	78 85       	ldd	r23, Y+8	; 0x08
    12d2:	89 85       	ldd	r24, Y+9	; 0x09
    12d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    12d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12da:	dc 01       	movw	r26, r24
    12dc:	cb 01       	movw	r24, r22
    12de:	9e 83       	std	Y+6, r25	; 0x06
    12e0:	8d 83       	std	Y+5, r24	; 0x05
    12e2:	8d 81       	ldd	r24, Y+5	; 0x05
    12e4:	9e 81       	ldd	r25, Y+6	; 0x06
    12e6:	9a 83       	std	Y+2, r25	; 0x02
    12e8:	89 83       	std	Y+1, r24	; 0x01
    12ea:	89 81       	ldd	r24, Y+1	; 0x01
    12ec:	9a 81       	ldd	r25, Y+2	; 0x02
    12ee:	01 97       	sbiw	r24, 0x01	; 1
    12f0:	f1 f7       	brne	.-4      	; 0x12ee <servo_rotate+0x12c>
    12f2:	9a 83       	std	Y+2, r25	; 0x02
    12f4:	89 83       	std	Y+1, r24	; 0x01

    _delay_ms(50);
}
    12f6:	62 96       	adiw	r28, 0x12	; 18
    12f8:	0f b6       	in	r0, 0x3f	; 63
    12fa:	f8 94       	cli
    12fc:	de bf       	out	0x3e, r29	; 62
    12fe:	0f be       	out	0x3f, r0	; 63
    1300:	cd bf       	out	0x3d, r28	; 61
    1302:	cf 91       	pop	r28
    1304:	df 91       	pop	r29
    1306:	08 95       	ret

00001308 <SPI_vInitMaster>:
 *      Author: olege
 */
#include "SPI.h"

void SPI_vInitMaster(void)
{
    1308:	df 93       	push	r29
    130a:	cf 93       	push	r28
    130c:	cd b7       	in	r28, 0x3d	; 61
    130e:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SPCR,SPCR_MSTR);
    1310:	ad e2       	ldi	r26, 0x2D	; 45
    1312:	b0 e0       	ldi	r27, 0x00	; 0
    1314:	ed e2       	ldi	r30, 0x2D	; 45
    1316:	f0 e0       	ldi	r31, 0x00	; 0
    1318:	80 81       	ld	r24, Z
    131a:	80 61       	ori	r24, 0x10	; 16
    131c:	8c 93       	st	X, r24

	SET_BIT(SPCR,SPCR_SPR0);
    131e:	ad e2       	ldi	r26, 0x2D	; 45
    1320:	b0 e0       	ldi	r27, 0x00	; 0
    1322:	ed e2       	ldi	r30, 0x2D	; 45
    1324:	f0 e0       	ldi	r31, 0x00	; 0
    1326:	80 81       	ld	r24, Z
    1328:	81 60       	ori	r24, 0x01	; 1
    132a:	8c 93       	st	X, r24
	CLR_BIT(SPCR,SPCR_SPR1);
    132c:	ad e2       	ldi	r26, 0x2D	; 45
    132e:	b0 e0       	ldi	r27, 0x00	; 0
    1330:	ed e2       	ldi	r30, 0x2D	; 45
    1332:	f0 e0       	ldi	r31, 0x00	; 0
    1334:	80 81       	ld	r24, Z
    1336:	8d 7f       	andi	r24, 0xFD	; 253
    1338:	8c 93       	st	X, r24
	CLR_BIT(SPSR,SPSR_SPI2X);
    133a:	ae e2       	ldi	r26, 0x2E	; 46
    133c:	b0 e0       	ldi	r27, 0x00	; 0
    133e:	ee e2       	ldi	r30, 0x2E	; 46
    1340:	f0 e0       	ldi	r31, 0x00	; 0
    1342:	80 81       	ld	r24, Z
    1344:	8e 7f       	andi	r24, 0xFE	; 254
    1346:	8c 93       	st	X, r24

	SET_BIT(SPCR,SPCR_SPE);
    1348:	ad e2       	ldi	r26, 0x2D	; 45
    134a:	b0 e0       	ldi	r27, 0x00	; 0
    134c:	ed e2       	ldi	r30, 0x2D	; 45
    134e:	f0 e0       	ldi	r31, 0x00	; 0
    1350:	80 81       	ld	r24, Z
    1352:	80 64       	ori	r24, 0x40	; 64
    1354:	8c 93       	st	X, r24
}
    1356:	cf 91       	pop	r28
    1358:	df 91       	pop	r29
    135a:	08 95       	ret

0000135c <SPI_vInitSlave>:

void SPI_vInitSlave(void)
{
    135c:	df 93       	push	r29
    135e:	cf 93       	push	r28
    1360:	cd b7       	in	r28, 0x3d	; 61
    1362:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SPCR,SPCR_MSTR);
    1364:	ad e2       	ldi	r26, 0x2D	; 45
    1366:	b0 e0       	ldi	r27, 0x00	; 0
    1368:	ed e2       	ldi	r30, 0x2D	; 45
    136a:	f0 e0       	ldi	r31, 0x00	; 0
    136c:	80 81       	ld	r24, Z
    136e:	8f 7e       	andi	r24, 0xEF	; 239
    1370:	8c 93       	st	X, r24

	SET_BIT(SPCR,SPCR_SPE);
    1372:	ad e2       	ldi	r26, 0x2D	; 45
    1374:	b0 e0       	ldi	r27, 0x00	; 0
    1376:	ed e2       	ldi	r30, 0x2D	; 45
    1378:	f0 e0       	ldi	r31, 0x00	; 0
    137a:	80 81       	ld	r24, Z
    137c:	80 64       	ori	r24, 0x40	; 64
    137e:	8c 93       	st	X, r24
}
    1380:	cf 91       	pop	r28
    1382:	df 91       	pop	r29
    1384:	08 95       	ret

00001386 <SPI_u8Transceive>:
u8 	SPI_u8Transceive(u8 Copy_u8Data)
{
    1386:	df 93       	push	r29
    1388:	cf 93       	push	r28
    138a:	0f 92       	push	r0
    138c:	cd b7       	in	r28, 0x3d	; 61
    138e:	de b7       	in	r29, 0x3e	; 62
    1390:	89 83       	std	Y+1, r24	; 0x01
	/*Send data*/
	SPDR = Copy_u8Data;
    1392:	ef e2       	ldi	r30, 0x2F	; 47
    1394:	f0 e0       	ldi	r31, 0x00	; 0
    1396:	89 81       	ldd	r24, Y+1	; 0x01
    1398:	80 83       	st	Z, r24

	/*WAIT FOR TRANSFER*/
	while(GET_BIT(SPSR,SPSR_SPIF)==0);
    139a:	ee e2       	ldi	r30, 0x2E	; 46
    139c:	f0 e0       	ldi	r31, 0x00	; 0
    139e:	80 81       	ld	r24, Z
    13a0:	88 23       	and	r24, r24
    13a2:	dc f7       	brge	.-10     	; 0x139a <SPI_u8Transceive+0x14>

	/*Get the exchanged data*/
	return SPDR;
    13a4:	ef e2       	ldi	r30, 0x2F	; 47
    13a6:	f0 e0       	ldi	r31, 0x00	; 0
    13a8:	80 81       	ld	r24, Z
}
    13aa:	0f 90       	pop	r0
    13ac:	cf 91       	pop	r28
    13ae:	df 91       	pop	r29
    13b0:	08 95       	ret

000013b2 <PB_u8init>:
 *  Created on: Nov 6, 2023
 *      Author: olege
 */
#include "PB.h"

ERROR_STATUS PB_u8init(u8 Copy_u8PB_port , u8 Copy_u8PB_pin){
    13b2:	df 93       	push	r29
    13b4:	cf 93       	push	r28
    13b6:	00 d0       	rcall	.+0      	; 0x13b8 <PB_u8init+0x6>
    13b8:	cd b7       	in	r28, 0x3d	; 61
    13ba:	de b7       	in	r29, 0x3e	; 62
    13bc:	89 83       	std	Y+1, r24	; 0x01
    13be:	6a 83       	std	Y+2, r22	; 0x02

	return DIO_u8SetPinValue(Copy_u8PB_port,Copy_u8PB_pin,DIO_u8PIN_HIGH);
    13c0:	89 81       	ldd	r24, Y+1	; 0x01
    13c2:	6a 81       	ldd	r22, Y+2	; 0x02
    13c4:	41 e0       	ldi	r20, 0x01	; 1
    13c6:	0e 94 47 10 	call	0x208e	; 0x208e <DIO_u8SetPinValue>
}
    13ca:	0f 90       	pop	r0
    13cc:	0f 90       	pop	r0
    13ce:	cf 91       	pop	r28
    13d0:	df 91       	pop	r29
    13d2:	08 95       	ret

000013d4 <PB_u8GET_STATE>:


ERROR_STATUS PB_u8GET_STATE(u8 PB_u8Port , u8 PB_u8Pin , u8 PB_u8Pulltype , pu8 PB_pu8Value)
{
    13d4:	df 93       	push	r29
    13d6:	cf 93       	push	r28
    13d8:	cd b7       	in	r28, 0x3d	; 61
    13da:	de b7       	in	r29, 0x3e	; 62
    13dc:	27 97       	sbiw	r28, 0x07	; 7
    13de:	0f b6       	in	r0, 0x3f	; 63
    13e0:	f8 94       	cli
    13e2:	de bf       	out	0x3e, r29	; 62
    13e4:	0f be       	out	0x3f, r0	; 63
    13e6:	cd bf       	out	0x3d, r28	; 61
    13e8:	8a 83       	std	Y+2, r24	; 0x02
    13ea:	6b 83       	std	Y+3, r22	; 0x03
    13ec:	4c 83       	std	Y+4, r20	; 0x04
    13ee:	3e 83       	std	Y+6, r19	; 0x06
    13f0:	2d 83       	std	Y+5, r18	; 0x05
	u8 value;

	DIO_u8GetPinValue(PB_u8Port , PB_u8Pin , &value);
    13f2:	8a 81       	ldd	r24, Y+2	; 0x02
    13f4:	6b 81       	ldd	r22, Y+3	; 0x03
    13f6:	9e 01       	movw	r18, r28
    13f8:	2f 5f       	subi	r18, 0xFF	; 255
    13fa:	3f 4f       	sbci	r19, 0xFF	; 255
    13fc:	a9 01       	movw	r20, r18
    13fe:	0e 94 9f 11 	call	0x233e	; 0x233e <DIO_u8GetPinValue>
	if (value==PB_u8UnPressed)
    1402:	89 81       	ldd	r24, Y+1	; 0x01
    1404:	88 23       	and	r24, r24
    1406:	91 f4       	brne	.+36     	; 0x142c <PB_u8GET_STATE+0x58>
    1408:	08 c0       	rjmp	.+16     	; 0x141a <PB_u8GET_STATE+0x46>
	{
		while (value==PB_u8UnPressed)
		{
		 DIO_u8GetPinValue(PB_u8Port , PB_u8Pin , &value);
    140a:	8a 81       	ldd	r24, Y+2	; 0x02
    140c:	6b 81       	ldd	r22, Y+3	; 0x03
    140e:	9e 01       	movw	r18, r28
    1410:	2f 5f       	subi	r18, 0xFF	; 255
    1412:	3f 4f       	sbci	r19, 0xFF	; 255
    1414:	a9 01       	movw	r20, r18
    1416:	0e 94 9f 11 	call	0x233e	; 0x233e <DIO_u8GetPinValue>
	u8 value;

	DIO_u8GetPinValue(PB_u8Port , PB_u8Pin , &value);
	if (value==PB_u8UnPressed)
	{
		while (value==PB_u8UnPressed)
    141a:	89 81       	ldd	r24, Y+1	; 0x01
    141c:	88 23       	and	r24, r24
    141e:	a9 f3       	breq	.-22     	; 0x140a <PB_u8GET_STATE+0x36>
		{
		 DIO_u8GetPinValue(PB_u8Port , PB_u8Pin , &value);
		}
		* PB_pu8Value = PB_u8UnPressed;
    1420:	ed 81       	ldd	r30, Y+5	; 0x05
    1422:	fe 81       	ldd	r31, Y+6	; 0x06
    1424:	10 82       	st	Z, r1
		return PB_NPRESSED;
    1426:	85 e0       	ldi	r24, 0x05	; 5
    1428:	8f 83       	std	Y+7, r24	; 0x07
    142a:	18 c0       	rjmp	.+48     	; 0x145c <PB_u8GET_STATE+0x88>
	}

	else if (value==PB_u8Pressed)
    142c:	89 81       	ldd	r24, Y+1	; 0x01
    142e:	81 30       	cpi	r24, 0x01	; 1
    1430:	99 f4       	brne	.+38     	; 0x1458 <PB_u8GET_STATE+0x84>
    1432:	08 c0       	rjmp	.+16     	; 0x1444 <PB_u8GET_STATE+0x70>
	{
		while (value==PB_u8Pressed)
		{
		 DIO_u8GetPinValue(PB_u8Port , PB_u8Pin , &value);
    1434:	8a 81       	ldd	r24, Y+2	; 0x02
    1436:	6b 81       	ldd	r22, Y+3	; 0x03
    1438:	9e 01       	movw	r18, r28
    143a:	2f 5f       	subi	r18, 0xFF	; 255
    143c:	3f 4f       	sbci	r19, 0xFF	; 255
    143e:	a9 01       	movw	r20, r18
    1440:	0e 94 9f 11 	call	0x233e	; 0x233e <DIO_u8GetPinValue>
		return PB_NPRESSED;
	}

	else if (value==PB_u8Pressed)
	{
		while (value==PB_u8Pressed)
    1444:	89 81       	ldd	r24, Y+1	; 0x01
    1446:	81 30       	cpi	r24, 0x01	; 1
    1448:	a9 f3       	breq	.-22     	; 0x1434 <PB_u8GET_STATE+0x60>
		{
		 DIO_u8GetPinValue(PB_u8Port , PB_u8Pin , &value);
		}
		* PB_pu8Value = PB_u8Pressed;
    144a:	ed 81       	ldd	r30, Y+5	; 0x05
    144c:	fe 81       	ldd	r31, Y+6	; 0x06
    144e:	81 e0       	ldi	r24, 0x01	; 1
    1450:	80 83       	st	Z, r24
		return PB_PRESSED;
    1452:	84 e0       	ldi	r24, 0x04	; 4
    1454:	8f 83       	std	Y+7, r24	; 0x07
    1456:	02 c0       	rjmp	.+4      	; 0x145c <PB_u8GET_STATE+0x88>
	}

	return PB_VALUE;
    1458:	86 e0       	ldi	r24, 0x06	; 6
    145a:	8f 83       	std	Y+7, r24	; 0x07
    145c:	8f 81       	ldd	r24, Y+7	; 0x07
}
    145e:	27 96       	adiw	r28, 0x07	; 7
    1460:	0f b6       	in	r0, 0x3f	; 63
    1462:	f8 94       	cli
    1464:	de bf       	out	0x3e, r29	; 62
    1466:	0f be       	out	0x3f, r0	; 63
    1468:	cd bf       	out	0x3d, r28	; 61
    146a:	cf 91       	pop	r28
    146c:	df 91       	pop	r29
    146e:	08 95       	ret

00001470 <LED_u8init>:
 *      Author: olege
 */
#include "LED.h"

ERROR_STATUS LED_u8init(u8 LED_u8port , u8 LED_u8pin)
{
    1470:	df 93       	push	r29
    1472:	cf 93       	push	r28
    1474:	00 d0       	rcall	.+0      	; 0x1476 <LED_u8init+0x6>
    1476:	cd b7       	in	r28, 0x3d	; 61
    1478:	de b7       	in	r29, 0x3e	; 62
    147a:	89 83       	std	Y+1, r24	; 0x01
    147c:	6a 83       	std	Y+2, r22	; 0x02
	DIO_u8SetPinDirection(LED_u8port, LED_u8pin , DIO_u8PIN_OUTPUT);
    147e:	89 81       	ldd	r24, Y+1	; 0x01
    1480:	6a 81       	ldd	r22, Y+2	; 0x02
    1482:	41 e0       	ldi	r20, 0x01	; 1
    1484:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <DIO_u8SetPinDirection>

	return DIO_OK;
    1488:	80 e0       	ldi	r24, 0x00	; 0
}
    148a:	0f 90       	pop	r0
    148c:	0f 90       	pop	r0
    148e:	cf 91       	pop	r28
    1490:	df 91       	pop	r29
    1492:	08 95       	ret

00001494 <LED_u8On>:

ERROR_STATUS LED_u8On(u8 LED_u8port , u8 LED_u8pin)
{
    1494:	df 93       	push	r29
    1496:	cf 93       	push	r28
    1498:	00 d0       	rcall	.+0      	; 0x149a <LED_u8On+0x6>
    149a:	cd b7       	in	r28, 0x3d	; 61
    149c:	de b7       	in	r29, 0x3e	; 62
    149e:	89 83       	std	Y+1, r24	; 0x01
    14a0:	6a 83       	std	Y+2, r22	; 0x02
	DIO_u8SetPinValue(LED_u8port, LED_u8pin, DIO_u8PIN_HIGH);
    14a2:	89 81       	ldd	r24, Y+1	; 0x01
    14a4:	6a 81       	ldd	r22, Y+2	; 0x02
    14a6:	41 e0       	ldi	r20, 0x01	; 1
    14a8:	0e 94 47 10 	call	0x208e	; 0x208e <DIO_u8SetPinValue>

	return DIO_OK;
    14ac:	80 e0       	ldi	r24, 0x00	; 0
}
    14ae:	0f 90       	pop	r0
    14b0:	0f 90       	pop	r0
    14b2:	cf 91       	pop	r28
    14b4:	df 91       	pop	r29
    14b6:	08 95       	ret

000014b8 <LED_u8Off>:

ERROR_STATUS LED_u8Off(u8 LED_u8port , u8 LED_u8pin)
{
    14b8:	df 93       	push	r29
    14ba:	cf 93       	push	r28
    14bc:	00 d0       	rcall	.+0      	; 0x14be <LED_u8Off+0x6>
    14be:	cd b7       	in	r28, 0x3d	; 61
    14c0:	de b7       	in	r29, 0x3e	; 62
    14c2:	89 83       	std	Y+1, r24	; 0x01
    14c4:	6a 83       	std	Y+2, r22	; 0x02

	DIO_u8SetPinValue(LED_u8port, LED_u8pin, DIO_u8PIN_LOW);
    14c6:	89 81       	ldd	r24, Y+1	; 0x01
    14c8:	6a 81       	ldd	r22, Y+2	; 0x02
    14ca:	40 e0       	ldi	r20, 0x00	; 0
    14cc:	0e 94 47 10 	call	0x208e	; 0x208e <DIO_u8SetPinValue>

	return DIO_OK;
    14d0:	80 e0       	ldi	r24, 0x00	; 0
}
    14d2:	0f 90       	pop	r0
    14d4:	0f 90       	pop	r0
    14d6:	cf 91       	pop	r28
    14d8:	df 91       	pop	r29
    14da:	08 95       	ret

000014dc <LED_u8Toggle>:

ERROR_STATUS LED_u8Toggle(u8 LED_u8port , u8 LED_u8pin)
{
    14dc:	df 93       	push	r29
    14de:	cf 93       	push	r28
    14e0:	00 d0       	rcall	.+0      	; 0x14e2 <LED_u8Toggle+0x6>
    14e2:	cd b7       	in	r28, 0x3d	; 61
    14e4:	de b7       	in	r29, 0x3e	; 62
    14e6:	89 83       	std	Y+1, r24	; 0x01
    14e8:	6a 83       	std	Y+2, r22	; 0x02
	DIO_u8TogglePinValue(LED_u8port , LED_u8pin);
    14ea:	89 81       	ldd	r24, Y+1	; 0x01
    14ec:	6a 81       	ldd	r22, Y+2	; 0x02
    14ee:	0e 94 34 12 	call	0x2468	; 0x2468 <DIO_u8TogglePinValue>

	return DIO_OK;
    14f2:	80 e0       	ldi	r24, 0x00	; 0
}
    14f4:	0f 90       	pop	r0
    14f6:	0f 90       	pop	r0
    14f8:	cf 91       	pop	r28
    14fa:	df 91       	pop	r29
    14fc:	08 95       	ret

000014fe <LED_u8blink>:

ERROR_STATUS LED_u8blink(u8 LED_u8port, u8 LED_u8pin , u8 u8time_off , u8 u8time_on)
{
    14fe:	df 93       	push	r29
    1500:	cf 93       	push	r28
    1502:	cd b7       	in	r28, 0x3d	; 61
    1504:	de b7       	in	r29, 0x3e	; 62
    1506:	a0 97       	sbiw	r28, 0x20	; 32
    1508:	0f b6       	in	r0, 0x3f	; 63
    150a:	f8 94       	cli
    150c:	de bf       	out	0x3e, r29	; 62
    150e:	0f be       	out	0x3f, r0	; 63
    1510:	cd bf       	out	0x3d, r28	; 61
    1512:	8d 8f       	std	Y+29, r24	; 0x1d
    1514:	6e 8f       	std	Y+30, r22	; 0x1e
    1516:	4f 8f       	std	Y+31, r20	; 0x1f
    1518:	28 a3       	std	Y+32, r18	; 0x20
	DIO_u8SetPinValue(LED_u8port, LED_u8pin, DIO_u8PIN_HIGH);
    151a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    151c:	6e 8d       	ldd	r22, Y+30	; 0x1e
    151e:	41 e0       	ldi	r20, 0x01	; 1
    1520:	0e 94 47 10 	call	0x208e	; 0x208e <DIO_u8SetPinValue>
	_delay_ms(u8time_on);
    1524:	88 a1       	ldd	r24, Y+32	; 0x20
    1526:	88 2f       	mov	r24, r24
    1528:	90 e0       	ldi	r25, 0x00	; 0
    152a:	a0 e0       	ldi	r26, 0x00	; 0
    152c:	b0 e0       	ldi	r27, 0x00	; 0
    152e:	bc 01       	movw	r22, r24
    1530:	cd 01       	movw	r24, r26
    1532:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    1536:	dc 01       	movw	r26, r24
    1538:	cb 01       	movw	r24, r22
    153a:	89 8f       	std	Y+25, r24	; 0x19
    153c:	9a 8f       	std	Y+26, r25	; 0x1a
    153e:	ab 8f       	std	Y+27, r26	; 0x1b
    1540:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1542:	69 8d       	ldd	r22, Y+25	; 0x19
    1544:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1546:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1548:	9c 8d       	ldd	r25, Y+28	; 0x1c
    154a:	20 e0       	ldi	r18, 0x00	; 0
    154c:	30 e0       	ldi	r19, 0x00	; 0
    154e:	4a ef       	ldi	r20, 0xFA	; 250
    1550:	54 e4       	ldi	r21, 0x44	; 68
    1552:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1556:	dc 01       	movw	r26, r24
    1558:	cb 01       	movw	r24, r22
    155a:	8d 8b       	std	Y+21, r24	; 0x15
    155c:	9e 8b       	std	Y+22, r25	; 0x16
    155e:	af 8b       	std	Y+23, r26	; 0x17
    1560:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1562:	6d 89       	ldd	r22, Y+21	; 0x15
    1564:	7e 89       	ldd	r23, Y+22	; 0x16
    1566:	8f 89       	ldd	r24, Y+23	; 0x17
    1568:	98 8d       	ldd	r25, Y+24	; 0x18
    156a:	20 e0       	ldi	r18, 0x00	; 0
    156c:	30 e0       	ldi	r19, 0x00	; 0
    156e:	40 e8       	ldi	r20, 0x80	; 128
    1570:	5f e3       	ldi	r21, 0x3F	; 63
    1572:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1576:	88 23       	and	r24, r24
    1578:	2c f4       	brge	.+10     	; 0x1584 <LED_u8blink+0x86>
		__ticks = 1;
    157a:	81 e0       	ldi	r24, 0x01	; 1
    157c:	90 e0       	ldi	r25, 0x00	; 0
    157e:	9c 8b       	std	Y+20, r25	; 0x14
    1580:	8b 8b       	std	Y+19, r24	; 0x13
    1582:	3f c0       	rjmp	.+126    	; 0x1602 <LED_u8blink+0x104>
	else if (__tmp > 65535)
    1584:	6d 89       	ldd	r22, Y+21	; 0x15
    1586:	7e 89       	ldd	r23, Y+22	; 0x16
    1588:	8f 89       	ldd	r24, Y+23	; 0x17
    158a:	98 8d       	ldd	r25, Y+24	; 0x18
    158c:	20 e0       	ldi	r18, 0x00	; 0
    158e:	3f ef       	ldi	r19, 0xFF	; 255
    1590:	4f e7       	ldi	r20, 0x7F	; 127
    1592:	57 e4       	ldi	r21, 0x47	; 71
    1594:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1598:	18 16       	cp	r1, r24
    159a:	4c f5       	brge	.+82     	; 0x15ee <LED_u8blink+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    159c:	69 8d       	ldd	r22, Y+25	; 0x19
    159e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    15a0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    15a2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    15a4:	20 e0       	ldi	r18, 0x00	; 0
    15a6:	30 e0       	ldi	r19, 0x00	; 0
    15a8:	40 e2       	ldi	r20, 0x20	; 32
    15aa:	51 e4       	ldi	r21, 0x41	; 65
    15ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15b0:	dc 01       	movw	r26, r24
    15b2:	cb 01       	movw	r24, r22
    15b4:	bc 01       	movw	r22, r24
    15b6:	cd 01       	movw	r24, r26
    15b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15bc:	dc 01       	movw	r26, r24
    15be:	cb 01       	movw	r24, r22
    15c0:	9c 8b       	std	Y+20, r25	; 0x14
    15c2:	8b 8b       	std	Y+19, r24	; 0x13
    15c4:	0f c0       	rjmp	.+30     	; 0x15e4 <LED_u8blink+0xe6>
    15c6:	88 ec       	ldi	r24, 0xC8	; 200
    15c8:	90 e0       	ldi	r25, 0x00	; 0
    15ca:	9a 8b       	std	Y+18, r25	; 0x12
    15cc:	89 8b       	std	Y+17, r24	; 0x11
    15ce:	89 89       	ldd	r24, Y+17	; 0x11
    15d0:	9a 89       	ldd	r25, Y+18	; 0x12
    15d2:	01 97       	sbiw	r24, 0x01	; 1
    15d4:	f1 f7       	brne	.-4      	; 0x15d2 <LED_u8blink+0xd4>
    15d6:	9a 8b       	std	Y+18, r25	; 0x12
    15d8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15da:	8b 89       	ldd	r24, Y+19	; 0x13
    15dc:	9c 89       	ldd	r25, Y+20	; 0x14
    15de:	01 97       	sbiw	r24, 0x01	; 1
    15e0:	9c 8b       	std	Y+20, r25	; 0x14
    15e2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15e4:	8b 89       	ldd	r24, Y+19	; 0x13
    15e6:	9c 89       	ldd	r25, Y+20	; 0x14
    15e8:	00 97       	sbiw	r24, 0x00	; 0
    15ea:	69 f7       	brne	.-38     	; 0x15c6 <LED_u8blink+0xc8>
    15ec:	14 c0       	rjmp	.+40     	; 0x1616 <LED_u8blink+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15ee:	6d 89       	ldd	r22, Y+21	; 0x15
    15f0:	7e 89       	ldd	r23, Y+22	; 0x16
    15f2:	8f 89       	ldd	r24, Y+23	; 0x17
    15f4:	98 8d       	ldd	r25, Y+24	; 0x18
    15f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15fa:	dc 01       	movw	r26, r24
    15fc:	cb 01       	movw	r24, r22
    15fe:	9c 8b       	std	Y+20, r25	; 0x14
    1600:	8b 8b       	std	Y+19, r24	; 0x13
    1602:	8b 89       	ldd	r24, Y+19	; 0x13
    1604:	9c 89       	ldd	r25, Y+20	; 0x14
    1606:	98 8b       	std	Y+16, r25	; 0x10
    1608:	8f 87       	std	Y+15, r24	; 0x0f
    160a:	8f 85       	ldd	r24, Y+15	; 0x0f
    160c:	98 89       	ldd	r25, Y+16	; 0x10
    160e:	01 97       	sbiw	r24, 0x01	; 1
    1610:	f1 f7       	brne	.-4      	; 0x160e <LED_u8blink+0x110>
    1612:	98 8b       	std	Y+16, r25	; 0x10
    1614:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_u8SetPinValue(LED_u8port, LED_u8pin, DIO_u8PIN_LOW);
    1616:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1618:	6e 8d       	ldd	r22, Y+30	; 0x1e
    161a:	40 e0       	ldi	r20, 0x00	; 0
    161c:	0e 94 47 10 	call	0x208e	; 0x208e <DIO_u8SetPinValue>
	_delay_ms(u8time_off);
    1620:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1622:	88 2f       	mov	r24, r24
    1624:	90 e0       	ldi	r25, 0x00	; 0
    1626:	a0 e0       	ldi	r26, 0x00	; 0
    1628:	b0 e0       	ldi	r27, 0x00	; 0
    162a:	bc 01       	movw	r22, r24
    162c:	cd 01       	movw	r24, r26
    162e:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    1632:	dc 01       	movw	r26, r24
    1634:	cb 01       	movw	r24, r22
    1636:	8b 87       	std	Y+11, r24	; 0x0b
    1638:	9c 87       	std	Y+12, r25	; 0x0c
    163a:	ad 87       	std	Y+13, r26	; 0x0d
    163c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    163e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1640:	7c 85       	ldd	r23, Y+12	; 0x0c
    1642:	8d 85       	ldd	r24, Y+13	; 0x0d
    1644:	9e 85       	ldd	r25, Y+14	; 0x0e
    1646:	20 e0       	ldi	r18, 0x00	; 0
    1648:	30 e0       	ldi	r19, 0x00	; 0
    164a:	4a ef       	ldi	r20, 0xFA	; 250
    164c:	54 e4       	ldi	r21, 0x44	; 68
    164e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1652:	dc 01       	movw	r26, r24
    1654:	cb 01       	movw	r24, r22
    1656:	8f 83       	std	Y+7, r24	; 0x07
    1658:	98 87       	std	Y+8, r25	; 0x08
    165a:	a9 87       	std	Y+9, r26	; 0x09
    165c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    165e:	6f 81       	ldd	r22, Y+7	; 0x07
    1660:	78 85       	ldd	r23, Y+8	; 0x08
    1662:	89 85       	ldd	r24, Y+9	; 0x09
    1664:	9a 85       	ldd	r25, Y+10	; 0x0a
    1666:	20 e0       	ldi	r18, 0x00	; 0
    1668:	30 e0       	ldi	r19, 0x00	; 0
    166a:	40 e8       	ldi	r20, 0x80	; 128
    166c:	5f e3       	ldi	r21, 0x3F	; 63
    166e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1672:	88 23       	and	r24, r24
    1674:	2c f4       	brge	.+10     	; 0x1680 <LED_u8blink+0x182>
		__ticks = 1;
    1676:	81 e0       	ldi	r24, 0x01	; 1
    1678:	90 e0       	ldi	r25, 0x00	; 0
    167a:	9e 83       	std	Y+6, r25	; 0x06
    167c:	8d 83       	std	Y+5, r24	; 0x05
    167e:	3f c0       	rjmp	.+126    	; 0x16fe <LED_u8blink+0x200>
	else if (__tmp > 65535)
    1680:	6f 81       	ldd	r22, Y+7	; 0x07
    1682:	78 85       	ldd	r23, Y+8	; 0x08
    1684:	89 85       	ldd	r24, Y+9	; 0x09
    1686:	9a 85       	ldd	r25, Y+10	; 0x0a
    1688:	20 e0       	ldi	r18, 0x00	; 0
    168a:	3f ef       	ldi	r19, 0xFF	; 255
    168c:	4f e7       	ldi	r20, 0x7F	; 127
    168e:	57 e4       	ldi	r21, 0x47	; 71
    1690:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1694:	18 16       	cp	r1, r24
    1696:	4c f5       	brge	.+82     	; 0x16ea <LED_u8blink+0x1ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1698:	6b 85       	ldd	r22, Y+11	; 0x0b
    169a:	7c 85       	ldd	r23, Y+12	; 0x0c
    169c:	8d 85       	ldd	r24, Y+13	; 0x0d
    169e:	9e 85       	ldd	r25, Y+14	; 0x0e
    16a0:	20 e0       	ldi	r18, 0x00	; 0
    16a2:	30 e0       	ldi	r19, 0x00	; 0
    16a4:	40 e2       	ldi	r20, 0x20	; 32
    16a6:	51 e4       	ldi	r21, 0x41	; 65
    16a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16ac:	dc 01       	movw	r26, r24
    16ae:	cb 01       	movw	r24, r22
    16b0:	bc 01       	movw	r22, r24
    16b2:	cd 01       	movw	r24, r26
    16b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16b8:	dc 01       	movw	r26, r24
    16ba:	cb 01       	movw	r24, r22
    16bc:	9e 83       	std	Y+6, r25	; 0x06
    16be:	8d 83       	std	Y+5, r24	; 0x05
    16c0:	0f c0       	rjmp	.+30     	; 0x16e0 <LED_u8blink+0x1e2>
    16c2:	88 ec       	ldi	r24, 0xC8	; 200
    16c4:	90 e0       	ldi	r25, 0x00	; 0
    16c6:	9c 83       	std	Y+4, r25	; 0x04
    16c8:	8b 83       	std	Y+3, r24	; 0x03
    16ca:	8b 81       	ldd	r24, Y+3	; 0x03
    16cc:	9c 81       	ldd	r25, Y+4	; 0x04
    16ce:	01 97       	sbiw	r24, 0x01	; 1
    16d0:	f1 f7       	brne	.-4      	; 0x16ce <LED_u8blink+0x1d0>
    16d2:	9c 83       	std	Y+4, r25	; 0x04
    16d4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16d6:	8d 81       	ldd	r24, Y+5	; 0x05
    16d8:	9e 81       	ldd	r25, Y+6	; 0x06
    16da:	01 97       	sbiw	r24, 0x01	; 1
    16dc:	9e 83       	std	Y+6, r25	; 0x06
    16de:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16e0:	8d 81       	ldd	r24, Y+5	; 0x05
    16e2:	9e 81       	ldd	r25, Y+6	; 0x06
    16e4:	00 97       	sbiw	r24, 0x00	; 0
    16e6:	69 f7       	brne	.-38     	; 0x16c2 <LED_u8blink+0x1c4>
    16e8:	14 c0       	rjmp	.+40     	; 0x1712 <LED_u8blink+0x214>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16ea:	6f 81       	ldd	r22, Y+7	; 0x07
    16ec:	78 85       	ldd	r23, Y+8	; 0x08
    16ee:	89 85       	ldd	r24, Y+9	; 0x09
    16f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    16f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16f6:	dc 01       	movw	r26, r24
    16f8:	cb 01       	movw	r24, r22
    16fa:	9e 83       	std	Y+6, r25	; 0x06
    16fc:	8d 83       	std	Y+5, r24	; 0x05
    16fe:	8d 81       	ldd	r24, Y+5	; 0x05
    1700:	9e 81       	ldd	r25, Y+6	; 0x06
    1702:	9a 83       	std	Y+2, r25	; 0x02
    1704:	89 83       	std	Y+1, r24	; 0x01
    1706:	89 81       	ldd	r24, Y+1	; 0x01
    1708:	9a 81       	ldd	r25, Y+2	; 0x02
    170a:	01 97       	sbiw	r24, 0x01	; 1
    170c:	f1 f7       	brne	.-4      	; 0x170a <LED_u8blink+0x20c>
    170e:	9a 83       	std	Y+2, r25	; 0x02
    1710:	89 83       	std	Y+1, r24	; 0x01

	return DIO_OK;
    1712:	80 e0       	ldi	r24, 0x00	; 0
}
    1714:	a0 96       	adiw	r28, 0x20	; 32
    1716:	0f b6       	in	r0, 0x3f	; 63
    1718:	f8 94       	cli
    171a:	de bf       	out	0x3e, r29	; 62
    171c:	0f be       	out	0x3f, r0	; 63
    171e:	cd bf       	out	0x3d, r28	; 61
    1720:	cf 91       	pop	r28
    1722:	df 91       	pop	r29
    1724:	08 95       	ret

00001726 <KPD_vKPDInit>:
 */

#include "Keypad.h"

void KPD_vKPDInit(void)
{
    1726:	df 93       	push	r29
    1728:	cf 93       	push	r28
    172a:	cd b7       	in	r28, 0x3d	; 61
    172c:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPortValue(KPD_PORT, DIO_u8PORT_HIGH);
    172e:	82 e0       	ldi	r24, 0x02	; 2
    1730:	6f ef       	ldi	r22, 0xFF	; 255
    1732:	0e 94 56 11 	call	0x22ac	; 0x22ac <DIO_u8SetPortValue>


	DIO_u8SetPinDirection(KPD_PORT, KPD_ROW0_PIN, DIO_u8PIN_INPUT);
    1736:	82 e0       	ldi	r24, 0x02	; 2
    1738:	64 e0       	ldi	r22, 0x04	; 4
    173a:	40 e0       	ldi	r20, 0x00	; 0
    173c:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(KPD_PORT, KPD_ROW1_PIN, DIO_u8PIN_INPUT);
    1740:	82 e0       	ldi	r24, 0x02	; 2
    1742:	65 e0       	ldi	r22, 0x05	; 5
    1744:	40 e0       	ldi	r20, 0x00	; 0
    1746:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(KPD_PORT, KPD_ROW2_PIN, DIO_u8PIN_INPUT);
    174a:	82 e0       	ldi	r24, 0x02	; 2
    174c:	66 e0       	ldi	r22, 0x06	; 6
    174e:	40 e0       	ldi	r20, 0x00	; 0
    1750:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(KPD_PORT, KPD_ROW3_PIN, DIO_u8PIN_INPUT);
    1754:	82 e0       	ldi	r24, 0x02	; 2
    1756:	67 e0       	ldi	r22, 0x07	; 7
    1758:	40 e0       	ldi	r20, 0x00	; 0
    175a:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(KPD_PORT, KPD_COLUMN0_PIN, DIO_u8PIN_OUTPUT);
    175e:	82 e0       	ldi	r24, 0x02	; 2
    1760:	60 e0       	ldi	r22, 0x00	; 0
    1762:	41 e0       	ldi	r20, 0x01	; 1
    1764:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(KPD_PORT, KPD_COLUMN1_PIN, DIO_u8PIN_OUTPUT);
    1768:	82 e0       	ldi	r24, 0x02	; 2
    176a:	61 e0       	ldi	r22, 0x01	; 1
    176c:	41 e0       	ldi	r20, 0x01	; 1
    176e:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(KPD_PORT, KPD_COLUMN2_PIN, DIO_u8PIN_OUTPUT);
    1772:	82 e0       	ldi	r24, 0x02	; 2
    1774:	62 e0       	ldi	r22, 0x02	; 2
    1776:	41 e0       	ldi	r20, 0x01	; 1
    1778:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(KPD_PORT, KPD_COLUMN3_PIN, DIO_u8PIN_OUTPUT);
    177c:	82 e0       	ldi	r24, 0x02	; 2
    177e:	63 e0       	ldi	r22, 0x03	; 3
    1780:	41 e0       	ldi	r20, 0x01	; 1
    1782:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <DIO_u8SetPinDirection>

}
    1786:	cf 91       	pop	r28
    1788:	df 91       	pop	r29
    178a:	08 95       	ret

0000178c <KPD_u8GetPressedKey>:

u8 KPD_u8GetPressedKey(void)
{
    178c:	df 93       	push	r29
    178e:	cf 93       	push	r28
    1790:	cd b7       	in	r28, 0x3d	; 61
    1792:	de b7       	in	r29, 0x3e	; 62
    1794:	a2 97       	sbiw	r28, 0x22	; 34
    1796:	0f b6       	in	r0, 0x3f	; 63
    1798:	f8 94       	cli
    179a:	de bf       	out	0x3e, r29	; 62
    179c:	0f be       	out	0x3f, r0	; 63
    179e:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8PressedKey=KPD_NOT_PRESSED, Local_u8ColumnIndex , Local_u8RowIndex , Local_u8PinState;
    17a0:	8f ef       	ldi	r24, 0xFF	; 255
    17a2:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_u8ColumnArr[4] = { KPD_COLUMN0_PIN, KPD_COLUMN1_PIN, KPD_COLUMN2_PIN, KPD_COLUMN3_PIN};
    17a4:	1d 82       	std	Y+5, r1	; 0x05
    17a6:	81 e0       	ldi	r24, 0x01	; 1
    17a8:	8e 83       	std	Y+6, r24	; 0x06
    17aa:	82 e0       	ldi	r24, 0x02	; 2
    17ac:	8f 83       	std	Y+7, r24	; 0x07
    17ae:	83 e0       	ldi	r24, 0x03	; 3
    17b0:	88 87       	std	Y+8, r24	; 0x08
	u8 Local_u8RowArr[4] = { KPD_ROW0_PIN, KPD_ROW1_PIN, KPD_ROW2_PIN, KPD_ROW3_PIN};
    17b2:	84 e0       	ldi	r24, 0x04	; 4
    17b4:	89 87       	std	Y+9, r24	; 0x09
    17b6:	85 e0       	ldi	r24, 0x05	; 5
    17b8:	8a 87       	std	Y+10, r24	; 0x0a
    17ba:	86 e0       	ldi	r24, 0x06	; 6
    17bc:	8b 87       	std	Y+11, r24	; 0x0b
    17be:	87 e0       	ldi	r24, 0x07	; 7
    17c0:	8c 87       	std	Y+12, r24	; 0x0c
	u8 Local_u8KPDArr[4][4] = KPD_ARR_VAL;
    17c2:	ce 01       	movw	r24, r28
    17c4:	0d 96       	adiw	r24, 0x0d	; 13
    17c6:	9f 8f       	std	Y+31, r25	; 0x1f
    17c8:	8e 8f       	std	Y+30, r24	; 0x1e
    17ca:	e2 ee       	ldi	r30, 0xE2	; 226
    17cc:	f2 e0       	ldi	r31, 0x02	; 2
    17ce:	f9 a3       	std	Y+33, r31	; 0x21
    17d0:	e8 a3       	std	Y+32, r30	; 0x20
    17d2:	f0 e1       	ldi	r31, 0x10	; 16
    17d4:	fa a3       	std	Y+34, r31	; 0x22
    17d6:	e8 a1       	ldd	r30, Y+32	; 0x20
    17d8:	f9 a1       	ldd	r31, Y+33	; 0x21
    17da:	00 80       	ld	r0, Z
    17dc:	88 a1       	ldd	r24, Y+32	; 0x20
    17de:	99 a1       	ldd	r25, Y+33	; 0x21
    17e0:	01 96       	adiw	r24, 0x01	; 1
    17e2:	99 a3       	std	Y+33, r25	; 0x21
    17e4:	88 a3       	std	Y+32, r24	; 0x20
    17e6:	ee 8d       	ldd	r30, Y+30	; 0x1e
    17e8:	ff 8d       	ldd	r31, Y+31	; 0x1f
    17ea:	00 82       	st	Z, r0
    17ec:	8e 8d       	ldd	r24, Y+30	; 0x1e
    17ee:	9f 8d       	ldd	r25, Y+31	; 0x1f
    17f0:	01 96       	adiw	r24, 0x01	; 1
    17f2:	9f 8f       	std	Y+31, r25	; 0x1f
    17f4:	8e 8f       	std	Y+30, r24	; 0x1e
    17f6:	9a a1       	ldd	r25, Y+34	; 0x22
    17f8:	91 50       	subi	r25, 0x01	; 1
    17fa:	9a a3       	std	Y+34, r25	; 0x22
    17fc:	ea a1       	ldd	r30, Y+34	; 0x22
    17fe:	ee 23       	and	r30, r30
    1800:	51 f7       	brne	.-44     	; 0x17d6 <KPD_u8GetPressedKey+0x4a>


	for(Local_u8ColumnIndex=0 ;Local_u8ColumnIndex < 4 ;Local_u8ColumnIndex++ )
    1802:	1a 82       	std	Y+2, r1	; 0x02
    1804:	68 c0       	rjmp	.+208    	; 0x18d6 <KPD_u8GetPressedKey+0x14a>
	{
		//Activate current column
		DIO_u8SetPinValue(KPD_PORT,Local_u8ColumnArr[Local_u8ColumnIndex],DIO_u8PIN_LOW);
    1806:	8a 81       	ldd	r24, Y+2	; 0x02
    1808:	28 2f       	mov	r18, r24
    180a:	30 e0       	ldi	r19, 0x00	; 0
    180c:	ce 01       	movw	r24, r28
    180e:	05 96       	adiw	r24, 0x05	; 5
    1810:	fc 01       	movw	r30, r24
    1812:	e2 0f       	add	r30, r18
    1814:	f3 1f       	adc	r31, r19
    1816:	90 81       	ld	r25, Z
    1818:	82 e0       	ldi	r24, 0x02	; 2
    181a:	69 2f       	mov	r22, r25
    181c:	40 e0       	ldi	r20, 0x00	; 0
    181e:	0e 94 47 10 	call	0x208e	; 0x208e <DIO_u8SetPinValue>

		for(Local_u8RowIndex=0 ;Local_u8RowIndex < 4 ;Local_u8RowIndex++)
    1822:	19 82       	std	Y+1, r1	; 0x01
    1824:	43 c0       	rjmp	.+134    	; 0x18ac <KPD_u8GetPressedKey+0x120>
		{
			//read current row
			DIO_u8GetPinValue(KPD_PORT,Local_u8RowArr[Local_u8RowIndex],&Local_u8PinState);
    1826:	89 81       	ldd	r24, Y+1	; 0x01
    1828:	28 2f       	mov	r18, r24
    182a:	30 e0       	ldi	r19, 0x00	; 0
    182c:	ce 01       	movw	r24, r28
    182e:	09 96       	adiw	r24, 0x09	; 9
    1830:	fc 01       	movw	r30, r24
    1832:	e2 0f       	add	r30, r18
    1834:	f3 1f       	adc	r31, r19
    1836:	90 81       	ld	r25, Z
    1838:	9e 01       	movw	r18, r28
    183a:	2c 5f       	subi	r18, 0xFC	; 252
    183c:	3f 4f       	sbci	r19, 0xFF	; 255
    183e:	82 e0       	ldi	r24, 0x02	; 2
    1840:	69 2f       	mov	r22, r25
    1842:	a9 01       	movw	r20, r18
    1844:	0e 94 9f 11 	call	0x233e	; 0x233e <DIO_u8GetPinValue>

			//check if pin is pressed
			if(DIO_u8PIN_LOW == Local_u8PinState)
    1848:	8c 81       	ldd	r24, Y+4	; 0x04
    184a:	88 23       	and	r24, r24
    184c:	61 f5       	brne	.+88     	; 0x18a6 <KPD_u8GetPressedKey+0x11a>
    184e:	11 c0       	rjmp	.+34     	; 0x1872 <KPD_u8GetPressedKey+0xe6>
			{
				//Busy waiting until key is released
				while(DIO_u8PIN_LOW == Local_u8PinState)
				{
					DIO_u8GetPinValue(KPD_PORT,Local_u8RowArr[Local_u8RowIndex],&Local_u8PinState);
    1850:	89 81       	ldd	r24, Y+1	; 0x01
    1852:	28 2f       	mov	r18, r24
    1854:	30 e0       	ldi	r19, 0x00	; 0
    1856:	ce 01       	movw	r24, r28
    1858:	09 96       	adiw	r24, 0x09	; 9
    185a:	fc 01       	movw	r30, r24
    185c:	e2 0f       	add	r30, r18
    185e:	f3 1f       	adc	r31, r19
    1860:	90 81       	ld	r25, Z
    1862:	9e 01       	movw	r18, r28
    1864:	2c 5f       	subi	r18, 0xFC	; 252
    1866:	3f 4f       	sbci	r19, 0xFF	; 255
    1868:	82 e0       	ldi	r24, 0x02	; 2
    186a:	69 2f       	mov	r22, r25
    186c:	a9 01       	movw	r20, r18
    186e:	0e 94 9f 11 	call	0x233e	; 0x233e <DIO_u8GetPinValue>

			//check if pin is pressed
			if(DIO_u8PIN_LOW == Local_u8PinState)
			{
				//Busy waiting until key is released
				while(DIO_u8PIN_LOW == Local_u8PinState)
    1872:	8c 81       	ldd	r24, Y+4	; 0x04
    1874:	88 23       	and	r24, r24
    1876:	61 f3       	breq	.-40     	; 0x1850 <KPD_u8GetPressedKey+0xc4>
				{
					DIO_u8GetPinValue(KPD_PORT,Local_u8RowArr[Local_u8RowIndex],&Local_u8PinState);
				}

				Local_u8PressedKey = Local_u8KPDArr[Local_u8RowIndex][Local_u8ColumnIndex];
    1878:	89 81       	ldd	r24, Y+1	; 0x01
    187a:	28 2f       	mov	r18, r24
    187c:	30 e0       	ldi	r19, 0x00	; 0
    187e:	8a 81       	ldd	r24, Y+2	; 0x02
    1880:	48 2f       	mov	r20, r24
    1882:	50 e0       	ldi	r21, 0x00	; 0
    1884:	22 0f       	add	r18, r18
    1886:	33 1f       	adc	r19, r19
    1888:	22 0f       	add	r18, r18
    188a:	33 1f       	adc	r19, r19
    188c:	ce 01       	movw	r24, r28
    188e:	01 96       	adiw	r24, 0x01	; 1
    1890:	82 0f       	add	r24, r18
    1892:	93 1f       	adc	r25, r19
    1894:	84 0f       	add	r24, r20
    1896:	95 1f       	adc	r25, r21
    1898:	fc 01       	movw	r30, r24
    189a:	3c 96       	adiw	r30, 0x0c	; 12
    189c:	80 81       	ld	r24, Z
    189e:	8b 83       	std	Y+3, r24	; 0x03
				return Local_u8PressedKey;
    18a0:	fb 81       	ldd	r31, Y+3	; 0x03
    18a2:	fd 8f       	std	Y+29, r31	; 0x1d
    18a4:	1e c0       	rjmp	.+60     	; 0x18e2 <KPD_u8GetPressedKey+0x156>
	for(Local_u8ColumnIndex=0 ;Local_u8ColumnIndex < 4 ;Local_u8ColumnIndex++ )
	{
		//Activate current column
		DIO_u8SetPinValue(KPD_PORT,Local_u8ColumnArr[Local_u8ColumnIndex],DIO_u8PIN_LOW);

		for(Local_u8RowIndex=0 ;Local_u8RowIndex < 4 ;Local_u8RowIndex++)
    18a6:	89 81       	ldd	r24, Y+1	; 0x01
    18a8:	8f 5f       	subi	r24, 0xFF	; 255
    18aa:	89 83       	std	Y+1, r24	; 0x01
    18ac:	89 81       	ldd	r24, Y+1	; 0x01
    18ae:	84 30       	cpi	r24, 0x04	; 4
    18b0:	08 f4       	brcc	.+2      	; 0x18b4 <KPD_u8GetPressedKey+0x128>
    18b2:	b9 cf       	rjmp	.-142    	; 0x1826 <KPD_u8GetPressedKey+0x9a>
			}

		}

		//Deactivate current column
		DIO_u8SetPinValue(KPD_PORT,Local_u8ColumnArr[Local_u8ColumnIndex],DIO_u8PIN_HIGH);
    18b4:	8a 81       	ldd	r24, Y+2	; 0x02
    18b6:	28 2f       	mov	r18, r24
    18b8:	30 e0       	ldi	r19, 0x00	; 0
    18ba:	ce 01       	movw	r24, r28
    18bc:	05 96       	adiw	r24, 0x05	; 5
    18be:	fc 01       	movw	r30, r24
    18c0:	e2 0f       	add	r30, r18
    18c2:	f3 1f       	adc	r31, r19
    18c4:	90 81       	ld	r25, Z
    18c6:	82 e0       	ldi	r24, 0x02	; 2
    18c8:	69 2f       	mov	r22, r25
    18ca:	41 e0       	ldi	r20, 0x01	; 1
    18cc:	0e 94 47 10 	call	0x208e	; 0x208e <DIO_u8SetPinValue>
	u8 Local_u8ColumnArr[4] = { KPD_COLUMN0_PIN, KPD_COLUMN1_PIN, KPD_COLUMN2_PIN, KPD_COLUMN3_PIN};
	u8 Local_u8RowArr[4] = { KPD_ROW0_PIN, KPD_ROW1_PIN, KPD_ROW2_PIN, KPD_ROW3_PIN};
	u8 Local_u8KPDArr[4][4] = KPD_ARR_VAL;


	for(Local_u8ColumnIndex=0 ;Local_u8ColumnIndex < 4 ;Local_u8ColumnIndex++ )
    18d0:	8a 81       	ldd	r24, Y+2	; 0x02
    18d2:	8f 5f       	subi	r24, 0xFF	; 255
    18d4:	8a 83       	std	Y+2, r24	; 0x02
    18d6:	8a 81       	ldd	r24, Y+2	; 0x02
    18d8:	84 30       	cpi	r24, 0x04	; 4
    18da:	08 f4       	brcc	.+2      	; 0x18de <KPD_u8GetPressedKey+0x152>
    18dc:	94 cf       	rjmp	.-216    	; 0x1806 <KPD_u8GetPressedKey+0x7a>
		//Deactivate current column
		DIO_u8SetPinValue(KPD_PORT,Local_u8ColumnArr[Local_u8ColumnIndex],DIO_u8PIN_HIGH);

	}

	return Local_u8PressedKey;
    18de:	8b 81       	ldd	r24, Y+3	; 0x03
    18e0:	8d 8f       	std	Y+29, r24	; 0x1d
    18e2:	8d 8d       	ldd	r24, Y+29	; 0x1d
}
    18e4:	a2 96       	adiw	r28, 0x22	; 34
    18e6:	0f b6       	in	r0, 0x3f	; 63
    18e8:	f8 94       	cli
    18ea:	de bf       	out	0x3e, r29	; 62
    18ec:	0f be       	out	0x3f, r0	; 63
    18ee:	cd bf       	out	0x3d, r28	; 61
    18f0:	cf 91       	pop	r28
    18f2:	df 91       	pop	r29
    18f4:	08 95       	ret

000018f6 <GIE_vEnable>:
#include "Interrupt.h"

static void (*INT0_CallBackFun)(void);

void GIE_vEnable(void)
{
    18f6:	df 93       	push	r29
    18f8:	cf 93       	push	r28
    18fa:	cd b7       	in	r28, 0x3d	; 61
    18fc:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,SREG_I);
    18fe:	af e5       	ldi	r26, 0x5F	; 95
    1900:	b0 e0       	ldi	r27, 0x00	; 0
    1902:	ef e5       	ldi	r30, 0x5F	; 95
    1904:	f0 e0       	ldi	r31, 0x00	; 0
    1906:	80 81       	ld	r24, Z
    1908:	80 68       	ori	r24, 0x80	; 128
    190a:	8c 93       	st	X, r24
}
    190c:	cf 91       	pop	r28
    190e:	df 91       	pop	r29
    1910:	08 95       	ret

00001912 <GIE_vDisable>:

void GIE_vDisable(void)
{
    1912:	df 93       	push	r29
    1914:	cf 93       	push	r28
    1916:	cd b7       	in	r28, 0x3d	; 61
    1918:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,SREG_I);
    191a:	af e5       	ldi	r26, 0x5F	; 95
    191c:	b0 e0       	ldi	r27, 0x00	; 0
    191e:	ef e5       	ldi	r30, 0x5F	; 95
    1920:	f0 e0       	ldi	r31, 0x00	; 0
    1922:	80 81       	ld	r24, Z
    1924:	8f 77       	andi	r24, 0x7F	; 127
    1926:	8c 93       	st	X, r24
}
    1928:	cf 91       	pop	r28
    192a:	df 91       	pop	r29
    192c:	08 95       	ret

0000192e <EIE_vINT0Init>:

void EIE_vINT0Init(void (*Copy_CallBackFun)(void))
{
    192e:	df 93       	push	r29
    1930:	cf 93       	push	r28
    1932:	00 d0       	rcall	.+0      	; 0x1934 <EIE_vINT0Init+0x6>
    1934:	cd b7       	in	r28, 0x3d	; 61
    1936:	de b7       	in	r29, 0x3e	; 62
    1938:	9a 83       	std	Y+2, r25	; 0x02
    193a:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(MCUCR,MCUCR_ISC01);
    193c:	a5 e5       	ldi	r26, 0x55	; 85
    193e:	b0 e0       	ldi	r27, 0x00	; 0
    1940:	e5 e5       	ldi	r30, 0x55	; 85
    1942:	f0 e0       	ldi	r31, 0x00	; 0
    1944:	80 81       	ld	r24, Z
    1946:	82 60       	ori	r24, 0x02	; 2
    1948:	8c 93       	st	X, r24
	CLR_BIT(MCUCR,MCUCR_ISC00);
    194a:	a5 e5       	ldi	r26, 0x55	; 85
    194c:	b0 e0       	ldi	r27, 0x00	; 0
    194e:	e5 e5       	ldi	r30, 0x55	; 85
    1950:	f0 e0       	ldi	r31, 0x00	; 0
    1952:	80 81       	ld	r24, Z
    1954:	8e 7f       	andi	r24, 0xFE	; 254
    1956:	8c 93       	st	X, r24
	if(Copy_CallBackFun != NULL_POINTER)
    1958:	89 81       	ldd	r24, Y+1	; 0x01
    195a:	9a 81       	ldd	r25, Y+2	; 0x02
    195c:	00 97       	sbiw	r24, 0x00	; 0
    195e:	31 f0       	breq	.+12     	; 0x196c <EIE_vINT0Init+0x3e>
	{
		INT0_CallBackFun = Copy_CallBackFun;
    1960:	89 81       	ldd	r24, Y+1	; 0x01
    1962:	9a 81       	ldd	r25, Y+2	; 0x02
    1964:	90 93 f5 02 	sts	0x02F5, r25
    1968:	80 93 f4 02 	sts	0x02F4, r24
	}
	SET_BIT(GICR,GICR_INT0);
    196c:	ab e5       	ldi	r26, 0x5B	; 91
    196e:	b0 e0       	ldi	r27, 0x00	; 0
    1970:	eb e5       	ldi	r30, 0x5B	; 91
    1972:	f0 e0       	ldi	r31, 0x00	; 0
    1974:	80 81       	ld	r24, Z
    1976:	80 64       	ori	r24, 0x40	; 64
    1978:	8c 93       	st	X, r24
}
    197a:	0f 90       	pop	r0
    197c:	0f 90       	pop	r0
    197e:	cf 91       	pop	r28
    1980:	df 91       	pop	r29
    1982:	08 95       	ret

00001984 <EIE_vINT1Init>:

void EIE_vINT1Init(void)
{
    1984:	df 93       	push	r29
    1986:	cf 93       	push	r28
    1988:	cd b7       	in	r28, 0x3d	; 61
    198a:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(MCUCR,MCUCR_ISC11);
    198c:	a5 e5       	ldi	r26, 0x55	; 85
    198e:	b0 e0       	ldi	r27, 0x00	; 0
    1990:	e5 e5       	ldi	r30, 0x55	; 85
    1992:	f0 e0       	ldi	r31, 0x00	; 0
    1994:	80 81       	ld	r24, Z
    1996:	88 60       	ori	r24, 0x08	; 8
    1998:	8c 93       	st	X, r24
	CLR_BIT(MCUCR,MCUCR_ISC10);
    199a:	a5 e5       	ldi	r26, 0x55	; 85
    199c:	b0 e0       	ldi	r27, 0x00	; 0
    199e:	e5 e5       	ldi	r30, 0x55	; 85
    19a0:	f0 e0       	ldi	r31, 0x00	; 0
    19a2:	80 81       	ld	r24, Z
    19a4:	8b 7f       	andi	r24, 0xFB	; 251
    19a6:	8c 93       	st	X, r24

	SET_BIT(GICR,GICR_INT1);
    19a8:	ab e5       	ldi	r26, 0x5B	; 91
    19aa:	b0 e0       	ldi	r27, 0x00	; 0
    19ac:	eb e5       	ldi	r30, 0x5B	; 91
    19ae:	f0 e0       	ldi	r31, 0x00	; 0
    19b0:	80 81       	ld	r24, Z
    19b2:	80 68       	ori	r24, 0x80	; 128
    19b4:	8c 93       	st	X, r24
}
    19b6:	cf 91       	pop	r28
    19b8:	df 91       	pop	r29
    19ba:	08 95       	ret

000019bc <EIE_vINT2Init>:

void EIE_vINT2Init(void)
{
    19bc:	df 93       	push	r29
    19be:	cf 93       	push	r28
    19c0:	cd b7       	in	r28, 0x3d	; 61
    19c2:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(MCUCSR,MCUCSR_ISC2);
    19c4:	a4 e5       	ldi	r26, 0x54	; 84
    19c6:	b0 e0       	ldi	r27, 0x00	; 0
    19c8:	e4 e5       	ldi	r30, 0x54	; 84
    19ca:	f0 e0       	ldi	r31, 0x00	; 0
    19cc:	80 81       	ld	r24, Z
    19ce:	80 64       	ori	r24, 0x40	; 64
    19d0:	8c 93       	st	X, r24

	SET_BIT(GICR,GICR_INT1);
    19d2:	ab e5       	ldi	r26, 0x5B	; 91
    19d4:	b0 e0       	ldi	r27, 0x00	; 0
    19d6:	eb e5       	ldi	r30, 0x5B	; 91
    19d8:	f0 e0       	ldi	r31, 0x00	; 0
    19da:	80 81       	ld	r24, Z
    19dc:	80 68       	ori	r24, 0x80	; 128
    19de:	8c 93       	st	X, r24
}
    19e0:	cf 91       	pop	r28
    19e2:	df 91       	pop	r29
    19e4:	08 95       	ret

000019e6 <__vector_1>:


void __vector_1 (void) __attribute__ ((signal));
void __vector_1 (void)
{
    19e6:	1f 92       	push	r1
    19e8:	0f 92       	push	r0
    19ea:	0f b6       	in	r0, 0x3f	; 63
    19ec:	0f 92       	push	r0
    19ee:	11 24       	eor	r1, r1
    19f0:	2f 93       	push	r18
    19f2:	3f 93       	push	r19
    19f4:	4f 93       	push	r20
    19f6:	5f 93       	push	r21
    19f8:	6f 93       	push	r22
    19fa:	7f 93       	push	r23
    19fc:	8f 93       	push	r24
    19fe:	9f 93       	push	r25
    1a00:	af 93       	push	r26
    1a02:	bf 93       	push	r27
    1a04:	ef 93       	push	r30
    1a06:	ff 93       	push	r31
    1a08:	df 93       	push	r29
    1a0a:	cf 93       	push	r28
    1a0c:	cd b7       	in	r28, 0x3d	; 61
    1a0e:	de b7       	in	r29, 0x3e	; 62
	INT0_CallBackFun();
    1a10:	e0 91 f4 02 	lds	r30, 0x02F4
    1a14:	f0 91 f5 02 	lds	r31, 0x02F5
    1a18:	09 95       	icall
}
    1a1a:	cf 91       	pop	r28
    1a1c:	df 91       	pop	r29
    1a1e:	ff 91       	pop	r31
    1a20:	ef 91       	pop	r30
    1a22:	bf 91       	pop	r27
    1a24:	af 91       	pop	r26
    1a26:	9f 91       	pop	r25
    1a28:	8f 91       	pop	r24
    1a2a:	7f 91       	pop	r23
    1a2c:	6f 91       	pop	r22
    1a2e:	5f 91       	pop	r21
    1a30:	4f 91       	pop	r20
    1a32:	3f 91       	pop	r19
    1a34:	2f 91       	pop	r18
    1a36:	0f 90       	pop	r0
    1a38:	0f be       	out	0x3f, r0	; 63
    1a3a:	0f 90       	pop	r0
    1a3c:	1f 90       	pop	r1
    1a3e:	18 95       	reti

00001a40 <I2C_vMasterInit>:
 */

#include "I2C.h"

void I2C_vMasterInit(u8 Copy_u8SlaveAddress)
{
    1a40:	df 93       	push	r29
    1a42:	cf 93       	push	r28
    1a44:	0f 92       	push	r0
    1a46:	cd b7       	in	r28, 0x3d	; 61
    1a48:	de b7       	in	r29, 0x3e	; 62
    1a4a:	89 83       	std	Y+1, r24	; 0x01
	/*Set clk to 400kbps*/
	TWDR=2;
    1a4c:	e3 e2       	ldi	r30, 0x23	; 35
    1a4e:	f0 e0       	ldi	r31, 0x00	; 0
    1a50:	82 e0       	ldi	r24, 0x02	; 2
    1a52:	80 83       	st	Z, r24
	CLR_BIT(TWSR,TWSR_TWPS0);
    1a54:	a1 e2       	ldi	r26, 0x21	; 33
    1a56:	b0 e0       	ldi	r27, 0x00	; 0
    1a58:	e1 e2       	ldi	r30, 0x21	; 33
    1a5a:	f0 e0       	ldi	r31, 0x00	; 0
    1a5c:	80 81       	ld	r24, Z
    1a5e:	8d 7f       	andi	r24, 0xFD	; 253
    1a60:	8c 93       	st	X, r24
	CLR_BIT(TWSR,TWSR_TWPS1);
    1a62:	a1 e2       	ldi	r26, 0x21	; 33
    1a64:	b0 e0       	ldi	r27, 0x00	; 0
    1a66:	e1 e2       	ldi	r30, 0x21	; 33
    1a68:	f0 e0       	ldi	r31, 0x00	; 0
    1a6a:	80 81       	ld	r24, Z
    1a6c:	8e 7f       	andi	r24, 0xFE	; 254
    1a6e:	8c 93       	st	X, r24

	if(Copy_u8SlaveAddress != 0)
    1a70:	89 81       	ldd	r24, Y+1	; 0x01
    1a72:	88 23       	and	r24, r24
    1a74:	29 f0       	breq	.+10     	; 0x1a80 <I2C_vMasterInit+0x40>
	{
		TWAR = Copy_u8SlaveAddress<<1;
    1a76:	e2 e2       	ldi	r30, 0x22	; 34
    1a78:	f0 e0       	ldi	r31, 0x00	; 0
    1a7a:	89 81       	ldd	r24, Y+1	; 0x01
    1a7c:	88 0f       	add	r24, r24
    1a7e:	80 83       	st	Z, r24
	}

	/*Enable I2C*/
	SET_BIT(TWCR,TWCR_TWEN);
    1a80:	a6 e5       	ldi	r26, 0x56	; 86
    1a82:	b0 e0       	ldi	r27, 0x00	; 0
    1a84:	e6 e5       	ldi	r30, 0x56	; 86
    1a86:	f0 e0       	ldi	r31, 0x00	; 0
    1a88:	80 81       	ld	r24, Z
    1a8a:	84 60       	ori	r24, 0x04	; 4
    1a8c:	8c 93       	st	X, r24
}
    1a8e:	0f 90       	pop	r0
    1a90:	cf 91       	pop	r28
    1a92:	df 91       	pop	r29
    1a94:	08 95       	ret

00001a96 <I2C_vSlaveInit>:

void I2C_vSlaveInit(u8 Copy_u8SlaveAddress)
{
    1a96:	df 93       	push	r29
    1a98:	cf 93       	push	r28
    1a9a:	0f 92       	push	r0
    1a9c:	cd b7       	in	r28, 0x3d	; 61
    1a9e:	de b7       	in	r29, 0x3e	; 62
    1aa0:	89 83       	std	Y+1, r24	; 0x01
	/*Initialize adress*/
	TWAR = Copy_u8SlaveAddress<<1;
    1aa2:	e2 e2       	ldi	r30, 0x22	; 34
    1aa4:	f0 e0       	ldi	r31, 0x00	; 0
    1aa6:	89 81       	ldd	r24, Y+1	; 0x01
    1aa8:	88 0f       	add	r24, r24
    1aaa:	80 83       	st	Z, r24

	/*Enable I2C*/
	SET_BIT(TWCR,TWCR_TWEN);
    1aac:	a6 e5       	ldi	r26, 0x56	; 86
    1aae:	b0 e0       	ldi	r27, 0x00	; 0
    1ab0:	e6 e5       	ldi	r30, 0x56	; 86
    1ab2:	f0 e0       	ldi	r31, 0x00	; 0
    1ab4:	80 81       	ld	r24, Z
    1ab6:	84 60       	ori	r24, 0x04	; 4
    1ab8:	8c 93       	st	X, r24
}
    1aba:	0f 90       	pop	r0
    1abc:	cf 91       	pop	r28
    1abe:	df 91       	pop	r29
    1ac0:	08 95       	ret

00001ac2 <I2C_SendStartCondition>:

I2C_Err_Status I2C_SendStartCondition(void)
{
    1ac2:	df 93       	push	r29
    1ac4:	cf 93       	push	r28
    1ac6:	0f 92       	push	r0
    1ac8:	cd b7       	in	r28, 0x3d	; 61
    1aca:	de b7       	in	r29, 0x3e	; 62
	I2C_Err_Status Local_Error_status= NoError;
    1acc:	19 82       	std	Y+1, r1	; 0x01

	/*Send start condition*/
	SET_BIT(TWCR,TWCR_TWSTA);
    1ace:	a6 e5       	ldi	r26, 0x56	; 86
    1ad0:	b0 e0       	ldi	r27, 0x00	; 0
    1ad2:	e6 e5       	ldi	r30, 0x56	; 86
    1ad4:	f0 e0       	ldi	r31, 0x00	; 0
    1ad6:	80 81       	ld	r24, Z
    1ad8:	80 62       	ori	r24, 0x20	; 32
    1ada:	8c 93       	st	X, r24

	/*clear the interrupt flag to start the previous operation*/
	SET_BIT(TWCR,TWCR_TWINT);
    1adc:	a6 e5       	ldi	r26, 0x56	; 86
    1ade:	b0 e0       	ldi	r27, 0x00	; 0
    1ae0:	e6 e5       	ldi	r30, 0x56	; 86
    1ae2:	f0 e0       	ldi	r31, 0x00	; 0
    1ae4:	80 81       	ld	r24, Z
    1ae6:	80 68       	ori	r24, 0x80	; 128
    1ae8:	8c 93       	st	X, r24

	/*Wait until the interrupt flag is raised again*/
	while(GET_BIT(TWCR,TWCR_TWINT)==0);
    1aea:	e6 e5       	ldi	r30, 0x56	; 86
    1aec:	f0 e0       	ldi	r31, 0x00	; 0
    1aee:	80 81       	ld	r24, Z
    1af0:	88 23       	and	r24, r24
    1af2:	dc f7       	brge	.-10     	; 0x1aea <I2C_SendStartCondition+0x28>

	/*Check on operation*/
	if((TWSR & 0xF8)!= START_ACK)
    1af4:	e1 e2       	ldi	r30, 0x21	; 33
    1af6:	f0 e0       	ldi	r31, 0x00	; 0
    1af8:	80 81       	ld	r24, Z
    1afa:	88 2f       	mov	r24, r24
    1afc:	90 e0       	ldi	r25, 0x00	; 0
    1afe:	88 7f       	andi	r24, 0xF8	; 248
    1b00:	90 70       	andi	r25, 0x00	; 0
    1b02:	88 30       	cpi	r24, 0x08	; 8
    1b04:	91 05       	cpc	r25, r1
    1b06:	11 f0       	breq	.+4      	; 0x1b0c <I2C_SendStartCondition+0x4a>
	{
		Local_Error_status = Start_Condition_Error;
    1b08:	81 e0       	ldi	r24, 0x01	; 1
    1b0a:	89 83       	std	Y+1, r24	; 0x01
	}
	else
	{
		/*do nothing*/
	}
	return Local_Error_status;
    1b0c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b0e:	0f 90       	pop	r0
    1b10:	cf 91       	pop	r28
    1b12:	df 91       	pop	r29
    1b14:	08 95       	ret

00001b16 <I2C_SendRepeatedStart>:

I2C_Err_Status I2C_SendRepeatedStart(void)
{
    1b16:	df 93       	push	r29
    1b18:	cf 93       	push	r28
    1b1a:	0f 92       	push	r0
    1b1c:	cd b7       	in	r28, 0x3d	; 61
    1b1e:	de b7       	in	r29, 0x3e	; 62
	I2C_Err_Status Local_Error_status= NoError;
    1b20:	19 82       	std	Y+1, r1	; 0x01

	/*Send start condition*/
	SET_BIT(TWCR,TWCR_TWSTA);
    1b22:	a6 e5       	ldi	r26, 0x56	; 86
    1b24:	b0 e0       	ldi	r27, 0x00	; 0
    1b26:	e6 e5       	ldi	r30, 0x56	; 86
    1b28:	f0 e0       	ldi	r31, 0x00	; 0
    1b2a:	80 81       	ld	r24, Z
    1b2c:	80 62       	ori	r24, 0x20	; 32
    1b2e:	8c 93       	st	X, r24

	/*clear the interrupt flag to start the previous operation*/
	SET_BIT(TWCR,TWCR_TWINT);
    1b30:	a6 e5       	ldi	r26, 0x56	; 86
    1b32:	b0 e0       	ldi	r27, 0x00	; 0
    1b34:	e6 e5       	ldi	r30, 0x56	; 86
    1b36:	f0 e0       	ldi	r31, 0x00	; 0
    1b38:	80 81       	ld	r24, Z
    1b3a:	80 68       	ori	r24, 0x80	; 128
    1b3c:	8c 93       	st	X, r24

	/*Wait until the interrupt flag is raised again*/
	while(GET_BIT(TWCR,TWCR_TWINT)==0);
    1b3e:	e6 e5       	ldi	r30, 0x56	; 86
    1b40:	f0 e0       	ldi	r31, 0x00	; 0
    1b42:	80 81       	ld	r24, Z
    1b44:	88 23       	and	r24, r24
    1b46:	dc f7       	brge	.-10     	; 0x1b3e <I2C_SendRepeatedStart+0x28>

	/*Check on operation*/
	if((TWSR & 0xF8)!= REP_START_ACK)
    1b48:	e1 e2       	ldi	r30, 0x21	; 33
    1b4a:	f0 e0       	ldi	r31, 0x00	; 0
    1b4c:	80 81       	ld	r24, Z
    1b4e:	88 2f       	mov	r24, r24
    1b50:	90 e0       	ldi	r25, 0x00	; 0
    1b52:	88 7f       	andi	r24, 0xF8	; 248
    1b54:	90 70       	andi	r25, 0x00	; 0
    1b56:	80 31       	cpi	r24, 0x10	; 16
    1b58:	91 05       	cpc	r25, r1
    1b5a:	11 f0       	breq	.+4      	; 0x1b60 <I2C_SendRepeatedStart+0x4a>
	{
		Local_Error_status = Repeated_Start_Error;
    1b5c:	82 e0       	ldi	r24, 0x02	; 2
    1b5e:	89 83       	std	Y+1, r24	; 0x01
	}
	else
	{
		/*do nothing*/
	}
	return Local_Error_status;
    1b60:	89 81       	ldd	r24, Y+1	; 0x01

}
    1b62:	0f 90       	pop	r0
    1b64:	cf 91       	pop	r28
    1b66:	df 91       	pop	r29
    1b68:	08 95       	ret

00001b6a <I2C_SendSlaveAddressWithWrite>:

I2C_Err_Status I2C_SendSlaveAddressWithWrite(u8 Copy_u8SlaveAddress)
{
    1b6a:	df 93       	push	r29
    1b6c:	cf 93       	push	r28
    1b6e:	00 d0       	rcall	.+0      	; 0x1b70 <I2C_SendSlaveAddressWithWrite+0x6>
    1b70:	cd b7       	in	r28, 0x3d	; 61
    1b72:	de b7       	in	r29, 0x3e	; 62
    1b74:	8a 83       	std	Y+2, r24	; 0x02
	I2C_Err_Status Local_Error_status= NoError;
    1b76:	19 82       	std	Y+1, r1	; 0x01

	/*Clear start condition bit*/
	CLR_BIT(TWCR,TWCR_TWSTA);
    1b78:	a6 e5       	ldi	r26, 0x56	; 86
    1b7a:	b0 e0       	ldi	r27, 0x00	; 0
    1b7c:	e6 e5       	ldi	r30, 0x56	; 86
    1b7e:	f0 e0       	ldi	r31, 0x00	; 0
    1b80:	80 81       	ld	r24, Z
    1b82:	8f 7d       	andi	r24, 0xDF	; 223
    1b84:	8c 93       	st	X, r24

	/*Set the slave address in the 7 MSB IN TWDR*/
	TWDR = Copy_u8SlaveAddress<<1;
    1b86:	e3 e2       	ldi	r30, 0x23	; 35
    1b88:	f0 e0       	ldi	r31, 0x00	; 0
    1b8a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b8c:	88 0f       	add	r24, r24
    1b8e:	80 83       	st	Z, r24
	CLR_BIT(TWDR,0); //for write
    1b90:	a3 e2       	ldi	r26, 0x23	; 35
    1b92:	b0 e0       	ldi	r27, 0x00	; 0
    1b94:	e3 e2       	ldi	r30, 0x23	; 35
    1b96:	f0 e0       	ldi	r31, 0x00	; 0
    1b98:	80 81       	ld	r24, Z
    1b9a:	8e 7f       	andi	r24, 0xFE	; 254
    1b9c:	8c 93       	st	X, r24

	/*clear the interrupt flag to start the previous operation*/
	SET_BIT(TWCR,TWCR_TWINT);
    1b9e:	a6 e5       	ldi	r26, 0x56	; 86
    1ba0:	b0 e0       	ldi	r27, 0x00	; 0
    1ba2:	e6 e5       	ldi	r30, 0x56	; 86
    1ba4:	f0 e0       	ldi	r31, 0x00	; 0
    1ba6:	80 81       	ld	r24, Z
    1ba8:	80 68       	ori	r24, 0x80	; 128
    1baa:	8c 93       	st	X, r24

	/*Wait until the interrupt flag is raised again*/
	while(GET_BIT(TWCR,TWCR_TWINT)==0);
    1bac:	e6 e5       	ldi	r30, 0x56	; 86
    1bae:	f0 e0       	ldi	r31, 0x00	; 0
    1bb0:	80 81       	ld	r24, Z
    1bb2:	88 23       	and	r24, r24
    1bb4:	dc f7       	brge	.-10     	; 0x1bac <I2C_SendSlaveAddressWithWrite+0x42>

	/*Check on operation*/
	if((TWSR & 0xF8)!= SLAVE_ADD_AND_W_ACK)
    1bb6:	e1 e2       	ldi	r30, 0x21	; 33
    1bb8:	f0 e0       	ldi	r31, 0x00	; 0
    1bba:	80 81       	ld	r24, Z
    1bbc:	88 2f       	mov	r24, r24
    1bbe:	90 e0       	ldi	r25, 0x00	; 0
    1bc0:	88 7f       	andi	r24, 0xF8	; 248
    1bc2:	90 70       	andi	r25, 0x00	; 0
    1bc4:	88 31       	cpi	r24, 0x18	; 24
    1bc6:	91 05       	cpc	r25, r1
    1bc8:	11 f0       	breq	.+4      	; 0x1bce <I2C_SendSlaveAddressWithWrite+0x64>
	{
		Local_Error_status = Slave_Address_With_Write_Error;
    1bca:	83 e0       	ldi	r24, 0x03	; 3
    1bcc:	89 83       	std	Y+1, r24	; 0x01
	else
	{
		/*do nothing*/
	}

	return Local_Error_status;
    1bce:	89 81       	ldd	r24, Y+1	; 0x01
}
    1bd0:	0f 90       	pop	r0
    1bd2:	0f 90       	pop	r0
    1bd4:	cf 91       	pop	r28
    1bd6:	df 91       	pop	r29
    1bd8:	08 95       	ret

00001bda <I2C_SendSlaveAddressWithRead>:

I2C_Err_Status I2C_SendSlaveAddressWithRead(u8 Copy_u8SlaveAddress)
{
    1bda:	df 93       	push	r29
    1bdc:	cf 93       	push	r28
    1bde:	00 d0       	rcall	.+0      	; 0x1be0 <I2C_SendSlaveAddressWithRead+0x6>
    1be0:	cd b7       	in	r28, 0x3d	; 61
    1be2:	de b7       	in	r29, 0x3e	; 62
    1be4:	8a 83       	std	Y+2, r24	; 0x02
	I2C_Err_Status Local_Error_status= NoError;
    1be6:	19 82       	std	Y+1, r1	; 0x01

	/*Clear start condition bit*/
	CLR_BIT(TWCR,TWCR_TWSTA);
    1be8:	a6 e5       	ldi	r26, 0x56	; 86
    1bea:	b0 e0       	ldi	r27, 0x00	; 0
    1bec:	e6 e5       	ldi	r30, 0x56	; 86
    1bee:	f0 e0       	ldi	r31, 0x00	; 0
    1bf0:	80 81       	ld	r24, Z
    1bf2:	8f 7d       	andi	r24, 0xDF	; 223
    1bf4:	8c 93       	st	X, r24

	/*Set the slave address in the 7 MSB IN TWDR*/
	TWDR = Copy_u8SlaveAddress<<1;
    1bf6:	e3 e2       	ldi	r30, 0x23	; 35
    1bf8:	f0 e0       	ldi	r31, 0x00	; 0
    1bfa:	8a 81       	ldd	r24, Y+2	; 0x02
    1bfc:	88 0f       	add	r24, r24
    1bfe:	80 83       	st	Z, r24
	SET_BIT(TWDR,0); //for read
    1c00:	a3 e2       	ldi	r26, 0x23	; 35
    1c02:	b0 e0       	ldi	r27, 0x00	; 0
    1c04:	e3 e2       	ldi	r30, 0x23	; 35
    1c06:	f0 e0       	ldi	r31, 0x00	; 0
    1c08:	80 81       	ld	r24, Z
    1c0a:	81 60       	ori	r24, 0x01	; 1
    1c0c:	8c 93       	st	X, r24

	/*clear the interrupt flag to start the previous operation*/
	SET_BIT(TWCR,TWCR_TWINT);
    1c0e:	a6 e5       	ldi	r26, 0x56	; 86
    1c10:	b0 e0       	ldi	r27, 0x00	; 0
    1c12:	e6 e5       	ldi	r30, 0x56	; 86
    1c14:	f0 e0       	ldi	r31, 0x00	; 0
    1c16:	80 81       	ld	r24, Z
    1c18:	80 68       	ori	r24, 0x80	; 128
    1c1a:	8c 93       	st	X, r24

	/*Wait until the interrupt flag is raised again*/
	while(GET_BIT(TWCR,TWCR_TWINT)==0);
    1c1c:	e6 e5       	ldi	r30, 0x56	; 86
    1c1e:	f0 e0       	ldi	r31, 0x00	; 0
    1c20:	80 81       	ld	r24, Z
    1c22:	88 23       	and	r24, r24
    1c24:	dc f7       	brge	.-10     	; 0x1c1c <I2C_SendSlaveAddressWithRead+0x42>

	/*Check on operation*/
	if((TWSR & 0xF8)!= SLAVE_ADD_AND_R_ACK)
    1c26:	e1 e2       	ldi	r30, 0x21	; 33
    1c28:	f0 e0       	ldi	r31, 0x00	; 0
    1c2a:	80 81       	ld	r24, Z
    1c2c:	88 2f       	mov	r24, r24
    1c2e:	90 e0       	ldi	r25, 0x00	; 0
    1c30:	88 7f       	andi	r24, 0xF8	; 248
    1c32:	90 70       	andi	r25, 0x00	; 0
    1c34:	80 34       	cpi	r24, 0x40	; 64
    1c36:	91 05       	cpc	r25, r1
    1c38:	11 f0       	breq	.+4      	; 0x1c3e <I2C_SendSlaveAddressWithRead+0x64>
	{
		Local_Error_status = Slave_Address_With_Read_Error;
    1c3a:	84 e0       	ldi	r24, 0x04	; 4
    1c3c:	89 83       	std	Y+1, r24	; 0x01
	else
	{
		/*do nothing*/
	}

	return Local_Error_status;
    1c3e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c40:	0f 90       	pop	r0
    1c42:	0f 90       	pop	r0
    1c44:	cf 91       	pop	r28
    1c46:	df 91       	pop	r29
    1c48:	08 95       	ret

00001c4a <I2C_MasterWriteDataByte>:

I2C_Err_Status I2C_MasterWriteDataByte(u8 Copy_u8SlaveAddress)
{
    1c4a:	df 93       	push	r29
    1c4c:	cf 93       	push	r28
    1c4e:	00 d0       	rcall	.+0      	; 0x1c50 <I2C_MasterWriteDataByte+0x6>
    1c50:	cd b7       	in	r28, 0x3d	; 61
    1c52:	de b7       	in	r29, 0x3e	; 62
    1c54:	8a 83       	std	Y+2, r24	; 0x02
	I2C_Err_Status Local_Error_status= NoError;
    1c56:	19 82       	std	Y+1, r1	; 0x01

	/*Write data byte*/
	TWDR = Copy_u8SlaveAddress;
    1c58:	e3 e2       	ldi	r30, 0x23	; 35
    1c5a:	f0 e0       	ldi	r31, 0x00	; 0
    1c5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c5e:	80 83       	st	Z, r24

	/*clear the interrupt flag to start the previous operation*/
	SET_BIT(TWCR,TWCR_TWINT);
    1c60:	a6 e5       	ldi	r26, 0x56	; 86
    1c62:	b0 e0       	ldi	r27, 0x00	; 0
    1c64:	e6 e5       	ldi	r30, 0x56	; 86
    1c66:	f0 e0       	ldi	r31, 0x00	; 0
    1c68:	80 81       	ld	r24, Z
    1c6a:	80 68       	ori	r24, 0x80	; 128
    1c6c:	8c 93       	st	X, r24

	/*Wait until the interrupt flag is raised again*/
	while(GET_BIT(TWCR,TWCR_TWINT)==0);
    1c6e:	e6 e5       	ldi	r30, 0x56	; 86
    1c70:	f0 e0       	ldi	r31, 0x00	; 0
    1c72:	80 81       	ld	r24, Z
    1c74:	88 23       	and	r24, r24
    1c76:	dc f7       	brge	.-10     	; 0x1c6e <I2C_MasterWriteDataByte+0x24>

	/*Check on operation*/
	if((TWSR & 0xF8)!= MASTER_W_BYTE_ACK)
    1c78:	e1 e2       	ldi	r30, 0x21	; 33
    1c7a:	f0 e0       	ldi	r31, 0x00	; 0
    1c7c:	80 81       	ld	r24, Z
    1c7e:	88 2f       	mov	r24, r24
    1c80:	90 e0       	ldi	r25, 0x00	; 0
    1c82:	88 7f       	andi	r24, 0xF8	; 248
    1c84:	90 70       	andi	r25, 0x00	; 0
    1c86:	88 32       	cpi	r24, 0x28	; 40
    1c88:	91 05       	cpc	r25, r1
    1c8a:	11 f0       	breq	.+4      	; 0x1c90 <I2C_MasterWriteDataByte+0x46>
	{
		Local_Error_status = Master_Write_Byte_Error;
    1c8c:	85 e0       	ldi	r24, 0x05	; 5
    1c8e:	89 83       	std	Y+1, r24	; 0x01
	{
		/*do nothing*/
	}


	return Local_Error_status;
    1c90:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c92:	0f 90       	pop	r0
    1c94:	0f 90       	pop	r0
    1c96:	cf 91       	pop	r28
    1c98:	df 91       	pop	r29
    1c9a:	08 95       	ret

00001c9c <I2C_MasterReadDataByte>:

I2C_Err_Status I2C_MasterReadDataByte(u8 *Copy_u8SlaveAddress)
{
    1c9c:	df 93       	push	r29
    1c9e:	cf 93       	push	r28
    1ca0:	00 d0       	rcall	.+0      	; 0x1ca2 <I2C_MasterReadDataByte+0x6>
    1ca2:	0f 92       	push	r0
    1ca4:	cd b7       	in	r28, 0x3d	; 61
    1ca6:	de b7       	in	r29, 0x3e	; 62
    1ca8:	9b 83       	std	Y+3, r25	; 0x03
    1caa:	8a 83       	std	Y+2, r24	; 0x02
	I2C_Err_Status Local_Error_status= NoError;
    1cac:	19 82       	std	Y+1, r1	; 0x01

	/*Enable master generating acknowledge bit after receiving the data*/
	SET_BIT(TWCR,TWCR_TWEA);
    1cae:	a6 e5       	ldi	r26, 0x56	; 86
    1cb0:	b0 e0       	ldi	r27, 0x00	; 0
    1cb2:	e6 e5       	ldi	r30, 0x56	; 86
    1cb4:	f0 e0       	ldi	r31, 0x00	; 0
    1cb6:	80 81       	ld	r24, Z
    1cb8:	80 64       	ori	r24, 0x40	; 64
    1cba:	8c 93       	st	X, r24

	/*clear the interrupt flag to start the previous operation*/
	SET_BIT(TWCR,TWCR_TWINT);
    1cbc:	a6 e5       	ldi	r26, 0x56	; 86
    1cbe:	b0 e0       	ldi	r27, 0x00	; 0
    1cc0:	e6 e5       	ldi	r30, 0x56	; 86
    1cc2:	f0 e0       	ldi	r31, 0x00	; 0
    1cc4:	80 81       	ld	r24, Z
    1cc6:	80 68       	ori	r24, 0x80	; 128
    1cc8:	8c 93       	st	X, r24

	/*Wait until the interrupt flag is raised again*/
	while(GET_BIT(TWCR,TWCR_TWINT)==0);
    1cca:	e6 e5       	ldi	r30, 0x56	; 86
    1ccc:	f0 e0       	ldi	r31, 0x00	; 0
    1cce:	80 81       	ld	r24, Z
    1cd0:	88 23       	and	r24, r24
    1cd2:	dc f7       	brge	.-10     	; 0x1cca <I2C_MasterReadDataByte+0x2e>

	/*Check on operation*/
	if((TWSR & 0xF8)!= MASTER_R_BYTE_WITH_ACK)
    1cd4:	e1 e2       	ldi	r30, 0x21	; 33
    1cd6:	f0 e0       	ldi	r31, 0x00	; 0
    1cd8:	80 81       	ld	r24, Z
    1cda:	88 2f       	mov	r24, r24
    1cdc:	90 e0       	ldi	r25, 0x00	; 0
    1cde:	88 7f       	andi	r24, 0xF8	; 248
    1ce0:	90 70       	andi	r25, 0x00	; 0
    1ce2:	80 35       	cpi	r24, 0x50	; 80
    1ce4:	91 05       	cpc	r25, r1
    1ce6:	19 f0       	breq	.+6      	; 0x1cee <I2C_MasterReadDataByte+0x52>
	{
		Local_Error_status = Master_Read_Byte_Error;
    1ce8:	86 e0       	ldi	r24, 0x06	; 6
    1cea:	89 83       	std	Y+1, r24	; 0x01
    1cec:	06 c0       	rjmp	.+12     	; 0x1cfa <I2C_MasterReadDataByte+0x5e>
	}
	else
	{
		*Copy_u8SlaveAddress = TWDR;
    1cee:	e3 e2       	ldi	r30, 0x23	; 35
    1cf0:	f0 e0       	ldi	r31, 0x00	; 0
    1cf2:	80 81       	ld	r24, Z
    1cf4:	ea 81       	ldd	r30, Y+2	; 0x02
    1cf6:	fb 81       	ldd	r31, Y+3	; 0x03
    1cf8:	80 83       	st	Z, r24
	}
	return Local_Error_status;
    1cfa:	89 81       	ldd	r24, Y+1	; 0x01
}
    1cfc:	0f 90       	pop	r0
    1cfe:	0f 90       	pop	r0
    1d00:	0f 90       	pop	r0
    1d02:	cf 91       	pop	r28
    1d04:	df 91       	pop	r29
    1d06:	08 95       	ret

00001d08 <I2C_SendStopCondition>:

void I2C_SendStopCondition(void)
{
    1d08:	df 93       	push	r29
    1d0a:	cf 93       	push	r28
    1d0c:	cd b7       	in	r28, 0x3d	; 61
    1d0e:	de b7       	in	r29, 0x3e	; 62
	/*Generate the stop condition*/
	SET_BIT(TWCR,TWCR_TWSTO);
    1d10:	a6 e5       	ldi	r26, 0x56	; 86
    1d12:	b0 e0       	ldi	r27, 0x00	; 0
    1d14:	e6 e5       	ldi	r30, 0x56	; 86
    1d16:	f0 e0       	ldi	r31, 0x00	; 0
    1d18:	80 81       	ld	r24, Z
    1d1a:	80 61       	ori	r24, 0x10	; 16
    1d1c:	8c 93       	st	X, r24

	/*clear the interrupt flag to start the previous operation*/
	SET_BIT(TWCR,TWCR_TWINT);
    1d1e:	a6 e5       	ldi	r26, 0x56	; 86
    1d20:	b0 e0       	ldi	r27, 0x00	; 0
    1d22:	e6 e5       	ldi	r30, 0x56	; 86
    1d24:	f0 e0       	ldi	r31, 0x00	; 0
    1d26:	80 81       	ld	r24, Z
    1d28:	80 68       	ori	r24, 0x80	; 128
    1d2a:	8c 93       	st	X, r24
}
    1d2c:	cf 91       	pop	r28
    1d2e:	df 91       	pop	r29
    1d30:	08 95       	ret

00001d32 <EEPROM_vWrite>:
 *  Created on: May 1, 2024
 *      Author: olege
 */
#include "EEPROM.h"

void EEPROM_vWrite(u32 Address, u8 data) {
    1d32:	df 93       	push	r29
    1d34:	cf 93       	push	r28
    1d36:	00 d0       	rcall	.+0      	; 0x1d38 <EEPROM_vWrite+0x6>
    1d38:	0f 92       	push	r0
    1d3a:	cd b7       	in	r28, 0x3d	; 61
    1d3c:	de b7       	in	r29, 0x3e	; 62
    1d3e:	9a 83       	std	Y+2, r25	; 0x02
    1d40:	89 83       	std	Y+1, r24	; 0x01
    1d42:	6b 83       	std	Y+3, r22	; 0x03
    while(EECR & (1<<EEWE)); // Wait for previous write to complete
    1d44:	ec e3       	ldi	r30, 0x3C	; 60
    1d46:	f0 e0       	ldi	r31, 0x00	; 0
    1d48:	80 81       	ld	r24, Z
    1d4a:	88 2f       	mov	r24, r24
    1d4c:	90 e0       	ldi	r25, 0x00	; 0
    1d4e:	82 70       	andi	r24, 0x02	; 2
    1d50:	90 70       	andi	r25, 0x00	; 0
    1d52:	00 97       	sbiw	r24, 0x00	; 0
    1d54:	b9 f7       	brne	.-18     	; 0x1d44 <EEPROM_vWrite+0x12>
    EEAR = Address; // Set EEPROM address
    1d56:	ee e3       	ldi	r30, 0x3E	; 62
    1d58:	f0 e0       	ldi	r31, 0x00	; 0
    1d5a:	89 81       	ldd	r24, Y+1	; 0x01
    1d5c:	80 83       	st	Z, r24
    EEDR = data; // Set data to write
    1d5e:	ed e3       	ldi	r30, 0x3D	; 61
    1d60:	f0 e0       	ldi	r31, 0x00	; 0
    1d62:	8b 81       	ldd	r24, Y+3	; 0x03
    1d64:	80 83       	st	Z, r24
    EECR = ( (EECR|(1<<EEMWE)) | (1<<EEWE)) ; // Set EEMWE to enable EEPROM writes
    1d66:	ac e3       	ldi	r26, 0x3C	; 60
    1d68:	b0 e0       	ldi	r27, 0x00	; 0
    1d6a:	ec e3       	ldi	r30, 0x3C	; 60
    1d6c:	f0 e0       	ldi	r31, 0x00	; 0
    1d6e:	80 81       	ld	r24, Z
    1d70:	86 60       	ori	r24, 0x06	; 6
    1d72:	8c 93       	st	X, r24
}
    1d74:	0f 90       	pop	r0
    1d76:	0f 90       	pop	r0
    1d78:	0f 90       	pop	r0
    1d7a:	cf 91       	pop	r28
    1d7c:	df 91       	pop	r29
    1d7e:	08 95       	ret

00001d80 <EEPROM_u8Read>:

u8	EEPROM_u8Read(u32 Adress)
{
    1d80:	df 93       	push	r29
    1d82:	cf 93       	push	r28
    1d84:	00 d0       	rcall	.+0      	; 0x1d86 <EEPROM_u8Read+0x6>
    1d86:	cd b7       	in	r28, 0x3d	; 61
    1d88:	de b7       	in	r29, 0x3e	; 62
    1d8a:	9a 83       	std	Y+2, r25	; 0x02
    1d8c:	89 83       	std	Y+1, r24	; 0x01
	while(EECR&(1<<EEWE));
    1d8e:	ec e3       	ldi	r30, 0x3C	; 60
    1d90:	f0 e0       	ldi	r31, 0x00	; 0
    1d92:	80 81       	ld	r24, Z
    1d94:	88 2f       	mov	r24, r24
    1d96:	90 e0       	ldi	r25, 0x00	; 0
    1d98:	82 70       	andi	r24, 0x02	; 2
    1d9a:	90 70       	andi	r25, 0x00	; 0
    1d9c:	00 97       	sbiw	r24, 0x00	; 0
    1d9e:	b9 f7       	brne	.-18     	; 0x1d8e <EEPROM_u8Read+0xe>
	EEAR = Adress;
    1da0:	ee e3       	ldi	r30, 0x3E	; 62
    1da2:	f0 e0       	ldi	r31, 0x00	; 0
    1da4:	89 81       	ldd	r24, Y+1	; 0x01
    1da6:	80 83       	st	Z, r24
	EECR |= (1<<EERE);
    1da8:	ac e3       	ldi	r26, 0x3C	; 60
    1daa:	b0 e0       	ldi	r27, 0x00	; 0
    1dac:	ec e3       	ldi	r30, 0x3C	; 60
    1dae:	f0 e0       	ldi	r31, 0x00	; 0
    1db0:	80 81       	ld	r24, Z
    1db2:	81 60       	ori	r24, 0x01	; 1
    1db4:	8c 93       	st	X, r24

	return EEDR;
    1db6:	ed e3       	ldi	r30, 0x3D	; 61
    1db8:	f0 e0       	ldi	r31, 0x00	; 0
    1dba:	80 81       	ld	r24, Z
}
    1dbc:	0f 90       	pop	r0
    1dbe:	0f 90       	pop	r0
    1dc0:	cf 91       	pop	r28
    1dc2:	df 91       	pop	r29
    1dc4:	08 95       	ret

00001dc6 <DIO_u8SetPinDirection>:
 *      Author: olege
 */
#include "dio.h"

ERROR_STATUS DIO_u8SetPinDirection(u8 Copy_u8port_num , u8 Copy_u8pin_num , u8 Copy_u8direction)
{
    1dc6:	df 93       	push	r29
    1dc8:	cf 93       	push	r28
    1dca:	cd b7       	in	r28, 0x3d	; 61
    1dcc:	de b7       	in	r29, 0x3e	; 62
    1dce:	28 97       	sbiw	r28, 0x08	; 8
    1dd0:	0f b6       	in	r0, 0x3f	; 63
    1dd2:	f8 94       	cli
    1dd4:	de bf       	out	0x3e, r29	; 62
    1dd6:	0f be       	out	0x3f, r0	; 63
    1dd8:	cd bf       	out	0x3d, r28	; 61
    1dda:	89 83       	std	Y+1, r24	; 0x01
    1ddc:	6a 83       	std	Y+2, r22	; 0x02
    1dde:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_u8pin_num > DIO_u8PIN7)
    1de0:	8a 81       	ldd	r24, Y+2	; 0x02
    1de2:	88 30       	cpi	r24, 0x08	; 8
    1de4:	18 f0       	brcs	.+6      	; 0x1dec <DIO_u8SetPinDirection+0x26>
	{
		return DIO_PIN;
    1de6:	22 e0       	ldi	r18, 0x02	; 2
    1de8:	28 87       	std	Y+8, r18	; 0x08
    1dea:	f8 c0       	rjmp	.+496    	; 0x1fdc <DIO_u8SetPinDirection+0x216>
	}

	else if(Copy_u8direction == DIO_u8PIN_INPUT)
    1dec:	8b 81       	ldd	r24, Y+3	; 0x03
    1dee:	88 23       	and	r24, r24
    1df0:	09 f0       	breq	.+2      	; 0x1df4 <DIO_u8SetPinDirection+0x2e>
    1df2:	77 c0       	rjmp	.+238    	; 0x1ee2 <DIO_u8SetPinDirection+0x11c>
		{
			switch(Copy_u8port_num)
    1df4:	89 81       	ldd	r24, Y+1	; 0x01
    1df6:	28 2f       	mov	r18, r24
    1df8:	30 e0       	ldi	r19, 0x00	; 0
    1dfa:	3f 83       	std	Y+7, r19	; 0x07
    1dfc:	2e 83       	std	Y+6, r18	; 0x06
    1dfe:	8e 81       	ldd	r24, Y+6	; 0x06
    1e00:	9f 81       	ldd	r25, Y+7	; 0x07
    1e02:	81 30       	cpi	r24, 0x01	; 1
    1e04:	91 05       	cpc	r25, r1
    1e06:	59 f1       	breq	.+86     	; 0x1e5e <DIO_u8SetPinDirection+0x98>
    1e08:	2e 81       	ldd	r18, Y+6	; 0x06
    1e0a:	3f 81       	ldd	r19, Y+7	; 0x07
    1e0c:	22 30       	cpi	r18, 0x02	; 2
    1e0e:	31 05       	cpc	r19, r1
    1e10:	2c f4       	brge	.+10     	; 0x1e1c <DIO_u8SetPinDirection+0x56>
    1e12:	8e 81       	ldd	r24, Y+6	; 0x06
    1e14:	9f 81       	ldd	r25, Y+7	; 0x07
    1e16:	00 97       	sbiw	r24, 0x00	; 0
    1e18:	69 f0       	breq	.+26     	; 0x1e34 <DIO_u8SetPinDirection+0x6e>
    1e1a:	60 c0       	rjmp	.+192    	; 0x1edc <DIO_u8SetPinDirection+0x116>
    1e1c:	2e 81       	ldd	r18, Y+6	; 0x06
    1e1e:	3f 81       	ldd	r19, Y+7	; 0x07
    1e20:	22 30       	cpi	r18, 0x02	; 2
    1e22:	31 05       	cpc	r19, r1
    1e24:	89 f1       	breq	.+98     	; 0x1e88 <DIO_u8SetPinDirection+0xc2>
    1e26:	8e 81       	ldd	r24, Y+6	; 0x06
    1e28:	9f 81       	ldd	r25, Y+7	; 0x07
    1e2a:	83 30       	cpi	r24, 0x03	; 3
    1e2c:	91 05       	cpc	r25, r1
    1e2e:	09 f4       	brne	.+2      	; 0x1e32 <DIO_u8SetPinDirection+0x6c>
    1e30:	40 c0       	rjmp	.+128    	; 0x1eb2 <DIO_u8SetPinDirection+0xec>
    1e32:	54 c0       	rjmp	.+168    	; 0x1edc <DIO_u8SetPinDirection+0x116>
			{
			case DIO_u8PORTA : CLR_BIT(DDRA, Copy_u8pin_num); break;
    1e34:	aa e3       	ldi	r26, 0x3A	; 58
    1e36:	b0 e0       	ldi	r27, 0x00	; 0
    1e38:	ea e3       	ldi	r30, 0x3A	; 58
    1e3a:	f0 e0       	ldi	r31, 0x00	; 0
    1e3c:	80 81       	ld	r24, Z
    1e3e:	48 2f       	mov	r20, r24
    1e40:	8a 81       	ldd	r24, Y+2	; 0x02
    1e42:	28 2f       	mov	r18, r24
    1e44:	30 e0       	ldi	r19, 0x00	; 0
    1e46:	81 e0       	ldi	r24, 0x01	; 1
    1e48:	90 e0       	ldi	r25, 0x00	; 0
    1e4a:	02 2e       	mov	r0, r18
    1e4c:	02 c0       	rjmp	.+4      	; 0x1e52 <DIO_u8SetPinDirection+0x8c>
    1e4e:	88 0f       	add	r24, r24
    1e50:	99 1f       	adc	r25, r25
    1e52:	0a 94       	dec	r0
    1e54:	e2 f7       	brpl	.-8      	; 0x1e4e <DIO_u8SetPinDirection+0x88>
    1e56:	80 95       	com	r24
    1e58:	84 23       	and	r24, r20
    1e5a:	8c 93       	st	X, r24
    1e5c:	be c0       	rjmp	.+380    	; 0x1fda <DIO_u8SetPinDirection+0x214>
			case DIO_u8PORTB : CLR_BIT(DDRB, Copy_u8pin_num); break;
    1e5e:	a7 e3       	ldi	r26, 0x37	; 55
    1e60:	b0 e0       	ldi	r27, 0x00	; 0
    1e62:	e7 e3       	ldi	r30, 0x37	; 55
    1e64:	f0 e0       	ldi	r31, 0x00	; 0
    1e66:	80 81       	ld	r24, Z
    1e68:	48 2f       	mov	r20, r24
    1e6a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e6c:	28 2f       	mov	r18, r24
    1e6e:	30 e0       	ldi	r19, 0x00	; 0
    1e70:	81 e0       	ldi	r24, 0x01	; 1
    1e72:	90 e0       	ldi	r25, 0x00	; 0
    1e74:	02 2e       	mov	r0, r18
    1e76:	02 c0       	rjmp	.+4      	; 0x1e7c <DIO_u8SetPinDirection+0xb6>
    1e78:	88 0f       	add	r24, r24
    1e7a:	99 1f       	adc	r25, r25
    1e7c:	0a 94       	dec	r0
    1e7e:	e2 f7       	brpl	.-8      	; 0x1e78 <DIO_u8SetPinDirection+0xb2>
    1e80:	80 95       	com	r24
    1e82:	84 23       	and	r24, r20
    1e84:	8c 93       	st	X, r24
    1e86:	a9 c0       	rjmp	.+338    	; 0x1fda <DIO_u8SetPinDirection+0x214>
			case DIO_u8PORTC : CLR_BIT(DDRC, Copy_u8pin_num); break;
    1e88:	a4 e3       	ldi	r26, 0x34	; 52
    1e8a:	b0 e0       	ldi	r27, 0x00	; 0
    1e8c:	e4 e3       	ldi	r30, 0x34	; 52
    1e8e:	f0 e0       	ldi	r31, 0x00	; 0
    1e90:	80 81       	ld	r24, Z
    1e92:	48 2f       	mov	r20, r24
    1e94:	8a 81       	ldd	r24, Y+2	; 0x02
    1e96:	28 2f       	mov	r18, r24
    1e98:	30 e0       	ldi	r19, 0x00	; 0
    1e9a:	81 e0       	ldi	r24, 0x01	; 1
    1e9c:	90 e0       	ldi	r25, 0x00	; 0
    1e9e:	02 2e       	mov	r0, r18
    1ea0:	02 c0       	rjmp	.+4      	; 0x1ea6 <DIO_u8SetPinDirection+0xe0>
    1ea2:	88 0f       	add	r24, r24
    1ea4:	99 1f       	adc	r25, r25
    1ea6:	0a 94       	dec	r0
    1ea8:	e2 f7       	brpl	.-8      	; 0x1ea2 <DIO_u8SetPinDirection+0xdc>
    1eaa:	80 95       	com	r24
    1eac:	84 23       	and	r24, r20
    1eae:	8c 93       	st	X, r24
    1eb0:	94 c0       	rjmp	.+296    	; 0x1fda <DIO_u8SetPinDirection+0x214>
			case DIO_u8PORTD : CLR_BIT(DDRD, Copy_u8pin_num); break;
    1eb2:	a1 e3       	ldi	r26, 0x31	; 49
    1eb4:	b0 e0       	ldi	r27, 0x00	; 0
    1eb6:	e1 e3       	ldi	r30, 0x31	; 49
    1eb8:	f0 e0       	ldi	r31, 0x00	; 0
    1eba:	80 81       	ld	r24, Z
    1ebc:	48 2f       	mov	r20, r24
    1ebe:	8a 81       	ldd	r24, Y+2	; 0x02
    1ec0:	28 2f       	mov	r18, r24
    1ec2:	30 e0       	ldi	r19, 0x00	; 0
    1ec4:	81 e0       	ldi	r24, 0x01	; 1
    1ec6:	90 e0       	ldi	r25, 0x00	; 0
    1ec8:	02 2e       	mov	r0, r18
    1eca:	02 c0       	rjmp	.+4      	; 0x1ed0 <DIO_u8SetPinDirection+0x10a>
    1ecc:	88 0f       	add	r24, r24
    1ece:	99 1f       	adc	r25, r25
    1ed0:	0a 94       	dec	r0
    1ed2:	e2 f7       	brpl	.-8      	; 0x1ecc <DIO_u8SetPinDirection+0x106>
    1ed4:	80 95       	com	r24
    1ed6:	84 23       	and	r24, r20
    1ed8:	8c 93       	st	X, r24
    1eda:	7f c0       	rjmp	.+254    	; 0x1fda <DIO_u8SetPinDirection+0x214>
			default : return DIO_PORT ; break;
    1edc:	91 e0       	ldi	r25, 0x01	; 1
    1ede:	98 87       	std	Y+8, r25	; 0x08
    1ee0:	7d c0       	rjmp	.+250    	; 0x1fdc <DIO_u8SetPinDirection+0x216>
			}
		}

	else if(Copy_u8direction == DIO_u8PIN_OUTPUT)
    1ee2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ee4:	81 30       	cpi	r24, 0x01	; 1
    1ee6:	09 f0       	breq	.+2      	; 0x1eea <DIO_u8SetPinDirection+0x124>
    1ee8:	72 c0       	rjmp	.+228    	; 0x1fce <DIO_u8SetPinDirection+0x208>
		{
		switch(Copy_u8port_num)
    1eea:	89 81       	ldd	r24, Y+1	; 0x01
    1eec:	28 2f       	mov	r18, r24
    1eee:	30 e0       	ldi	r19, 0x00	; 0
    1ef0:	3d 83       	std	Y+5, r19	; 0x05
    1ef2:	2c 83       	std	Y+4, r18	; 0x04
    1ef4:	8c 81       	ldd	r24, Y+4	; 0x04
    1ef6:	9d 81       	ldd	r25, Y+5	; 0x05
    1ef8:	81 30       	cpi	r24, 0x01	; 1
    1efa:	91 05       	cpc	r25, r1
    1efc:	49 f1       	breq	.+82     	; 0x1f50 <DIO_u8SetPinDirection+0x18a>
    1efe:	2c 81       	ldd	r18, Y+4	; 0x04
    1f00:	3d 81       	ldd	r19, Y+5	; 0x05
    1f02:	22 30       	cpi	r18, 0x02	; 2
    1f04:	31 05       	cpc	r19, r1
    1f06:	2c f4       	brge	.+10     	; 0x1f12 <DIO_u8SetPinDirection+0x14c>
    1f08:	8c 81       	ldd	r24, Y+4	; 0x04
    1f0a:	9d 81       	ldd	r25, Y+5	; 0x05
    1f0c:	00 97       	sbiw	r24, 0x00	; 0
    1f0e:	61 f0       	breq	.+24     	; 0x1f28 <DIO_u8SetPinDirection+0x162>
    1f10:	5b c0       	rjmp	.+182    	; 0x1fc8 <DIO_u8SetPinDirection+0x202>
    1f12:	2c 81       	ldd	r18, Y+4	; 0x04
    1f14:	3d 81       	ldd	r19, Y+5	; 0x05
    1f16:	22 30       	cpi	r18, 0x02	; 2
    1f18:	31 05       	cpc	r19, r1
    1f1a:	71 f1       	breq	.+92     	; 0x1f78 <DIO_u8SetPinDirection+0x1b2>
    1f1c:	8c 81       	ldd	r24, Y+4	; 0x04
    1f1e:	9d 81       	ldd	r25, Y+5	; 0x05
    1f20:	83 30       	cpi	r24, 0x03	; 3
    1f22:	91 05       	cpc	r25, r1
    1f24:	e9 f1       	breq	.+122    	; 0x1fa0 <DIO_u8SetPinDirection+0x1da>
    1f26:	50 c0       	rjmp	.+160    	; 0x1fc8 <DIO_u8SetPinDirection+0x202>
		{
			case DIO_u8PORTA : SET_BIT(DDRA, Copy_u8pin_num); break;
    1f28:	aa e3       	ldi	r26, 0x3A	; 58
    1f2a:	b0 e0       	ldi	r27, 0x00	; 0
    1f2c:	ea e3       	ldi	r30, 0x3A	; 58
    1f2e:	f0 e0       	ldi	r31, 0x00	; 0
    1f30:	80 81       	ld	r24, Z
    1f32:	48 2f       	mov	r20, r24
    1f34:	8a 81       	ldd	r24, Y+2	; 0x02
    1f36:	28 2f       	mov	r18, r24
    1f38:	30 e0       	ldi	r19, 0x00	; 0
    1f3a:	81 e0       	ldi	r24, 0x01	; 1
    1f3c:	90 e0       	ldi	r25, 0x00	; 0
    1f3e:	02 2e       	mov	r0, r18
    1f40:	02 c0       	rjmp	.+4      	; 0x1f46 <DIO_u8SetPinDirection+0x180>
    1f42:	88 0f       	add	r24, r24
    1f44:	99 1f       	adc	r25, r25
    1f46:	0a 94       	dec	r0
    1f48:	e2 f7       	brpl	.-8      	; 0x1f42 <DIO_u8SetPinDirection+0x17c>
    1f4a:	84 2b       	or	r24, r20
    1f4c:	8c 93       	st	X, r24
    1f4e:	45 c0       	rjmp	.+138    	; 0x1fda <DIO_u8SetPinDirection+0x214>
			case DIO_u8PORTB : SET_BIT(DDRB, Copy_u8pin_num); break;
    1f50:	a7 e3       	ldi	r26, 0x37	; 55
    1f52:	b0 e0       	ldi	r27, 0x00	; 0
    1f54:	e7 e3       	ldi	r30, 0x37	; 55
    1f56:	f0 e0       	ldi	r31, 0x00	; 0
    1f58:	80 81       	ld	r24, Z
    1f5a:	48 2f       	mov	r20, r24
    1f5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f5e:	28 2f       	mov	r18, r24
    1f60:	30 e0       	ldi	r19, 0x00	; 0
    1f62:	81 e0       	ldi	r24, 0x01	; 1
    1f64:	90 e0       	ldi	r25, 0x00	; 0
    1f66:	02 2e       	mov	r0, r18
    1f68:	02 c0       	rjmp	.+4      	; 0x1f6e <DIO_u8SetPinDirection+0x1a8>
    1f6a:	88 0f       	add	r24, r24
    1f6c:	99 1f       	adc	r25, r25
    1f6e:	0a 94       	dec	r0
    1f70:	e2 f7       	brpl	.-8      	; 0x1f6a <DIO_u8SetPinDirection+0x1a4>
    1f72:	84 2b       	or	r24, r20
    1f74:	8c 93       	st	X, r24
    1f76:	31 c0       	rjmp	.+98     	; 0x1fda <DIO_u8SetPinDirection+0x214>
			case DIO_u8PORTC : SET_BIT(DDRC, Copy_u8pin_num); break;
    1f78:	a4 e3       	ldi	r26, 0x34	; 52
    1f7a:	b0 e0       	ldi	r27, 0x00	; 0
    1f7c:	e4 e3       	ldi	r30, 0x34	; 52
    1f7e:	f0 e0       	ldi	r31, 0x00	; 0
    1f80:	80 81       	ld	r24, Z
    1f82:	48 2f       	mov	r20, r24
    1f84:	8a 81       	ldd	r24, Y+2	; 0x02
    1f86:	28 2f       	mov	r18, r24
    1f88:	30 e0       	ldi	r19, 0x00	; 0
    1f8a:	81 e0       	ldi	r24, 0x01	; 1
    1f8c:	90 e0       	ldi	r25, 0x00	; 0
    1f8e:	02 2e       	mov	r0, r18
    1f90:	02 c0       	rjmp	.+4      	; 0x1f96 <DIO_u8SetPinDirection+0x1d0>
    1f92:	88 0f       	add	r24, r24
    1f94:	99 1f       	adc	r25, r25
    1f96:	0a 94       	dec	r0
    1f98:	e2 f7       	brpl	.-8      	; 0x1f92 <DIO_u8SetPinDirection+0x1cc>
    1f9a:	84 2b       	or	r24, r20
    1f9c:	8c 93       	st	X, r24
    1f9e:	1d c0       	rjmp	.+58     	; 0x1fda <DIO_u8SetPinDirection+0x214>
			case DIO_u8PORTD : SET_BIT(DDRD, Copy_u8pin_num); break;
    1fa0:	a1 e3       	ldi	r26, 0x31	; 49
    1fa2:	b0 e0       	ldi	r27, 0x00	; 0
    1fa4:	e1 e3       	ldi	r30, 0x31	; 49
    1fa6:	f0 e0       	ldi	r31, 0x00	; 0
    1fa8:	80 81       	ld	r24, Z
    1faa:	48 2f       	mov	r20, r24
    1fac:	8a 81       	ldd	r24, Y+2	; 0x02
    1fae:	28 2f       	mov	r18, r24
    1fb0:	30 e0       	ldi	r19, 0x00	; 0
    1fb2:	81 e0       	ldi	r24, 0x01	; 1
    1fb4:	90 e0       	ldi	r25, 0x00	; 0
    1fb6:	02 2e       	mov	r0, r18
    1fb8:	02 c0       	rjmp	.+4      	; 0x1fbe <DIO_u8SetPinDirection+0x1f8>
    1fba:	88 0f       	add	r24, r24
    1fbc:	99 1f       	adc	r25, r25
    1fbe:	0a 94       	dec	r0
    1fc0:	e2 f7       	brpl	.-8      	; 0x1fba <DIO_u8SetPinDirection+0x1f4>
    1fc2:	84 2b       	or	r24, r20
    1fc4:	8c 93       	st	X, r24
    1fc6:	09 c0       	rjmp	.+18     	; 0x1fda <DIO_u8SetPinDirection+0x214>
			default : return DIO_PORT; break;
    1fc8:	91 e0       	ldi	r25, 0x01	; 1
    1fca:	98 87       	std	Y+8, r25	; 0x08
    1fcc:	07 c0       	rjmp	.+14     	; 0x1fdc <DIO_u8SetPinDirection+0x216>
		}
		}

	else if(Copy_u8direction > DIO_u8PIN_OUTPUT || Copy_u8direction < DIO_u8PIN_INPUT )
    1fce:	8b 81       	ldd	r24, Y+3	; 0x03
    1fd0:	82 30       	cpi	r24, 0x02	; 2
    1fd2:	18 f0       	brcs	.+6      	; 0x1fda <DIO_u8SetPinDirection+0x214>
		{
			return DIO_DIR;
    1fd4:	23 e0       	ldi	r18, 0x03	; 3
    1fd6:	28 87       	std	Y+8, r18	; 0x08
    1fd8:	01 c0       	rjmp	.+2      	; 0x1fdc <DIO_u8SetPinDirection+0x216>
		}

	return DIO_OK;
    1fda:	18 86       	std	Y+8, r1	; 0x08
    1fdc:	88 85       	ldd	r24, Y+8	; 0x08
}
    1fde:	28 96       	adiw	r28, 0x08	; 8
    1fe0:	0f b6       	in	r0, 0x3f	; 63
    1fe2:	f8 94       	cli
    1fe4:	de bf       	out	0x3e, r29	; 62
    1fe6:	0f be       	out	0x3f, r0	; 63
    1fe8:	cd bf       	out	0x3d, r28	; 61
    1fea:	cf 91       	pop	r28
    1fec:	df 91       	pop	r29
    1fee:	08 95       	ret

00001ff0 <DIO_u8SetPortDirection>:

ERROR_STATUS DIO_u8SetPortDirection(u8 Copy_u8port_num ,u8 Copy_u8direction)
{
    1ff0:	df 93       	push	r29
    1ff2:	cf 93       	push	r28
    1ff4:	00 d0       	rcall	.+0      	; 0x1ff6 <DIO_u8SetPortDirection+0x6>
    1ff6:	00 d0       	rcall	.+0      	; 0x1ff8 <DIO_u8SetPortDirection+0x8>
    1ff8:	0f 92       	push	r0
    1ffa:	cd b7       	in	r28, 0x3d	; 61
    1ffc:	de b7       	in	r29, 0x3e	; 62
    1ffe:	89 83       	std	Y+1, r24	; 0x01
    2000:	6a 83       	std	Y+2, r22	; 0x02
	if(Copy_u8port_num > DIO_u8PORTD)
    2002:	89 81       	ldd	r24, Y+1	; 0x01
    2004:	84 30       	cpi	r24, 0x04	; 4
    2006:	18 f0       	brcs	.+6      	; 0x200e <DIO_u8SetPortDirection+0x1e>
	{
		return DIO_PORT;
    2008:	21 e0       	ldi	r18, 0x01	; 1
    200a:	2d 83       	std	Y+5, r18	; 0x05
    200c:	37 c0       	rjmp	.+110    	; 0x207c <DIO_u8SetPortDirection+0x8c>
	}

	switch(Copy_u8port_num)
    200e:	89 81       	ldd	r24, Y+1	; 0x01
    2010:	28 2f       	mov	r18, r24
    2012:	30 e0       	ldi	r19, 0x00	; 0
    2014:	3c 83       	std	Y+4, r19	; 0x04
    2016:	2b 83       	std	Y+3, r18	; 0x03
    2018:	8b 81       	ldd	r24, Y+3	; 0x03
    201a:	9c 81       	ldd	r25, Y+4	; 0x04
    201c:	81 30       	cpi	r24, 0x01	; 1
    201e:	91 05       	cpc	r25, r1
    2020:	d1 f0       	breq	.+52     	; 0x2056 <DIO_u8SetPortDirection+0x66>
    2022:	2b 81       	ldd	r18, Y+3	; 0x03
    2024:	3c 81       	ldd	r19, Y+4	; 0x04
    2026:	22 30       	cpi	r18, 0x02	; 2
    2028:	31 05       	cpc	r19, r1
    202a:	2c f4       	brge	.+10     	; 0x2036 <DIO_u8SetPortDirection+0x46>
    202c:	8b 81       	ldd	r24, Y+3	; 0x03
    202e:	9c 81       	ldd	r25, Y+4	; 0x04
    2030:	00 97       	sbiw	r24, 0x00	; 0
    2032:	61 f0       	breq	.+24     	; 0x204c <DIO_u8SetPortDirection+0x5c>
    2034:	1f c0       	rjmp	.+62     	; 0x2074 <DIO_u8SetPortDirection+0x84>
    2036:	2b 81       	ldd	r18, Y+3	; 0x03
    2038:	3c 81       	ldd	r19, Y+4	; 0x04
    203a:	22 30       	cpi	r18, 0x02	; 2
    203c:	31 05       	cpc	r19, r1
    203e:	81 f0       	breq	.+32     	; 0x2060 <DIO_u8SetPortDirection+0x70>
    2040:	8b 81       	ldd	r24, Y+3	; 0x03
    2042:	9c 81       	ldd	r25, Y+4	; 0x04
    2044:	83 30       	cpi	r24, 0x03	; 3
    2046:	91 05       	cpc	r25, r1
    2048:	81 f0       	breq	.+32     	; 0x206a <DIO_u8SetPortDirection+0x7a>
    204a:	14 c0       	rjmp	.+40     	; 0x2074 <DIO_u8SetPortDirection+0x84>
	{
		case DIO_u8PORTA : DDRA = Copy_u8direction; break;
    204c:	ea e3       	ldi	r30, 0x3A	; 58
    204e:	f0 e0       	ldi	r31, 0x00	; 0
    2050:	8a 81       	ldd	r24, Y+2	; 0x02
    2052:	80 83       	st	Z, r24
    2054:	12 c0       	rjmp	.+36     	; 0x207a <DIO_u8SetPortDirection+0x8a>
	    case DIO_u8PORTB : DDRB = Copy_u8direction; break;
    2056:	e7 e3       	ldi	r30, 0x37	; 55
    2058:	f0 e0       	ldi	r31, 0x00	; 0
    205a:	8a 81       	ldd	r24, Y+2	; 0x02
    205c:	80 83       	st	Z, r24
    205e:	0d c0       	rjmp	.+26     	; 0x207a <DIO_u8SetPortDirection+0x8a>
	    case DIO_u8PORTC : DDRC = Copy_u8direction; break;
    2060:	e4 e3       	ldi	r30, 0x34	; 52
    2062:	f0 e0       	ldi	r31, 0x00	; 0
    2064:	8a 81       	ldd	r24, Y+2	; 0x02
    2066:	80 83       	st	Z, r24
    2068:	08 c0       	rjmp	.+16     	; 0x207a <DIO_u8SetPortDirection+0x8a>
	    case DIO_u8PORTD : DDRD = Copy_u8direction; break;
    206a:	e1 e3       	ldi	r30, 0x31	; 49
    206c:	f0 e0       	ldi	r31, 0x00	; 0
    206e:	8a 81       	ldd	r24, Y+2	; 0x02
    2070:	80 83       	st	Z, r24
    2072:	03 c0       	rjmp	.+6      	; 0x207a <DIO_u8SetPortDirection+0x8a>
	    default: return DIO_DIR;
    2074:	93 e0       	ldi	r25, 0x03	; 3
    2076:	9d 83       	std	Y+5, r25	; 0x05
    2078:	01 c0       	rjmp	.+2      	; 0x207c <DIO_u8SetPortDirection+0x8c>
	}

	return DIO_OK;
    207a:	1d 82       	std	Y+5, r1	; 0x05
    207c:	8d 81       	ldd	r24, Y+5	; 0x05
}
    207e:	0f 90       	pop	r0
    2080:	0f 90       	pop	r0
    2082:	0f 90       	pop	r0
    2084:	0f 90       	pop	r0
    2086:	0f 90       	pop	r0
    2088:	cf 91       	pop	r28
    208a:	df 91       	pop	r29
    208c:	08 95       	ret

0000208e <DIO_u8SetPinValue>:

ERROR_STATUS DIO_u8SetPinValue(u8 Copy_u8port_num , u8 Copy_u8pin_num , u8 Copy_u8value)
{
    208e:	df 93       	push	r29
    2090:	cf 93       	push	r28
    2092:	cd b7       	in	r28, 0x3d	; 61
    2094:	de b7       	in	r29, 0x3e	; 62
    2096:	28 97       	sbiw	r28, 0x08	; 8
    2098:	0f b6       	in	r0, 0x3f	; 63
    209a:	f8 94       	cli
    209c:	de bf       	out	0x3e, r29	; 62
    209e:	0f be       	out	0x3f, r0	; 63
    20a0:	cd bf       	out	0x3d, r28	; 61
    20a2:	89 83       	std	Y+1, r24	; 0x01
    20a4:	6a 83       	std	Y+2, r22	; 0x02
    20a6:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_u8pin_num > DIO_u8PIN7)
    20a8:	8a 81       	ldd	r24, Y+2	; 0x02
    20aa:	88 30       	cpi	r24, 0x08	; 8
    20ac:	18 f0       	brcs	.+6      	; 0x20b4 <DIO_u8SetPinValue+0x26>
	{
		return DIO_PIN;
    20ae:	22 e0       	ldi	r18, 0x02	; 2
    20b0:	28 87       	std	Y+8, r18	; 0x08
    20b2:	f2 c0       	rjmp	.+484    	; 0x2298 <DIO_u8SetPinValue+0x20a>
	}

	if(Copy_u8value == DIO_u8PIN_LOW)
    20b4:	8b 81       	ldd	r24, Y+3	; 0x03
    20b6:	88 23       	and	r24, r24
    20b8:	09 f0       	breq	.+2      	; 0x20bc <DIO_u8SetPinValue+0x2e>
    20ba:	77 c0       	rjmp	.+238    	; 0x21aa <DIO_u8SetPinValue+0x11c>
		{
		switch(Copy_u8port_num)
    20bc:	89 81       	ldd	r24, Y+1	; 0x01
    20be:	28 2f       	mov	r18, r24
    20c0:	30 e0       	ldi	r19, 0x00	; 0
    20c2:	3f 83       	std	Y+7, r19	; 0x07
    20c4:	2e 83       	std	Y+6, r18	; 0x06
    20c6:	8e 81       	ldd	r24, Y+6	; 0x06
    20c8:	9f 81       	ldd	r25, Y+7	; 0x07
    20ca:	81 30       	cpi	r24, 0x01	; 1
    20cc:	91 05       	cpc	r25, r1
    20ce:	59 f1       	breq	.+86     	; 0x2126 <DIO_u8SetPinValue+0x98>
    20d0:	2e 81       	ldd	r18, Y+6	; 0x06
    20d2:	3f 81       	ldd	r19, Y+7	; 0x07
    20d4:	22 30       	cpi	r18, 0x02	; 2
    20d6:	31 05       	cpc	r19, r1
    20d8:	2c f4       	brge	.+10     	; 0x20e4 <DIO_u8SetPinValue+0x56>
    20da:	8e 81       	ldd	r24, Y+6	; 0x06
    20dc:	9f 81       	ldd	r25, Y+7	; 0x07
    20de:	00 97       	sbiw	r24, 0x00	; 0
    20e0:	69 f0       	breq	.+26     	; 0x20fc <DIO_u8SetPinValue+0x6e>
    20e2:	60 c0       	rjmp	.+192    	; 0x21a4 <DIO_u8SetPinValue+0x116>
    20e4:	2e 81       	ldd	r18, Y+6	; 0x06
    20e6:	3f 81       	ldd	r19, Y+7	; 0x07
    20e8:	22 30       	cpi	r18, 0x02	; 2
    20ea:	31 05       	cpc	r19, r1
    20ec:	89 f1       	breq	.+98     	; 0x2150 <DIO_u8SetPinValue+0xc2>
    20ee:	8e 81       	ldd	r24, Y+6	; 0x06
    20f0:	9f 81       	ldd	r25, Y+7	; 0x07
    20f2:	83 30       	cpi	r24, 0x03	; 3
    20f4:	91 05       	cpc	r25, r1
    20f6:	09 f4       	brne	.+2      	; 0x20fa <DIO_u8SetPinValue+0x6c>
    20f8:	40 c0       	rjmp	.+128    	; 0x217a <DIO_u8SetPinValue+0xec>
    20fa:	54 c0       	rjmp	.+168    	; 0x21a4 <DIO_u8SetPinValue+0x116>
		{
		case DIO_u8PORTA : CLR_BIT(PORTA,Copy_u8pin_num); break;
    20fc:	ab e3       	ldi	r26, 0x3B	; 59
    20fe:	b0 e0       	ldi	r27, 0x00	; 0
    2100:	eb e3       	ldi	r30, 0x3B	; 59
    2102:	f0 e0       	ldi	r31, 0x00	; 0
    2104:	80 81       	ld	r24, Z
    2106:	48 2f       	mov	r20, r24
    2108:	8a 81       	ldd	r24, Y+2	; 0x02
    210a:	28 2f       	mov	r18, r24
    210c:	30 e0       	ldi	r19, 0x00	; 0
    210e:	81 e0       	ldi	r24, 0x01	; 1
    2110:	90 e0       	ldi	r25, 0x00	; 0
    2112:	02 2e       	mov	r0, r18
    2114:	02 c0       	rjmp	.+4      	; 0x211a <DIO_u8SetPinValue+0x8c>
    2116:	88 0f       	add	r24, r24
    2118:	99 1f       	adc	r25, r25
    211a:	0a 94       	dec	r0
    211c:	e2 f7       	brpl	.-8      	; 0x2116 <DIO_u8SetPinValue+0x88>
    211e:	80 95       	com	r24
    2120:	84 23       	and	r24, r20
    2122:	8c 93       	st	X, r24
    2124:	b8 c0       	rjmp	.+368    	; 0x2296 <DIO_u8SetPinValue+0x208>
		case DIO_u8PORTB : CLR_BIT(PORTB,Copy_u8pin_num); break;
    2126:	a8 e3       	ldi	r26, 0x38	; 56
    2128:	b0 e0       	ldi	r27, 0x00	; 0
    212a:	e8 e3       	ldi	r30, 0x38	; 56
    212c:	f0 e0       	ldi	r31, 0x00	; 0
    212e:	80 81       	ld	r24, Z
    2130:	48 2f       	mov	r20, r24
    2132:	8a 81       	ldd	r24, Y+2	; 0x02
    2134:	28 2f       	mov	r18, r24
    2136:	30 e0       	ldi	r19, 0x00	; 0
    2138:	81 e0       	ldi	r24, 0x01	; 1
    213a:	90 e0       	ldi	r25, 0x00	; 0
    213c:	02 2e       	mov	r0, r18
    213e:	02 c0       	rjmp	.+4      	; 0x2144 <DIO_u8SetPinValue+0xb6>
    2140:	88 0f       	add	r24, r24
    2142:	99 1f       	adc	r25, r25
    2144:	0a 94       	dec	r0
    2146:	e2 f7       	brpl	.-8      	; 0x2140 <DIO_u8SetPinValue+0xb2>
    2148:	80 95       	com	r24
    214a:	84 23       	and	r24, r20
    214c:	8c 93       	st	X, r24
    214e:	a3 c0       	rjmp	.+326    	; 0x2296 <DIO_u8SetPinValue+0x208>
		case DIO_u8PORTC : CLR_BIT(PORTC,Copy_u8pin_num); break;
    2150:	a5 e3       	ldi	r26, 0x35	; 53
    2152:	b0 e0       	ldi	r27, 0x00	; 0
    2154:	e5 e3       	ldi	r30, 0x35	; 53
    2156:	f0 e0       	ldi	r31, 0x00	; 0
    2158:	80 81       	ld	r24, Z
    215a:	48 2f       	mov	r20, r24
    215c:	8a 81       	ldd	r24, Y+2	; 0x02
    215e:	28 2f       	mov	r18, r24
    2160:	30 e0       	ldi	r19, 0x00	; 0
    2162:	81 e0       	ldi	r24, 0x01	; 1
    2164:	90 e0       	ldi	r25, 0x00	; 0
    2166:	02 2e       	mov	r0, r18
    2168:	02 c0       	rjmp	.+4      	; 0x216e <DIO_u8SetPinValue+0xe0>
    216a:	88 0f       	add	r24, r24
    216c:	99 1f       	adc	r25, r25
    216e:	0a 94       	dec	r0
    2170:	e2 f7       	brpl	.-8      	; 0x216a <DIO_u8SetPinValue+0xdc>
    2172:	80 95       	com	r24
    2174:	84 23       	and	r24, r20
    2176:	8c 93       	st	X, r24
    2178:	8e c0       	rjmp	.+284    	; 0x2296 <DIO_u8SetPinValue+0x208>
		case DIO_u8PORTD : CLR_BIT(PORTD,Copy_u8pin_num); break;
    217a:	a2 e3       	ldi	r26, 0x32	; 50
    217c:	b0 e0       	ldi	r27, 0x00	; 0
    217e:	e2 e3       	ldi	r30, 0x32	; 50
    2180:	f0 e0       	ldi	r31, 0x00	; 0
    2182:	80 81       	ld	r24, Z
    2184:	48 2f       	mov	r20, r24
    2186:	8a 81       	ldd	r24, Y+2	; 0x02
    2188:	28 2f       	mov	r18, r24
    218a:	30 e0       	ldi	r19, 0x00	; 0
    218c:	81 e0       	ldi	r24, 0x01	; 1
    218e:	90 e0       	ldi	r25, 0x00	; 0
    2190:	02 2e       	mov	r0, r18
    2192:	02 c0       	rjmp	.+4      	; 0x2198 <DIO_u8SetPinValue+0x10a>
    2194:	88 0f       	add	r24, r24
    2196:	99 1f       	adc	r25, r25
    2198:	0a 94       	dec	r0
    219a:	e2 f7       	brpl	.-8      	; 0x2194 <DIO_u8SetPinValue+0x106>
    219c:	80 95       	com	r24
    219e:	84 23       	and	r24, r20
    21a0:	8c 93       	st	X, r24
    21a2:	79 c0       	rjmp	.+242    	; 0x2296 <DIO_u8SetPinValue+0x208>
		default : return DIO_PORT; break;
    21a4:	91 e0       	ldi	r25, 0x01	; 1
    21a6:	98 87       	std	Y+8, r25	; 0x08
    21a8:	77 c0       	rjmp	.+238    	; 0x2298 <DIO_u8SetPinValue+0x20a>
		}
		}

	else if(Copy_u8value == DIO_u8PIN_HIGH)
    21aa:	8b 81       	ldd	r24, Y+3	; 0x03
    21ac:	81 30       	cpi	r24, 0x01	; 1
    21ae:	09 f0       	breq	.+2      	; 0x21b2 <DIO_u8SetPinValue+0x124>
    21b0:	72 c0       	rjmp	.+228    	; 0x2296 <DIO_u8SetPinValue+0x208>
		{
		switch(Copy_u8port_num)
    21b2:	89 81       	ldd	r24, Y+1	; 0x01
    21b4:	28 2f       	mov	r18, r24
    21b6:	30 e0       	ldi	r19, 0x00	; 0
    21b8:	3d 83       	std	Y+5, r19	; 0x05
    21ba:	2c 83       	std	Y+4, r18	; 0x04
    21bc:	8c 81       	ldd	r24, Y+4	; 0x04
    21be:	9d 81       	ldd	r25, Y+5	; 0x05
    21c0:	81 30       	cpi	r24, 0x01	; 1
    21c2:	91 05       	cpc	r25, r1
    21c4:	49 f1       	breq	.+82     	; 0x2218 <DIO_u8SetPinValue+0x18a>
    21c6:	2c 81       	ldd	r18, Y+4	; 0x04
    21c8:	3d 81       	ldd	r19, Y+5	; 0x05
    21ca:	22 30       	cpi	r18, 0x02	; 2
    21cc:	31 05       	cpc	r19, r1
    21ce:	2c f4       	brge	.+10     	; 0x21da <DIO_u8SetPinValue+0x14c>
    21d0:	8c 81       	ldd	r24, Y+4	; 0x04
    21d2:	9d 81       	ldd	r25, Y+5	; 0x05
    21d4:	00 97       	sbiw	r24, 0x00	; 0
    21d6:	61 f0       	breq	.+24     	; 0x21f0 <DIO_u8SetPinValue+0x162>
    21d8:	5b c0       	rjmp	.+182    	; 0x2290 <DIO_u8SetPinValue+0x202>
    21da:	2c 81       	ldd	r18, Y+4	; 0x04
    21dc:	3d 81       	ldd	r19, Y+5	; 0x05
    21de:	22 30       	cpi	r18, 0x02	; 2
    21e0:	31 05       	cpc	r19, r1
    21e2:	71 f1       	breq	.+92     	; 0x2240 <DIO_u8SetPinValue+0x1b2>
    21e4:	8c 81       	ldd	r24, Y+4	; 0x04
    21e6:	9d 81       	ldd	r25, Y+5	; 0x05
    21e8:	83 30       	cpi	r24, 0x03	; 3
    21ea:	91 05       	cpc	r25, r1
    21ec:	e9 f1       	breq	.+122    	; 0x2268 <DIO_u8SetPinValue+0x1da>
    21ee:	50 c0       	rjmp	.+160    	; 0x2290 <DIO_u8SetPinValue+0x202>
		{
		case DIO_u8PORTA : SET_BIT(PORTA,Copy_u8pin_num); break;
    21f0:	ab e3       	ldi	r26, 0x3B	; 59
    21f2:	b0 e0       	ldi	r27, 0x00	; 0
    21f4:	eb e3       	ldi	r30, 0x3B	; 59
    21f6:	f0 e0       	ldi	r31, 0x00	; 0
    21f8:	80 81       	ld	r24, Z
    21fa:	48 2f       	mov	r20, r24
    21fc:	8a 81       	ldd	r24, Y+2	; 0x02
    21fe:	28 2f       	mov	r18, r24
    2200:	30 e0       	ldi	r19, 0x00	; 0
    2202:	81 e0       	ldi	r24, 0x01	; 1
    2204:	90 e0       	ldi	r25, 0x00	; 0
    2206:	02 2e       	mov	r0, r18
    2208:	02 c0       	rjmp	.+4      	; 0x220e <DIO_u8SetPinValue+0x180>
    220a:	88 0f       	add	r24, r24
    220c:	99 1f       	adc	r25, r25
    220e:	0a 94       	dec	r0
    2210:	e2 f7       	brpl	.-8      	; 0x220a <DIO_u8SetPinValue+0x17c>
    2212:	84 2b       	or	r24, r20
    2214:	8c 93       	st	X, r24
    2216:	3f c0       	rjmp	.+126    	; 0x2296 <DIO_u8SetPinValue+0x208>
		case DIO_u8PORTB : SET_BIT(PORTB,Copy_u8pin_num); break;
    2218:	a8 e3       	ldi	r26, 0x38	; 56
    221a:	b0 e0       	ldi	r27, 0x00	; 0
    221c:	e8 e3       	ldi	r30, 0x38	; 56
    221e:	f0 e0       	ldi	r31, 0x00	; 0
    2220:	80 81       	ld	r24, Z
    2222:	48 2f       	mov	r20, r24
    2224:	8a 81       	ldd	r24, Y+2	; 0x02
    2226:	28 2f       	mov	r18, r24
    2228:	30 e0       	ldi	r19, 0x00	; 0
    222a:	81 e0       	ldi	r24, 0x01	; 1
    222c:	90 e0       	ldi	r25, 0x00	; 0
    222e:	02 2e       	mov	r0, r18
    2230:	02 c0       	rjmp	.+4      	; 0x2236 <DIO_u8SetPinValue+0x1a8>
    2232:	88 0f       	add	r24, r24
    2234:	99 1f       	adc	r25, r25
    2236:	0a 94       	dec	r0
    2238:	e2 f7       	brpl	.-8      	; 0x2232 <DIO_u8SetPinValue+0x1a4>
    223a:	84 2b       	or	r24, r20
    223c:	8c 93       	st	X, r24
    223e:	2b c0       	rjmp	.+86     	; 0x2296 <DIO_u8SetPinValue+0x208>
		case DIO_u8PORTC : SET_BIT(PORTC,Copy_u8pin_num); break;
    2240:	a5 e3       	ldi	r26, 0x35	; 53
    2242:	b0 e0       	ldi	r27, 0x00	; 0
    2244:	e5 e3       	ldi	r30, 0x35	; 53
    2246:	f0 e0       	ldi	r31, 0x00	; 0
    2248:	80 81       	ld	r24, Z
    224a:	48 2f       	mov	r20, r24
    224c:	8a 81       	ldd	r24, Y+2	; 0x02
    224e:	28 2f       	mov	r18, r24
    2250:	30 e0       	ldi	r19, 0x00	; 0
    2252:	81 e0       	ldi	r24, 0x01	; 1
    2254:	90 e0       	ldi	r25, 0x00	; 0
    2256:	02 2e       	mov	r0, r18
    2258:	02 c0       	rjmp	.+4      	; 0x225e <DIO_u8SetPinValue+0x1d0>
    225a:	88 0f       	add	r24, r24
    225c:	99 1f       	adc	r25, r25
    225e:	0a 94       	dec	r0
    2260:	e2 f7       	brpl	.-8      	; 0x225a <DIO_u8SetPinValue+0x1cc>
    2262:	84 2b       	or	r24, r20
    2264:	8c 93       	st	X, r24
    2266:	17 c0       	rjmp	.+46     	; 0x2296 <DIO_u8SetPinValue+0x208>
		case DIO_u8PORTD : SET_BIT(PORTD,Copy_u8pin_num); break;
    2268:	a2 e3       	ldi	r26, 0x32	; 50
    226a:	b0 e0       	ldi	r27, 0x00	; 0
    226c:	e2 e3       	ldi	r30, 0x32	; 50
    226e:	f0 e0       	ldi	r31, 0x00	; 0
    2270:	80 81       	ld	r24, Z
    2272:	48 2f       	mov	r20, r24
    2274:	8a 81       	ldd	r24, Y+2	; 0x02
    2276:	28 2f       	mov	r18, r24
    2278:	30 e0       	ldi	r19, 0x00	; 0
    227a:	81 e0       	ldi	r24, 0x01	; 1
    227c:	90 e0       	ldi	r25, 0x00	; 0
    227e:	02 2e       	mov	r0, r18
    2280:	02 c0       	rjmp	.+4      	; 0x2286 <DIO_u8SetPinValue+0x1f8>
    2282:	88 0f       	add	r24, r24
    2284:	99 1f       	adc	r25, r25
    2286:	0a 94       	dec	r0
    2288:	e2 f7       	brpl	.-8      	; 0x2282 <DIO_u8SetPinValue+0x1f4>
    228a:	84 2b       	or	r24, r20
    228c:	8c 93       	st	X, r24
    228e:	03 c0       	rjmp	.+6      	; 0x2296 <DIO_u8SetPinValue+0x208>
		default : return DIO_PORT; break;
    2290:	91 e0       	ldi	r25, 0x01	; 1
    2292:	98 87       	std	Y+8, r25	; 0x08
    2294:	01 c0       	rjmp	.+2      	; 0x2298 <DIO_u8SetPinValue+0x20a>
		}
		}

		return DIO_OK;
    2296:	18 86       	std	Y+8, r1	; 0x08
    2298:	88 85       	ldd	r24, Y+8	; 0x08
}
    229a:	28 96       	adiw	r28, 0x08	; 8
    229c:	0f b6       	in	r0, 0x3f	; 63
    229e:	f8 94       	cli
    22a0:	de bf       	out	0x3e, r29	; 62
    22a2:	0f be       	out	0x3f, r0	; 63
    22a4:	cd bf       	out	0x3d, r28	; 61
    22a6:	cf 91       	pop	r28
    22a8:	df 91       	pop	r29
    22aa:	08 95       	ret

000022ac <DIO_u8SetPortValue>:

ERROR_STATUS DIO_u8SetPortValue(u8 Copy_u8port_num ,u8 Copy_u8value)
{
    22ac:	df 93       	push	r29
    22ae:	cf 93       	push	r28
    22b0:	00 d0       	rcall	.+0      	; 0x22b2 <DIO_u8SetPortValue+0x6>
    22b2:	00 d0       	rcall	.+0      	; 0x22b4 <DIO_u8SetPortValue+0x8>
    22b4:	0f 92       	push	r0
    22b6:	cd b7       	in	r28, 0x3d	; 61
    22b8:	de b7       	in	r29, 0x3e	; 62
    22ba:	89 83       	std	Y+1, r24	; 0x01
    22bc:	6a 83       	std	Y+2, r22	; 0x02

	switch(Copy_u8port_num)
    22be:	89 81       	ldd	r24, Y+1	; 0x01
    22c0:	28 2f       	mov	r18, r24
    22c2:	30 e0       	ldi	r19, 0x00	; 0
    22c4:	3d 83       	std	Y+5, r19	; 0x05
    22c6:	2c 83       	std	Y+4, r18	; 0x04
    22c8:	8c 81       	ldd	r24, Y+4	; 0x04
    22ca:	9d 81       	ldd	r25, Y+5	; 0x05
    22cc:	81 30       	cpi	r24, 0x01	; 1
    22ce:	91 05       	cpc	r25, r1
    22d0:	d1 f0       	breq	.+52     	; 0x2306 <DIO_u8SetPortValue+0x5a>
    22d2:	2c 81       	ldd	r18, Y+4	; 0x04
    22d4:	3d 81       	ldd	r19, Y+5	; 0x05
    22d6:	22 30       	cpi	r18, 0x02	; 2
    22d8:	31 05       	cpc	r19, r1
    22da:	2c f4       	brge	.+10     	; 0x22e6 <DIO_u8SetPortValue+0x3a>
    22dc:	8c 81       	ldd	r24, Y+4	; 0x04
    22de:	9d 81       	ldd	r25, Y+5	; 0x05
    22e0:	00 97       	sbiw	r24, 0x00	; 0
    22e2:	61 f0       	breq	.+24     	; 0x22fc <DIO_u8SetPortValue+0x50>
    22e4:	1f c0       	rjmp	.+62     	; 0x2324 <DIO_u8SetPortValue+0x78>
    22e6:	2c 81       	ldd	r18, Y+4	; 0x04
    22e8:	3d 81       	ldd	r19, Y+5	; 0x05
    22ea:	22 30       	cpi	r18, 0x02	; 2
    22ec:	31 05       	cpc	r19, r1
    22ee:	81 f0       	breq	.+32     	; 0x2310 <DIO_u8SetPortValue+0x64>
    22f0:	8c 81       	ldd	r24, Y+4	; 0x04
    22f2:	9d 81       	ldd	r25, Y+5	; 0x05
    22f4:	83 30       	cpi	r24, 0x03	; 3
    22f6:	91 05       	cpc	r25, r1
    22f8:	81 f0       	breq	.+32     	; 0x231a <DIO_u8SetPortValue+0x6e>
    22fa:	14 c0       	rjmp	.+40     	; 0x2324 <DIO_u8SetPortValue+0x78>
	{
		case DIO_u8PORTA : PORTA = Copy_u8value; break;
    22fc:	eb e3       	ldi	r30, 0x3B	; 59
    22fe:	f0 e0       	ldi	r31, 0x00	; 0
    2300:	8a 81       	ldd	r24, Y+2	; 0x02
    2302:	80 83       	st	Z, r24
    2304:	12 c0       	rjmp	.+36     	; 0x232a <DIO_u8SetPortValue+0x7e>
	    case DIO_u8PORTB : PORTB = Copy_u8value; break;
    2306:	e8 e3       	ldi	r30, 0x38	; 56
    2308:	f0 e0       	ldi	r31, 0x00	; 0
    230a:	8a 81       	ldd	r24, Y+2	; 0x02
    230c:	80 83       	st	Z, r24
    230e:	0d c0       	rjmp	.+26     	; 0x232a <DIO_u8SetPortValue+0x7e>
	    case DIO_u8PORTC : PORTC = Copy_u8value; break;
    2310:	e5 e3       	ldi	r30, 0x35	; 53
    2312:	f0 e0       	ldi	r31, 0x00	; 0
    2314:	8a 81       	ldd	r24, Y+2	; 0x02
    2316:	80 83       	st	Z, r24
    2318:	08 c0       	rjmp	.+16     	; 0x232a <DIO_u8SetPortValue+0x7e>
	    case DIO_u8PORTD : PORTD = Copy_u8value; break;
    231a:	e2 e3       	ldi	r30, 0x32	; 50
    231c:	f0 e0       	ldi	r31, 0x00	; 0
    231e:	8a 81       	ldd	r24, Y+2	; 0x02
    2320:	80 83       	st	Z, r24
    2322:	03 c0       	rjmp	.+6      	; 0x232a <DIO_u8SetPortValue+0x7e>
	    default: return DIO_PORT;
    2324:	91 e0       	ldi	r25, 0x01	; 1
    2326:	9b 83       	std	Y+3, r25	; 0x03
    2328:	01 c0       	rjmp	.+2      	; 0x232c <DIO_u8SetPortValue+0x80>
	}

	return DIO_OK;
    232a:	1b 82       	std	Y+3, r1	; 0x03
    232c:	8b 81       	ldd	r24, Y+3	; 0x03
}
    232e:	0f 90       	pop	r0
    2330:	0f 90       	pop	r0
    2332:	0f 90       	pop	r0
    2334:	0f 90       	pop	r0
    2336:	0f 90       	pop	r0
    2338:	cf 91       	pop	r28
    233a:	df 91       	pop	r29
    233c:	08 95       	ret

0000233e <DIO_u8GetPinValue>:

ERROR_STATUS DIO_u8GetPinValue(u8 Copy_u8port_num , u8 Copy_u8pin_num , pu8 Copy_pu8value)
{
    233e:	df 93       	push	r29
    2340:	cf 93       	push	r28
    2342:	cd b7       	in	r28, 0x3d	; 61
    2344:	de b7       	in	r29, 0x3e	; 62
    2346:	27 97       	sbiw	r28, 0x07	; 7
    2348:	0f b6       	in	r0, 0x3f	; 63
    234a:	f8 94       	cli
    234c:	de bf       	out	0x3e, r29	; 62
    234e:	0f be       	out	0x3f, r0	; 63
    2350:	cd bf       	out	0x3d, r28	; 61
    2352:	89 83       	std	Y+1, r24	; 0x01
    2354:	6a 83       	std	Y+2, r22	; 0x02
    2356:	5c 83       	std	Y+4, r21	; 0x04
    2358:	4b 83       	std	Y+3, r20	; 0x03

	if ((Copy_pu8value != NULL) && (Copy_u8pin_num > DIO_u8PIN7))
    235a:	8b 81       	ldd	r24, Y+3	; 0x03
    235c:	9c 81       	ldd	r25, Y+4	; 0x04
    235e:	00 97       	sbiw	r24, 0x00	; 0
    2360:	31 f0       	breq	.+12     	; 0x236e <DIO_u8GetPinValue+0x30>
    2362:	8a 81       	ldd	r24, Y+2	; 0x02
    2364:	88 30       	cpi	r24, 0x08	; 8
    2366:	18 f0       	brcs	.+6      	; 0x236e <DIO_u8GetPinValue+0x30>
	{
		return DIO_PIN;
    2368:	22 e0       	ldi	r18, 0x02	; 2
    236a:	2f 83       	std	Y+7, r18	; 0x07
    236c:	73 c0       	rjmp	.+230    	; 0x2454 <DIO_u8GetPinValue+0x116>
	}

	switch(Copy_u8port_num)
    236e:	89 81       	ldd	r24, Y+1	; 0x01
    2370:	28 2f       	mov	r18, r24
    2372:	30 e0       	ldi	r19, 0x00	; 0
    2374:	3e 83       	std	Y+6, r19	; 0x06
    2376:	2d 83       	std	Y+5, r18	; 0x05
    2378:	8d 81       	ldd	r24, Y+5	; 0x05
    237a:	9e 81       	ldd	r25, Y+6	; 0x06
    237c:	81 30       	cpi	r24, 0x01	; 1
    237e:	91 05       	cpc	r25, r1
    2380:	49 f1       	breq	.+82     	; 0x23d4 <DIO_u8GetPinValue+0x96>
    2382:	2d 81       	ldd	r18, Y+5	; 0x05
    2384:	3e 81       	ldd	r19, Y+6	; 0x06
    2386:	22 30       	cpi	r18, 0x02	; 2
    2388:	31 05       	cpc	r19, r1
    238a:	2c f4       	brge	.+10     	; 0x2396 <DIO_u8GetPinValue+0x58>
    238c:	8d 81       	ldd	r24, Y+5	; 0x05
    238e:	9e 81       	ldd	r25, Y+6	; 0x06
    2390:	00 97       	sbiw	r24, 0x00	; 0
    2392:	61 f0       	breq	.+24     	; 0x23ac <DIO_u8GetPinValue+0x6e>
    2394:	5b c0       	rjmp	.+182    	; 0x244c <DIO_u8GetPinValue+0x10e>
    2396:	2d 81       	ldd	r18, Y+5	; 0x05
    2398:	3e 81       	ldd	r19, Y+6	; 0x06
    239a:	22 30       	cpi	r18, 0x02	; 2
    239c:	31 05       	cpc	r19, r1
    239e:	71 f1       	breq	.+92     	; 0x23fc <DIO_u8GetPinValue+0xbe>
    23a0:	8d 81       	ldd	r24, Y+5	; 0x05
    23a2:	9e 81       	ldd	r25, Y+6	; 0x06
    23a4:	83 30       	cpi	r24, 0x03	; 3
    23a6:	91 05       	cpc	r25, r1
    23a8:	e9 f1       	breq	.+122    	; 0x2424 <DIO_u8GetPinValue+0xe6>
    23aa:	50 c0       	rjmp	.+160    	; 0x244c <DIO_u8GetPinValue+0x10e>
		{
			case DIO_u8PORTA : *Copy_pu8value = GET_BIT(PINA , Copy_u8pin_num); break;
    23ac:	e9 e3       	ldi	r30, 0x39	; 57
    23ae:	f0 e0       	ldi	r31, 0x00	; 0
    23b0:	80 81       	ld	r24, Z
    23b2:	48 2f       	mov	r20, r24
    23b4:	8a 81       	ldd	r24, Y+2	; 0x02
    23b6:	28 2f       	mov	r18, r24
    23b8:	30 e0       	ldi	r19, 0x00	; 0
    23ba:	81 e0       	ldi	r24, 0x01	; 1
    23bc:	90 e0       	ldi	r25, 0x00	; 0
    23be:	02 2e       	mov	r0, r18
    23c0:	02 c0       	rjmp	.+4      	; 0x23c6 <DIO_u8GetPinValue+0x88>
    23c2:	88 0f       	add	r24, r24
    23c4:	99 1f       	adc	r25, r25
    23c6:	0a 94       	dec	r0
    23c8:	e2 f7       	brpl	.-8      	; 0x23c2 <DIO_u8GetPinValue+0x84>
    23ca:	84 23       	and	r24, r20
    23cc:	eb 81       	ldd	r30, Y+3	; 0x03
    23ce:	fc 81       	ldd	r31, Y+4	; 0x04
    23d0:	80 83       	st	Z, r24
    23d2:	3f c0       	rjmp	.+126    	; 0x2452 <DIO_u8GetPinValue+0x114>
		    case DIO_u8PORTB : *Copy_pu8value = GET_BIT(PINB , Copy_u8pin_num); break;
    23d4:	e6 e3       	ldi	r30, 0x36	; 54
    23d6:	f0 e0       	ldi	r31, 0x00	; 0
    23d8:	80 81       	ld	r24, Z
    23da:	48 2f       	mov	r20, r24
    23dc:	8a 81       	ldd	r24, Y+2	; 0x02
    23de:	28 2f       	mov	r18, r24
    23e0:	30 e0       	ldi	r19, 0x00	; 0
    23e2:	81 e0       	ldi	r24, 0x01	; 1
    23e4:	90 e0       	ldi	r25, 0x00	; 0
    23e6:	02 2e       	mov	r0, r18
    23e8:	02 c0       	rjmp	.+4      	; 0x23ee <DIO_u8GetPinValue+0xb0>
    23ea:	88 0f       	add	r24, r24
    23ec:	99 1f       	adc	r25, r25
    23ee:	0a 94       	dec	r0
    23f0:	e2 f7       	brpl	.-8      	; 0x23ea <DIO_u8GetPinValue+0xac>
    23f2:	84 23       	and	r24, r20
    23f4:	eb 81       	ldd	r30, Y+3	; 0x03
    23f6:	fc 81       	ldd	r31, Y+4	; 0x04
    23f8:	80 83       	st	Z, r24
    23fa:	2b c0       	rjmp	.+86     	; 0x2452 <DIO_u8GetPinValue+0x114>
		    case DIO_u8PORTC : *Copy_pu8value = GET_BIT(PINC , Copy_u8pin_num); break;
    23fc:	e3 e3       	ldi	r30, 0x33	; 51
    23fe:	f0 e0       	ldi	r31, 0x00	; 0
    2400:	80 81       	ld	r24, Z
    2402:	48 2f       	mov	r20, r24
    2404:	8a 81       	ldd	r24, Y+2	; 0x02
    2406:	28 2f       	mov	r18, r24
    2408:	30 e0       	ldi	r19, 0x00	; 0
    240a:	81 e0       	ldi	r24, 0x01	; 1
    240c:	90 e0       	ldi	r25, 0x00	; 0
    240e:	02 2e       	mov	r0, r18
    2410:	02 c0       	rjmp	.+4      	; 0x2416 <DIO_u8GetPinValue+0xd8>
    2412:	88 0f       	add	r24, r24
    2414:	99 1f       	adc	r25, r25
    2416:	0a 94       	dec	r0
    2418:	e2 f7       	brpl	.-8      	; 0x2412 <DIO_u8GetPinValue+0xd4>
    241a:	84 23       	and	r24, r20
    241c:	eb 81       	ldd	r30, Y+3	; 0x03
    241e:	fc 81       	ldd	r31, Y+4	; 0x04
    2420:	80 83       	st	Z, r24
    2422:	17 c0       	rjmp	.+46     	; 0x2452 <DIO_u8GetPinValue+0x114>
		    case DIO_u8PORTD : *Copy_pu8value = GET_BIT(PIND , Copy_u8pin_num); break;
    2424:	e0 e3       	ldi	r30, 0x30	; 48
    2426:	f0 e0       	ldi	r31, 0x00	; 0
    2428:	80 81       	ld	r24, Z
    242a:	48 2f       	mov	r20, r24
    242c:	8a 81       	ldd	r24, Y+2	; 0x02
    242e:	28 2f       	mov	r18, r24
    2430:	30 e0       	ldi	r19, 0x00	; 0
    2432:	81 e0       	ldi	r24, 0x01	; 1
    2434:	90 e0       	ldi	r25, 0x00	; 0
    2436:	02 2e       	mov	r0, r18
    2438:	02 c0       	rjmp	.+4      	; 0x243e <DIO_u8GetPinValue+0x100>
    243a:	88 0f       	add	r24, r24
    243c:	99 1f       	adc	r25, r25
    243e:	0a 94       	dec	r0
    2440:	e2 f7       	brpl	.-8      	; 0x243a <DIO_u8GetPinValue+0xfc>
    2442:	84 23       	and	r24, r20
    2444:	eb 81       	ldd	r30, Y+3	; 0x03
    2446:	fc 81       	ldd	r31, Y+4	; 0x04
    2448:	80 83       	st	Z, r24
    244a:	03 c0       	rjmp	.+6      	; 0x2452 <DIO_u8GetPinValue+0x114>
		    default: return DIO_PORT;
    244c:	91 e0       	ldi	r25, 0x01	; 1
    244e:	9f 83       	std	Y+7, r25	; 0x07
    2450:	01 c0       	rjmp	.+2      	; 0x2454 <DIO_u8GetPinValue+0x116>
		}

	return DIO_OK;
    2452:	1f 82       	std	Y+7, r1	; 0x07
    2454:	8f 81       	ldd	r24, Y+7	; 0x07
}
    2456:	27 96       	adiw	r28, 0x07	; 7
    2458:	0f b6       	in	r0, 0x3f	; 63
    245a:	f8 94       	cli
    245c:	de bf       	out	0x3e, r29	; 62
    245e:	0f be       	out	0x3f, r0	; 63
    2460:	cd bf       	out	0x3d, r28	; 61
    2462:	cf 91       	pop	r28
    2464:	df 91       	pop	r29
    2466:	08 95       	ret

00002468 <DIO_u8TogglePinValue>:

ERROR_STATUS DIO_u8TogglePinValue(u8 Copy_u8port_num , u8 Copy_u8pin_num)
{
    2468:	df 93       	push	r29
    246a:	cf 93       	push	r28
    246c:	00 d0       	rcall	.+0      	; 0x246e <DIO_u8TogglePinValue+0x6>
    246e:	00 d0       	rcall	.+0      	; 0x2470 <DIO_u8TogglePinValue+0x8>
    2470:	0f 92       	push	r0
    2472:	cd b7       	in	r28, 0x3d	; 61
    2474:	de b7       	in	r29, 0x3e	; 62
    2476:	89 83       	std	Y+1, r24	; 0x01
    2478:	6a 83       	std	Y+2, r22	; 0x02
	if(Copy_u8pin_num > DIO_u8PIN7)
    247a:	8a 81       	ldd	r24, Y+2	; 0x02
    247c:	88 30       	cpi	r24, 0x08	; 8
    247e:	18 f0       	brcs	.+6      	; 0x2486 <DIO_u8TogglePinValue+0x1e>
	{
		return DIO_PIN;
    2480:	22 e0       	ldi	r18, 0x02	; 2
    2482:	2d 83       	std	Y+5, r18	; 0x05
    2484:	73 c0       	rjmp	.+230    	; 0x256c <DIO_u8TogglePinValue+0x104>
	}

	switch(Copy_u8port_num)
    2486:	89 81       	ldd	r24, Y+1	; 0x01
    2488:	28 2f       	mov	r18, r24
    248a:	30 e0       	ldi	r19, 0x00	; 0
    248c:	3c 83       	std	Y+4, r19	; 0x04
    248e:	2b 83       	std	Y+3, r18	; 0x03
    2490:	8b 81       	ldd	r24, Y+3	; 0x03
    2492:	9c 81       	ldd	r25, Y+4	; 0x04
    2494:	81 30       	cpi	r24, 0x01	; 1
    2496:	91 05       	cpc	r25, r1
    2498:	49 f1       	breq	.+82     	; 0x24ec <DIO_u8TogglePinValue+0x84>
    249a:	2b 81       	ldd	r18, Y+3	; 0x03
    249c:	3c 81       	ldd	r19, Y+4	; 0x04
    249e:	22 30       	cpi	r18, 0x02	; 2
    24a0:	31 05       	cpc	r19, r1
    24a2:	2c f4       	brge	.+10     	; 0x24ae <DIO_u8TogglePinValue+0x46>
    24a4:	8b 81       	ldd	r24, Y+3	; 0x03
    24a6:	9c 81       	ldd	r25, Y+4	; 0x04
    24a8:	00 97       	sbiw	r24, 0x00	; 0
    24aa:	61 f0       	breq	.+24     	; 0x24c4 <DIO_u8TogglePinValue+0x5c>
    24ac:	5b c0       	rjmp	.+182    	; 0x2564 <DIO_u8TogglePinValue+0xfc>
    24ae:	2b 81       	ldd	r18, Y+3	; 0x03
    24b0:	3c 81       	ldd	r19, Y+4	; 0x04
    24b2:	22 30       	cpi	r18, 0x02	; 2
    24b4:	31 05       	cpc	r19, r1
    24b6:	71 f1       	breq	.+92     	; 0x2514 <DIO_u8TogglePinValue+0xac>
    24b8:	8b 81       	ldd	r24, Y+3	; 0x03
    24ba:	9c 81       	ldd	r25, Y+4	; 0x04
    24bc:	83 30       	cpi	r24, 0x03	; 3
    24be:	91 05       	cpc	r25, r1
    24c0:	e9 f1       	breq	.+122    	; 0x253c <DIO_u8TogglePinValue+0xd4>
    24c2:	50 c0       	rjmp	.+160    	; 0x2564 <DIO_u8TogglePinValue+0xfc>
	{
		case DIO_u8PORTA : TOGGLE_BIT(PORTA , Copy_u8pin_num); break;
    24c4:	ab e3       	ldi	r26, 0x3B	; 59
    24c6:	b0 e0       	ldi	r27, 0x00	; 0
    24c8:	eb e3       	ldi	r30, 0x3B	; 59
    24ca:	f0 e0       	ldi	r31, 0x00	; 0
    24cc:	80 81       	ld	r24, Z
    24ce:	48 2f       	mov	r20, r24
    24d0:	8a 81       	ldd	r24, Y+2	; 0x02
    24d2:	28 2f       	mov	r18, r24
    24d4:	30 e0       	ldi	r19, 0x00	; 0
    24d6:	81 e0       	ldi	r24, 0x01	; 1
    24d8:	90 e0       	ldi	r25, 0x00	; 0
    24da:	02 2e       	mov	r0, r18
    24dc:	02 c0       	rjmp	.+4      	; 0x24e2 <DIO_u8TogglePinValue+0x7a>
    24de:	88 0f       	add	r24, r24
    24e0:	99 1f       	adc	r25, r25
    24e2:	0a 94       	dec	r0
    24e4:	e2 f7       	brpl	.-8      	; 0x24de <DIO_u8TogglePinValue+0x76>
    24e6:	84 27       	eor	r24, r20
    24e8:	8c 93       	st	X, r24
    24ea:	3f c0       	rjmp	.+126    	; 0x256a <DIO_u8TogglePinValue+0x102>
	    case DIO_u8PORTB : TOGGLE_BIT(PORTB , Copy_u8pin_num); break;
    24ec:	a8 e3       	ldi	r26, 0x38	; 56
    24ee:	b0 e0       	ldi	r27, 0x00	; 0
    24f0:	e8 e3       	ldi	r30, 0x38	; 56
    24f2:	f0 e0       	ldi	r31, 0x00	; 0
    24f4:	80 81       	ld	r24, Z
    24f6:	48 2f       	mov	r20, r24
    24f8:	8a 81       	ldd	r24, Y+2	; 0x02
    24fa:	28 2f       	mov	r18, r24
    24fc:	30 e0       	ldi	r19, 0x00	; 0
    24fe:	81 e0       	ldi	r24, 0x01	; 1
    2500:	90 e0       	ldi	r25, 0x00	; 0
    2502:	02 2e       	mov	r0, r18
    2504:	02 c0       	rjmp	.+4      	; 0x250a <DIO_u8TogglePinValue+0xa2>
    2506:	88 0f       	add	r24, r24
    2508:	99 1f       	adc	r25, r25
    250a:	0a 94       	dec	r0
    250c:	e2 f7       	brpl	.-8      	; 0x2506 <DIO_u8TogglePinValue+0x9e>
    250e:	84 27       	eor	r24, r20
    2510:	8c 93       	st	X, r24
    2512:	2b c0       	rjmp	.+86     	; 0x256a <DIO_u8TogglePinValue+0x102>
	    case DIO_u8PORTC : TOGGLE_BIT(PORTC , Copy_u8pin_num); break;
    2514:	a5 e3       	ldi	r26, 0x35	; 53
    2516:	b0 e0       	ldi	r27, 0x00	; 0
    2518:	e5 e3       	ldi	r30, 0x35	; 53
    251a:	f0 e0       	ldi	r31, 0x00	; 0
    251c:	80 81       	ld	r24, Z
    251e:	48 2f       	mov	r20, r24
    2520:	8a 81       	ldd	r24, Y+2	; 0x02
    2522:	28 2f       	mov	r18, r24
    2524:	30 e0       	ldi	r19, 0x00	; 0
    2526:	81 e0       	ldi	r24, 0x01	; 1
    2528:	90 e0       	ldi	r25, 0x00	; 0
    252a:	02 2e       	mov	r0, r18
    252c:	02 c0       	rjmp	.+4      	; 0x2532 <DIO_u8TogglePinValue+0xca>
    252e:	88 0f       	add	r24, r24
    2530:	99 1f       	adc	r25, r25
    2532:	0a 94       	dec	r0
    2534:	e2 f7       	brpl	.-8      	; 0x252e <DIO_u8TogglePinValue+0xc6>
    2536:	84 27       	eor	r24, r20
    2538:	8c 93       	st	X, r24
    253a:	17 c0       	rjmp	.+46     	; 0x256a <DIO_u8TogglePinValue+0x102>
	    case DIO_u8PORTD : TOGGLE_BIT(PORTD , Copy_u8pin_num); break;
    253c:	a2 e3       	ldi	r26, 0x32	; 50
    253e:	b0 e0       	ldi	r27, 0x00	; 0
    2540:	e2 e3       	ldi	r30, 0x32	; 50
    2542:	f0 e0       	ldi	r31, 0x00	; 0
    2544:	80 81       	ld	r24, Z
    2546:	48 2f       	mov	r20, r24
    2548:	8a 81       	ldd	r24, Y+2	; 0x02
    254a:	28 2f       	mov	r18, r24
    254c:	30 e0       	ldi	r19, 0x00	; 0
    254e:	81 e0       	ldi	r24, 0x01	; 1
    2550:	90 e0       	ldi	r25, 0x00	; 0
    2552:	02 2e       	mov	r0, r18
    2554:	02 c0       	rjmp	.+4      	; 0x255a <DIO_u8TogglePinValue+0xf2>
    2556:	88 0f       	add	r24, r24
    2558:	99 1f       	adc	r25, r25
    255a:	0a 94       	dec	r0
    255c:	e2 f7       	brpl	.-8      	; 0x2556 <DIO_u8TogglePinValue+0xee>
    255e:	84 27       	eor	r24, r20
    2560:	8c 93       	st	X, r24
    2562:	03 c0       	rjmp	.+6      	; 0x256a <DIO_u8TogglePinValue+0x102>
	    default: return DIO_PORT;
    2564:	91 e0       	ldi	r25, 0x01	; 1
    2566:	9d 83       	std	Y+5, r25	; 0x05
    2568:	01 c0       	rjmp	.+2      	; 0x256c <DIO_u8TogglePinValue+0x104>
	}

	return DIO_OK;
    256a:	1d 82       	std	Y+5, r1	; 0x05
    256c:	8d 81       	ldd	r24, Y+5	; 0x05
}
    256e:	0f 90       	pop	r0
    2570:	0f 90       	pop	r0
    2572:	0f 90       	pop	r0
    2574:	0f 90       	pop	r0
    2576:	0f 90       	pop	r0
    2578:	cf 91       	pop	r28
    257a:	df 91       	pop	r29
    257c:	08 95       	ret

0000257e <CLCD_vInit>:
 */
#include "CLCD.h"
#include "CLCD_cfg.h"

void CLCD_vInit(void)
{
    257e:	df 93       	push	r29
    2580:	cf 93       	push	r28
    2582:	cd b7       	in	r28, 0x3d	; 61
    2584:	de b7       	in	r29, 0x3e	; 62
    2586:	2e 97       	sbiw	r28, 0x0e	; 14
    2588:	0f b6       	in	r0, 0x3f	; 63
    258a:	f8 94       	cli
    258c:	de bf       	out	0x3e, r29	; 62
    258e:	0f be       	out	0x3f, r0	; 63
    2590:	cd bf       	out	0x3d, r28	; 61

	DIO_u8SetPortDirection(CLCD_DATA_PORT,DIO_u8PORT_OUTPUT);
    2592:	80 e0       	ldi	r24, 0x00	; 0
    2594:	6f ef       	ldi	r22, 0xFF	; 255
    2596:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <DIO_u8SetPortDirection>
    259a:	80 e0       	ldi	r24, 0x00	; 0
    259c:	90 e0       	ldi	r25, 0x00	; 0
    259e:	a4 e3       	ldi	r26, 0x34	; 52
    25a0:	b2 e4       	ldi	r27, 0x42	; 66
    25a2:	8b 87       	std	Y+11, r24	; 0x0b
    25a4:	9c 87       	std	Y+12, r25	; 0x0c
    25a6:	ad 87       	std	Y+13, r26	; 0x0d
    25a8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25aa:	6b 85       	ldd	r22, Y+11	; 0x0b
    25ac:	7c 85       	ldd	r23, Y+12	; 0x0c
    25ae:	8d 85       	ldd	r24, Y+13	; 0x0d
    25b0:	9e 85       	ldd	r25, Y+14	; 0x0e
    25b2:	20 e0       	ldi	r18, 0x00	; 0
    25b4:	30 e0       	ldi	r19, 0x00	; 0
    25b6:	4a ef       	ldi	r20, 0xFA	; 250
    25b8:	54 e4       	ldi	r21, 0x44	; 68
    25ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25be:	dc 01       	movw	r26, r24
    25c0:	cb 01       	movw	r24, r22
    25c2:	8f 83       	std	Y+7, r24	; 0x07
    25c4:	98 87       	std	Y+8, r25	; 0x08
    25c6:	a9 87       	std	Y+9, r26	; 0x09
    25c8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    25ca:	6f 81       	ldd	r22, Y+7	; 0x07
    25cc:	78 85       	ldd	r23, Y+8	; 0x08
    25ce:	89 85       	ldd	r24, Y+9	; 0x09
    25d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    25d2:	20 e0       	ldi	r18, 0x00	; 0
    25d4:	30 e0       	ldi	r19, 0x00	; 0
    25d6:	40 e8       	ldi	r20, 0x80	; 128
    25d8:	5f e3       	ldi	r21, 0x3F	; 63
    25da:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    25de:	88 23       	and	r24, r24
    25e0:	2c f4       	brge	.+10     	; 0x25ec <CLCD_vInit+0x6e>
		__ticks = 1;
    25e2:	81 e0       	ldi	r24, 0x01	; 1
    25e4:	90 e0       	ldi	r25, 0x00	; 0
    25e6:	9e 83       	std	Y+6, r25	; 0x06
    25e8:	8d 83       	std	Y+5, r24	; 0x05
    25ea:	3f c0       	rjmp	.+126    	; 0x266a <CLCD_vInit+0xec>
	else if (__tmp > 65535)
    25ec:	6f 81       	ldd	r22, Y+7	; 0x07
    25ee:	78 85       	ldd	r23, Y+8	; 0x08
    25f0:	89 85       	ldd	r24, Y+9	; 0x09
    25f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    25f4:	20 e0       	ldi	r18, 0x00	; 0
    25f6:	3f ef       	ldi	r19, 0xFF	; 255
    25f8:	4f e7       	ldi	r20, 0x7F	; 127
    25fa:	57 e4       	ldi	r21, 0x47	; 71
    25fc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2600:	18 16       	cp	r1, r24
    2602:	4c f5       	brge	.+82     	; 0x2656 <CLCD_vInit+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2604:	6b 85       	ldd	r22, Y+11	; 0x0b
    2606:	7c 85       	ldd	r23, Y+12	; 0x0c
    2608:	8d 85       	ldd	r24, Y+13	; 0x0d
    260a:	9e 85       	ldd	r25, Y+14	; 0x0e
    260c:	20 e0       	ldi	r18, 0x00	; 0
    260e:	30 e0       	ldi	r19, 0x00	; 0
    2610:	40 e2       	ldi	r20, 0x20	; 32
    2612:	51 e4       	ldi	r21, 0x41	; 65
    2614:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2618:	dc 01       	movw	r26, r24
    261a:	cb 01       	movw	r24, r22
    261c:	bc 01       	movw	r22, r24
    261e:	cd 01       	movw	r24, r26
    2620:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2624:	dc 01       	movw	r26, r24
    2626:	cb 01       	movw	r24, r22
    2628:	9e 83       	std	Y+6, r25	; 0x06
    262a:	8d 83       	std	Y+5, r24	; 0x05
    262c:	0f c0       	rjmp	.+30     	; 0x264c <CLCD_vInit+0xce>
    262e:	88 ec       	ldi	r24, 0xC8	; 200
    2630:	90 e0       	ldi	r25, 0x00	; 0
    2632:	9c 83       	std	Y+4, r25	; 0x04
    2634:	8b 83       	std	Y+3, r24	; 0x03
    2636:	8b 81       	ldd	r24, Y+3	; 0x03
    2638:	9c 81       	ldd	r25, Y+4	; 0x04
    263a:	01 97       	sbiw	r24, 0x01	; 1
    263c:	f1 f7       	brne	.-4      	; 0x263a <CLCD_vInit+0xbc>
    263e:	9c 83       	std	Y+4, r25	; 0x04
    2640:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2642:	8d 81       	ldd	r24, Y+5	; 0x05
    2644:	9e 81       	ldd	r25, Y+6	; 0x06
    2646:	01 97       	sbiw	r24, 0x01	; 1
    2648:	9e 83       	std	Y+6, r25	; 0x06
    264a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    264c:	8d 81       	ldd	r24, Y+5	; 0x05
    264e:	9e 81       	ldd	r25, Y+6	; 0x06
    2650:	00 97       	sbiw	r24, 0x00	; 0
    2652:	69 f7       	brne	.-38     	; 0x262e <CLCD_vInit+0xb0>
    2654:	14 c0       	rjmp	.+40     	; 0x267e <CLCD_vInit+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2656:	6f 81       	ldd	r22, Y+7	; 0x07
    2658:	78 85       	ldd	r23, Y+8	; 0x08
    265a:	89 85       	ldd	r24, Y+9	; 0x09
    265c:	9a 85       	ldd	r25, Y+10	; 0x0a
    265e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2662:	dc 01       	movw	r26, r24
    2664:	cb 01       	movw	r24, r22
    2666:	9e 83       	std	Y+6, r25	; 0x06
    2668:	8d 83       	std	Y+5, r24	; 0x05
    266a:	8d 81       	ldd	r24, Y+5	; 0x05
    266c:	9e 81       	ldd	r25, Y+6	; 0x06
    266e:	9a 83       	std	Y+2, r25	; 0x02
    2670:	89 83       	std	Y+1, r24	; 0x01
    2672:	89 81       	ldd	r24, Y+1	; 0x01
    2674:	9a 81       	ldd	r25, Y+2	; 0x02
    2676:	01 97       	sbiw	r24, 0x01	; 1
    2678:	f1 f7       	brne	.-4      	; 0x2676 <CLCD_vInit+0xf8>
    267a:	9a 83       	std	Y+2, r25	; 0x02
    267c:	89 83       	std	Y+1, r24	; 0x01

	//clear display command
	CLCD_vSend_Command(0b00000001);

	#elif CLCD_MODE == CLCD_4BitMode
	CLCD_vSend_Command(0X03);
    267e:	83 e0       	ldi	r24, 0x03	; 3
    2680:	0e 94 5d 13 	call	0x26ba	; 0x26ba <CLCD_vSend_Command>

	//function set command
	CLCD_vSend_Command(0X02);
    2684:	82 e0       	ldi	r24, 0x02	; 2
    2686:	0e 94 5d 13 	call	0x26ba	; 0x26ba <CLCD_vSend_Command>
	CLCD_vSend_Command(0X28);
    268a:	88 e2       	ldi	r24, 0x28	; 40
    268c:	0e 94 5d 13 	call	0x26ba	; 0x26ba <CLCD_vSend_Command>

	//display on/off command display enable/ no cursor / blink off
	CLCD_vSend_Command(0X08);
    2690:	88 e0       	ldi	r24, 0x08	; 8
    2692:	0e 94 5d 13 	call	0x26ba	; 0x26ba <CLCD_vSend_Command>
	CLCD_vSend_Command(0X01);
    2696:	81 e0       	ldi	r24, 0x01	; 1
    2698:	0e 94 5d 13 	call	0x26ba	; 0x26ba <CLCD_vSend_Command>

	//clear display command
	CLCD_vSend_Command(0X06);
    269c:	86 e0       	ldi	r24, 0x06	; 6
    269e:	0e 94 5d 13 	call	0x26ba	; 0x26ba <CLCD_vSend_Command>
	CLCD_vSend_Command(0X0C);
    26a2:	8c e0       	ldi	r24, 0x0C	; 12
    26a4:	0e 94 5d 13 	call	0x26ba	; 0x26ba <CLCD_vSend_Command>

	#endif
}
    26a8:	2e 96       	adiw	r28, 0x0e	; 14
    26aa:	0f b6       	in	r0, 0x3f	; 63
    26ac:	f8 94       	cli
    26ae:	de bf       	out	0x3e, r29	; 62
    26b0:	0f be       	out	0x3f, r0	; 63
    26b2:	cd bf       	out	0x3d, r28	; 61
    26b4:	cf 91       	pop	r28
    26b6:	df 91       	pop	r29
    26b8:	08 95       	ret

000026ba <CLCD_vSend_Command>:

void CLCD_vSend_Command(u8 Copy_u8Command)
{
    26ba:	df 93       	push	r29
    26bc:	cf 93       	push	r28
    26be:	cd b7       	in	r28, 0x3d	; 61
    26c0:	de b7       	in	r29, 0x3e	; 62
    26c2:	c3 54       	subi	r28, 0x43	; 67
    26c4:	d0 40       	sbci	r29, 0x00	; 0
    26c6:	0f b6       	in	r0, 0x3f	; 63
    26c8:	f8 94       	cli
    26ca:	de bf       	out	0x3e, r29	; 62
    26cc:	0f be       	out	0x3f, r0	; 63
    26ce:	cd bf       	out	0x3d, r28	; 61
    26d0:	fe 01       	movw	r30, r28
    26d2:	ed 5b       	subi	r30, 0xBD	; 189
    26d4:	ff 4f       	sbci	r31, 0xFF	; 255
    26d6:	80 83       	st	Z, r24

	#elif CLCD_MODE == CLCD_4BitMode

	//send higher nibble of command to data pins

	DIO_u8SetPortValue(CLCD_DATA_PORT,Copy_u8Command&0XF0);
    26d8:	fe 01       	movw	r30, r28
    26da:	ed 5b       	subi	r30, 0xBD	; 189
    26dc:	ff 4f       	sbci	r31, 0xFF	; 255
    26de:	80 81       	ld	r24, Z
    26e0:	98 2f       	mov	r25, r24
    26e2:	90 7f       	andi	r25, 0xF0	; 240
    26e4:	80 e0       	ldi	r24, 0x00	; 0
    26e6:	69 2f       	mov	r22, r25
    26e8:	0e 94 56 11 	call	0x22ac	; 0x22ac <DIO_u8SetPortValue>
	//set RS low for command
	DIO_u8SetPinValue(CLCD_CONTROL_PORT,CLCD_RS_PIN,DIO_u8PIN_LOW);
    26ec:	80 e0       	ldi	r24, 0x00	; 0
    26ee:	60 e0       	ldi	r22, 0x00	; 0
    26f0:	40 e0       	ldi	r20, 0x00	; 0
    26f2:	0e 94 47 10 	call	0x208e	; 0x208e <DIO_u8SetPinValue>
	//set RW low for write
	DIO_u8SetPinValue(CLCD_CONTROL_PORT,CLCD_RW_PIN,DIO_u8PIN_LOW);
    26f6:	80 e0       	ldi	r24, 0x00	; 0
    26f8:	62 e0       	ldi	r22, 0x02	; 2
    26fa:	40 e0       	ldi	r20, 0x00	; 0
    26fc:	0e 94 47 10 	call	0x208e	; 0x208e <DIO_u8SetPinValue>


	//send enable pulse
	DIO_u8SetPinValue(CLCD_CONTROL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
    2700:	80 e0       	ldi	r24, 0x00	; 0
    2702:	61 e0       	ldi	r22, 0x01	; 1
    2704:	41 e0       	ldi	r20, 0x01	; 1
    2706:	0e 94 47 10 	call	0x208e	; 0x208e <DIO_u8SetPinValue>
    270a:	fe 01       	movw	r30, r28
    270c:	ff 96       	adiw	r30, 0x3f	; 63
    270e:	80 e0       	ldi	r24, 0x00	; 0
    2710:	90 e0       	ldi	r25, 0x00	; 0
    2712:	a0 e0       	ldi	r26, 0x00	; 0
    2714:	b0 e4       	ldi	r27, 0x40	; 64
    2716:	80 83       	st	Z, r24
    2718:	91 83       	std	Z+1, r25	; 0x01
    271a:	a2 83       	std	Z+2, r26	; 0x02
    271c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    271e:	fe 01       	movw	r30, r28
    2720:	ff 96       	adiw	r30, 0x3f	; 63
    2722:	60 81       	ld	r22, Z
    2724:	71 81       	ldd	r23, Z+1	; 0x01
    2726:	82 81       	ldd	r24, Z+2	; 0x02
    2728:	93 81       	ldd	r25, Z+3	; 0x03
    272a:	20 e0       	ldi	r18, 0x00	; 0
    272c:	30 e0       	ldi	r19, 0x00	; 0
    272e:	4a ef       	ldi	r20, 0xFA	; 250
    2730:	54 e4       	ldi	r21, 0x44	; 68
    2732:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2736:	dc 01       	movw	r26, r24
    2738:	cb 01       	movw	r24, r22
    273a:	8b af       	std	Y+59, r24	; 0x3b
    273c:	9c af       	std	Y+60, r25	; 0x3c
    273e:	ad af       	std	Y+61, r26	; 0x3d
    2740:	be af       	std	Y+62, r27	; 0x3e
	if (__tmp < 1.0)
    2742:	6b ad       	ldd	r22, Y+59	; 0x3b
    2744:	7c ad       	ldd	r23, Y+60	; 0x3c
    2746:	8d ad       	ldd	r24, Y+61	; 0x3d
    2748:	9e ad       	ldd	r25, Y+62	; 0x3e
    274a:	20 e0       	ldi	r18, 0x00	; 0
    274c:	30 e0       	ldi	r19, 0x00	; 0
    274e:	40 e8       	ldi	r20, 0x80	; 128
    2750:	5f e3       	ldi	r21, 0x3F	; 63
    2752:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2756:	88 23       	and	r24, r24
    2758:	2c f4       	brge	.+10     	; 0x2764 <CLCD_vSend_Command+0xaa>
		__ticks = 1;
    275a:	81 e0       	ldi	r24, 0x01	; 1
    275c:	90 e0       	ldi	r25, 0x00	; 0
    275e:	9a af       	std	Y+58, r25	; 0x3a
    2760:	89 af       	std	Y+57, r24	; 0x39
    2762:	41 c0       	rjmp	.+130    	; 0x27e6 <CLCD_vSend_Command+0x12c>
	else if (__tmp > 65535)
    2764:	6b ad       	ldd	r22, Y+59	; 0x3b
    2766:	7c ad       	ldd	r23, Y+60	; 0x3c
    2768:	8d ad       	ldd	r24, Y+61	; 0x3d
    276a:	9e ad       	ldd	r25, Y+62	; 0x3e
    276c:	20 e0       	ldi	r18, 0x00	; 0
    276e:	3f ef       	ldi	r19, 0xFF	; 255
    2770:	4f e7       	ldi	r20, 0x7F	; 127
    2772:	57 e4       	ldi	r21, 0x47	; 71
    2774:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2778:	18 16       	cp	r1, r24
    277a:	5c f5       	brge	.+86     	; 0x27d2 <CLCD_vSend_Command+0x118>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    277c:	fe 01       	movw	r30, r28
    277e:	ff 96       	adiw	r30, 0x3f	; 63
    2780:	60 81       	ld	r22, Z
    2782:	71 81       	ldd	r23, Z+1	; 0x01
    2784:	82 81       	ldd	r24, Z+2	; 0x02
    2786:	93 81       	ldd	r25, Z+3	; 0x03
    2788:	20 e0       	ldi	r18, 0x00	; 0
    278a:	30 e0       	ldi	r19, 0x00	; 0
    278c:	40 e2       	ldi	r20, 0x20	; 32
    278e:	51 e4       	ldi	r21, 0x41	; 65
    2790:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2794:	dc 01       	movw	r26, r24
    2796:	cb 01       	movw	r24, r22
    2798:	bc 01       	movw	r22, r24
    279a:	cd 01       	movw	r24, r26
    279c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27a0:	dc 01       	movw	r26, r24
    27a2:	cb 01       	movw	r24, r22
    27a4:	9a af       	std	Y+58, r25	; 0x3a
    27a6:	89 af       	std	Y+57, r24	; 0x39
    27a8:	0f c0       	rjmp	.+30     	; 0x27c8 <CLCD_vSend_Command+0x10e>
    27aa:	88 ec       	ldi	r24, 0xC8	; 200
    27ac:	90 e0       	ldi	r25, 0x00	; 0
    27ae:	98 af       	std	Y+56, r25	; 0x38
    27b0:	8f ab       	std	Y+55, r24	; 0x37
    27b2:	8f a9       	ldd	r24, Y+55	; 0x37
    27b4:	98 ad       	ldd	r25, Y+56	; 0x38
    27b6:	01 97       	sbiw	r24, 0x01	; 1
    27b8:	f1 f7       	brne	.-4      	; 0x27b6 <CLCD_vSend_Command+0xfc>
    27ba:	98 af       	std	Y+56, r25	; 0x38
    27bc:	8f ab       	std	Y+55, r24	; 0x37
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27be:	89 ad       	ldd	r24, Y+57	; 0x39
    27c0:	9a ad       	ldd	r25, Y+58	; 0x3a
    27c2:	01 97       	sbiw	r24, 0x01	; 1
    27c4:	9a af       	std	Y+58, r25	; 0x3a
    27c6:	89 af       	std	Y+57, r24	; 0x39
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27c8:	89 ad       	ldd	r24, Y+57	; 0x39
    27ca:	9a ad       	ldd	r25, Y+58	; 0x3a
    27cc:	00 97       	sbiw	r24, 0x00	; 0
    27ce:	69 f7       	brne	.-38     	; 0x27aa <CLCD_vSend_Command+0xf0>
    27d0:	14 c0       	rjmp	.+40     	; 0x27fa <CLCD_vSend_Command+0x140>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27d2:	6b ad       	ldd	r22, Y+59	; 0x3b
    27d4:	7c ad       	ldd	r23, Y+60	; 0x3c
    27d6:	8d ad       	ldd	r24, Y+61	; 0x3d
    27d8:	9e ad       	ldd	r25, Y+62	; 0x3e
    27da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27de:	dc 01       	movw	r26, r24
    27e0:	cb 01       	movw	r24, r22
    27e2:	9a af       	std	Y+58, r25	; 0x3a
    27e4:	89 af       	std	Y+57, r24	; 0x39
    27e6:	89 ad       	ldd	r24, Y+57	; 0x39
    27e8:	9a ad       	ldd	r25, Y+58	; 0x3a
    27ea:	9e ab       	std	Y+54, r25	; 0x36
    27ec:	8d ab       	std	Y+53, r24	; 0x35
    27ee:	8d a9       	ldd	r24, Y+53	; 0x35
    27f0:	9e a9       	ldd	r25, Y+54	; 0x36
    27f2:	01 97       	sbiw	r24, 0x01	; 1
    27f4:	f1 f7       	brne	.-4      	; 0x27f2 <CLCD_vSend_Command+0x138>
    27f6:	9e ab       	std	Y+54, r25	; 0x36
    27f8:	8d ab       	std	Y+53, r24	; 0x35
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CONTROL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
    27fa:	80 e0       	ldi	r24, 0x00	; 0
    27fc:	61 e0       	ldi	r22, 0x01	; 1
    27fe:	40 e0       	ldi	r20, 0x00	; 0
    2800:	0e 94 47 10 	call	0x208e	; 0x208e <DIO_u8SetPinValue>
    2804:	80 e0       	ldi	r24, 0x00	; 0
    2806:	90 e0       	ldi	r25, 0x00	; 0
    2808:	a8 e4       	ldi	r26, 0x48	; 72
    280a:	b3 e4       	ldi	r27, 0x43	; 67
    280c:	89 ab       	std	Y+49, r24	; 0x31
    280e:	9a ab       	std	Y+50, r25	; 0x32
    2810:	ab ab       	std	Y+51, r26	; 0x33
    2812:	bc ab       	std	Y+52, r27	; 0x34
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2814:	69 a9       	ldd	r22, Y+49	; 0x31
    2816:	7a a9       	ldd	r23, Y+50	; 0x32
    2818:	8b a9       	ldd	r24, Y+51	; 0x33
    281a:	9c a9       	ldd	r25, Y+52	; 0x34
    281c:	2b ea       	ldi	r18, 0xAB	; 171
    281e:	3a ea       	ldi	r19, 0xAA	; 170
    2820:	4a e2       	ldi	r20, 0x2A	; 42
    2822:	50 e4       	ldi	r21, 0x40	; 64
    2824:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2828:	dc 01       	movw	r26, r24
    282a:	cb 01       	movw	r24, r22
    282c:	8d a7       	std	Y+45, r24	; 0x2d
    282e:	9e a7       	std	Y+46, r25	; 0x2e
    2830:	af a7       	std	Y+47, r26	; 0x2f
    2832:	b8 ab       	std	Y+48, r27	; 0x30
	if (__tmp < 1.0)
    2834:	6d a5       	ldd	r22, Y+45	; 0x2d
    2836:	7e a5       	ldd	r23, Y+46	; 0x2e
    2838:	8f a5       	ldd	r24, Y+47	; 0x2f
    283a:	98 a9       	ldd	r25, Y+48	; 0x30
    283c:	20 e0       	ldi	r18, 0x00	; 0
    283e:	30 e0       	ldi	r19, 0x00	; 0
    2840:	40 e8       	ldi	r20, 0x80	; 128
    2842:	5f e3       	ldi	r21, 0x3F	; 63
    2844:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2848:	88 23       	and	r24, r24
    284a:	1c f4       	brge	.+6      	; 0x2852 <CLCD_vSend_Command+0x198>
		__ticks = 1;
    284c:	81 e0       	ldi	r24, 0x01	; 1
    284e:	8c a7       	std	Y+44, r24	; 0x2c
    2850:	91 c0       	rjmp	.+290    	; 0x2974 <CLCD_vSend_Command+0x2ba>
	else if (__tmp > 255)
    2852:	6d a5       	ldd	r22, Y+45	; 0x2d
    2854:	7e a5       	ldd	r23, Y+46	; 0x2e
    2856:	8f a5       	ldd	r24, Y+47	; 0x2f
    2858:	98 a9       	ldd	r25, Y+48	; 0x30
    285a:	20 e0       	ldi	r18, 0x00	; 0
    285c:	30 e0       	ldi	r19, 0x00	; 0
    285e:	4f e7       	ldi	r20, 0x7F	; 127
    2860:	53 e4       	ldi	r21, 0x43	; 67
    2862:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2866:	18 16       	cp	r1, r24
    2868:	0c f0       	brlt	.+2      	; 0x286c <CLCD_vSend_Command+0x1b2>
    286a:	7b c0       	rjmp	.+246    	; 0x2962 <CLCD_vSend_Command+0x2a8>
	{
		_delay_ms(__us / 1000.0);
    286c:	69 a9       	ldd	r22, Y+49	; 0x31
    286e:	7a a9       	ldd	r23, Y+50	; 0x32
    2870:	8b a9       	ldd	r24, Y+51	; 0x33
    2872:	9c a9       	ldd	r25, Y+52	; 0x34
    2874:	20 e0       	ldi	r18, 0x00	; 0
    2876:	30 e0       	ldi	r19, 0x00	; 0
    2878:	4a e7       	ldi	r20, 0x7A	; 122
    287a:	54 e4       	ldi	r21, 0x44	; 68
    287c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2880:	dc 01       	movw	r26, r24
    2882:	cb 01       	movw	r24, r22
    2884:	88 a7       	std	Y+40, r24	; 0x28
    2886:	99 a7       	std	Y+41, r25	; 0x29
    2888:	aa a7       	std	Y+42, r26	; 0x2a
    288a:	bb a7       	std	Y+43, r27	; 0x2b
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    288c:	68 a5       	ldd	r22, Y+40	; 0x28
    288e:	79 a5       	ldd	r23, Y+41	; 0x29
    2890:	8a a5       	ldd	r24, Y+42	; 0x2a
    2892:	9b a5       	ldd	r25, Y+43	; 0x2b
    2894:	20 e0       	ldi	r18, 0x00	; 0
    2896:	30 e0       	ldi	r19, 0x00	; 0
    2898:	4a ef       	ldi	r20, 0xFA	; 250
    289a:	54 e4       	ldi	r21, 0x44	; 68
    289c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28a0:	dc 01       	movw	r26, r24
    28a2:	cb 01       	movw	r24, r22
    28a4:	8c a3       	std	Y+36, r24	; 0x24
    28a6:	9d a3       	std	Y+37, r25	; 0x25
    28a8:	ae a3       	std	Y+38, r26	; 0x26
    28aa:	bf a3       	std	Y+39, r27	; 0x27
	if (__tmp < 1.0)
    28ac:	6c a1       	ldd	r22, Y+36	; 0x24
    28ae:	7d a1       	ldd	r23, Y+37	; 0x25
    28b0:	8e a1       	ldd	r24, Y+38	; 0x26
    28b2:	9f a1       	ldd	r25, Y+39	; 0x27
    28b4:	20 e0       	ldi	r18, 0x00	; 0
    28b6:	30 e0       	ldi	r19, 0x00	; 0
    28b8:	40 e8       	ldi	r20, 0x80	; 128
    28ba:	5f e3       	ldi	r21, 0x3F	; 63
    28bc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    28c0:	88 23       	and	r24, r24
    28c2:	2c f4       	brge	.+10     	; 0x28ce <CLCD_vSend_Command+0x214>
		__ticks = 1;
    28c4:	81 e0       	ldi	r24, 0x01	; 1
    28c6:	90 e0       	ldi	r25, 0x00	; 0
    28c8:	9b a3       	std	Y+35, r25	; 0x23
    28ca:	8a a3       	std	Y+34, r24	; 0x22
    28cc:	3f c0       	rjmp	.+126    	; 0x294c <CLCD_vSend_Command+0x292>
	else if (__tmp > 65535)
    28ce:	6c a1       	ldd	r22, Y+36	; 0x24
    28d0:	7d a1       	ldd	r23, Y+37	; 0x25
    28d2:	8e a1       	ldd	r24, Y+38	; 0x26
    28d4:	9f a1       	ldd	r25, Y+39	; 0x27
    28d6:	20 e0       	ldi	r18, 0x00	; 0
    28d8:	3f ef       	ldi	r19, 0xFF	; 255
    28da:	4f e7       	ldi	r20, 0x7F	; 127
    28dc:	57 e4       	ldi	r21, 0x47	; 71
    28de:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    28e2:	18 16       	cp	r1, r24
    28e4:	4c f5       	brge	.+82     	; 0x2938 <CLCD_vSend_Command+0x27e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28e6:	68 a5       	ldd	r22, Y+40	; 0x28
    28e8:	79 a5       	ldd	r23, Y+41	; 0x29
    28ea:	8a a5       	ldd	r24, Y+42	; 0x2a
    28ec:	9b a5       	ldd	r25, Y+43	; 0x2b
    28ee:	20 e0       	ldi	r18, 0x00	; 0
    28f0:	30 e0       	ldi	r19, 0x00	; 0
    28f2:	40 e2       	ldi	r20, 0x20	; 32
    28f4:	51 e4       	ldi	r21, 0x41	; 65
    28f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28fa:	dc 01       	movw	r26, r24
    28fc:	cb 01       	movw	r24, r22
    28fe:	bc 01       	movw	r22, r24
    2900:	cd 01       	movw	r24, r26
    2902:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2906:	dc 01       	movw	r26, r24
    2908:	cb 01       	movw	r24, r22
    290a:	9b a3       	std	Y+35, r25	; 0x23
    290c:	8a a3       	std	Y+34, r24	; 0x22
    290e:	0f c0       	rjmp	.+30     	; 0x292e <CLCD_vSend_Command+0x274>
    2910:	88 ec       	ldi	r24, 0xC8	; 200
    2912:	90 e0       	ldi	r25, 0x00	; 0
    2914:	99 a3       	std	Y+33, r25	; 0x21
    2916:	88 a3       	std	Y+32, r24	; 0x20
    2918:	88 a1       	ldd	r24, Y+32	; 0x20
    291a:	99 a1       	ldd	r25, Y+33	; 0x21
    291c:	01 97       	sbiw	r24, 0x01	; 1
    291e:	f1 f7       	brne	.-4      	; 0x291c <CLCD_vSend_Command+0x262>
    2920:	99 a3       	std	Y+33, r25	; 0x21
    2922:	88 a3       	std	Y+32, r24	; 0x20
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2924:	8a a1       	ldd	r24, Y+34	; 0x22
    2926:	9b a1       	ldd	r25, Y+35	; 0x23
    2928:	01 97       	sbiw	r24, 0x01	; 1
    292a:	9b a3       	std	Y+35, r25	; 0x23
    292c:	8a a3       	std	Y+34, r24	; 0x22
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    292e:	8a a1       	ldd	r24, Y+34	; 0x22
    2930:	9b a1       	ldd	r25, Y+35	; 0x23
    2932:	00 97       	sbiw	r24, 0x00	; 0
    2934:	69 f7       	brne	.-38     	; 0x2910 <CLCD_vSend_Command+0x256>
    2936:	24 c0       	rjmp	.+72     	; 0x2980 <CLCD_vSend_Command+0x2c6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2938:	6c a1       	ldd	r22, Y+36	; 0x24
    293a:	7d a1       	ldd	r23, Y+37	; 0x25
    293c:	8e a1       	ldd	r24, Y+38	; 0x26
    293e:	9f a1       	ldd	r25, Y+39	; 0x27
    2940:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2944:	dc 01       	movw	r26, r24
    2946:	cb 01       	movw	r24, r22
    2948:	9b a3       	std	Y+35, r25	; 0x23
    294a:	8a a3       	std	Y+34, r24	; 0x22
    294c:	8a a1       	ldd	r24, Y+34	; 0x22
    294e:	9b a1       	ldd	r25, Y+35	; 0x23
    2950:	9f 8f       	std	Y+31, r25	; 0x1f
    2952:	8e 8f       	std	Y+30, r24	; 0x1e
    2954:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2956:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2958:	01 97       	sbiw	r24, 0x01	; 1
    295a:	f1 f7       	brne	.-4      	; 0x2958 <CLCD_vSend_Command+0x29e>
    295c:	9f 8f       	std	Y+31, r25	; 0x1f
    295e:	8e 8f       	std	Y+30, r24	; 0x1e
    2960:	0f c0       	rjmp	.+30     	; 0x2980 <CLCD_vSend_Command+0x2c6>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2962:	6d a5       	ldd	r22, Y+45	; 0x2d
    2964:	7e a5       	ldd	r23, Y+46	; 0x2e
    2966:	8f a5       	ldd	r24, Y+47	; 0x2f
    2968:	98 a9       	ldd	r25, Y+48	; 0x30
    296a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    296e:	dc 01       	movw	r26, r24
    2970:	cb 01       	movw	r24, r22
    2972:	8c a7       	std	Y+44, r24	; 0x2c
    2974:	8c a5       	ldd	r24, Y+44	; 0x2c
    2976:	8d 8f       	std	Y+29, r24	; 0x1d
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2978:	8d 8d       	ldd	r24, Y+29	; 0x1d
    297a:	8a 95       	dec	r24
    297c:	f1 f7       	brne	.-4      	; 0x297a <CLCD_vSend_Command+0x2c0>
    297e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_us(200);
	//send lower nibble of command to data pins

	DIO_u8SetPortValue(CLCD_DATA_PORT,(Copy_u8Command<<4)&0XF0);
    2980:	fe 01       	movw	r30, r28
    2982:	ed 5b       	subi	r30, 0xBD	; 189
    2984:	ff 4f       	sbci	r31, 0xFF	; 255
    2986:	80 81       	ld	r24, Z
    2988:	88 2f       	mov	r24, r24
    298a:	90 e0       	ldi	r25, 0x00	; 0
    298c:	82 95       	swap	r24
    298e:	92 95       	swap	r25
    2990:	90 7f       	andi	r25, 0xF0	; 240
    2992:	98 27       	eor	r25, r24
    2994:	80 7f       	andi	r24, 0xF0	; 240
    2996:	98 27       	eor	r25, r24
    2998:	98 2f       	mov	r25, r24
    299a:	80 e0       	ldi	r24, 0x00	; 0
    299c:	69 2f       	mov	r22, r25
    299e:	0e 94 56 11 	call	0x22ac	; 0x22ac <DIO_u8SetPortValue>
	//set RS low for command
	DIO_u8SetPinValue(CLCD_CONTROL_PORT,CLCD_RS_PIN,DIO_u8PIN_LOW);
    29a2:	80 e0       	ldi	r24, 0x00	; 0
    29a4:	60 e0       	ldi	r22, 0x00	; 0
    29a6:	40 e0       	ldi	r20, 0x00	; 0
    29a8:	0e 94 47 10 	call	0x208e	; 0x208e <DIO_u8SetPinValue>
	//set RW low for write
	DIO_u8SetPinValue(CLCD_CONTROL_PORT,CLCD_RW_PIN,DIO_u8PIN_LOW);
    29ac:	80 e0       	ldi	r24, 0x00	; 0
    29ae:	62 e0       	ldi	r22, 0x02	; 2
    29b0:	40 e0       	ldi	r20, 0x00	; 0
    29b2:	0e 94 47 10 	call	0x208e	; 0x208e <DIO_u8SetPinValue>

	//send enable pulse
	DIO_u8SetPinValue(CLCD_CONTROL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
    29b6:	80 e0       	ldi	r24, 0x00	; 0
    29b8:	61 e0       	ldi	r22, 0x01	; 1
    29ba:	41 e0       	ldi	r20, 0x01	; 1
    29bc:	0e 94 47 10 	call	0x208e	; 0x208e <DIO_u8SetPinValue>
    29c0:	80 e0       	ldi	r24, 0x00	; 0
    29c2:	90 e0       	ldi	r25, 0x00	; 0
    29c4:	a0 e0       	ldi	r26, 0x00	; 0
    29c6:	b0 e4       	ldi	r27, 0x40	; 64
    29c8:	89 8f       	std	Y+25, r24	; 0x19
    29ca:	9a 8f       	std	Y+26, r25	; 0x1a
    29cc:	ab 8f       	std	Y+27, r26	; 0x1b
    29ce:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29d0:	69 8d       	ldd	r22, Y+25	; 0x19
    29d2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    29d4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    29d6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    29d8:	20 e0       	ldi	r18, 0x00	; 0
    29da:	30 e0       	ldi	r19, 0x00	; 0
    29dc:	4a ef       	ldi	r20, 0xFA	; 250
    29de:	54 e4       	ldi	r21, 0x44	; 68
    29e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29e4:	dc 01       	movw	r26, r24
    29e6:	cb 01       	movw	r24, r22
    29e8:	8d 8b       	std	Y+21, r24	; 0x15
    29ea:	9e 8b       	std	Y+22, r25	; 0x16
    29ec:	af 8b       	std	Y+23, r26	; 0x17
    29ee:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    29f0:	6d 89       	ldd	r22, Y+21	; 0x15
    29f2:	7e 89       	ldd	r23, Y+22	; 0x16
    29f4:	8f 89       	ldd	r24, Y+23	; 0x17
    29f6:	98 8d       	ldd	r25, Y+24	; 0x18
    29f8:	20 e0       	ldi	r18, 0x00	; 0
    29fa:	30 e0       	ldi	r19, 0x00	; 0
    29fc:	40 e8       	ldi	r20, 0x80	; 128
    29fe:	5f e3       	ldi	r21, 0x3F	; 63
    2a00:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a04:	88 23       	and	r24, r24
    2a06:	2c f4       	brge	.+10     	; 0x2a12 <CLCD_vSend_Command+0x358>
		__ticks = 1;
    2a08:	81 e0       	ldi	r24, 0x01	; 1
    2a0a:	90 e0       	ldi	r25, 0x00	; 0
    2a0c:	9c 8b       	std	Y+20, r25	; 0x14
    2a0e:	8b 8b       	std	Y+19, r24	; 0x13
    2a10:	3f c0       	rjmp	.+126    	; 0x2a90 <CLCD_vSend_Command+0x3d6>
	else if (__tmp > 65535)
    2a12:	6d 89       	ldd	r22, Y+21	; 0x15
    2a14:	7e 89       	ldd	r23, Y+22	; 0x16
    2a16:	8f 89       	ldd	r24, Y+23	; 0x17
    2a18:	98 8d       	ldd	r25, Y+24	; 0x18
    2a1a:	20 e0       	ldi	r18, 0x00	; 0
    2a1c:	3f ef       	ldi	r19, 0xFF	; 255
    2a1e:	4f e7       	ldi	r20, 0x7F	; 127
    2a20:	57 e4       	ldi	r21, 0x47	; 71
    2a22:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a26:	18 16       	cp	r1, r24
    2a28:	4c f5       	brge	.+82     	; 0x2a7c <CLCD_vSend_Command+0x3c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a2a:	69 8d       	ldd	r22, Y+25	; 0x19
    2a2c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a2e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a30:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a32:	20 e0       	ldi	r18, 0x00	; 0
    2a34:	30 e0       	ldi	r19, 0x00	; 0
    2a36:	40 e2       	ldi	r20, 0x20	; 32
    2a38:	51 e4       	ldi	r21, 0x41	; 65
    2a3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a3e:	dc 01       	movw	r26, r24
    2a40:	cb 01       	movw	r24, r22
    2a42:	bc 01       	movw	r22, r24
    2a44:	cd 01       	movw	r24, r26
    2a46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a4a:	dc 01       	movw	r26, r24
    2a4c:	cb 01       	movw	r24, r22
    2a4e:	9c 8b       	std	Y+20, r25	; 0x14
    2a50:	8b 8b       	std	Y+19, r24	; 0x13
    2a52:	0f c0       	rjmp	.+30     	; 0x2a72 <CLCD_vSend_Command+0x3b8>
    2a54:	88 ec       	ldi	r24, 0xC8	; 200
    2a56:	90 e0       	ldi	r25, 0x00	; 0
    2a58:	9a 8b       	std	Y+18, r25	; 0x12
    2a5a:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2a5c:	89 89       	ldd	r24, Y+17	; 0x11
    2a5e:	9a 89       	ldd	r25, Y+18	; 0x12
    2a60:	01 97       	sbiw	r24, 0x01	; 1
    2a62:	f1 f7       	brne	.-4      	; 0x2a60 <CLCD_vSend_Command+0x3a6>
    2a64:	9a 8b       	std	Y+18, r25	; 0x12
    2a66:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a68:	8b 89       	ldd	r24, Y+19	; 0x13
    2a6a:	9c 89       	ldd	r25, Y+20	; 0x14
    2a6c:	01 97       	sbiw	r24, 0x01	; 1
    2a6e:	9c 8b       	std	Y+20, r25	; 0x14
    2a70:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a72:	8b 89       	ldd	r24, Y+19	; 0x13
    2a74:	9c 89       	ldd	r25, Y+20	; 0x14
    2a76:	00 97       	sbiw	r24, 0x00	; 0
    2a78:	69 f7       	brne	.-38     	; 0x2a54 <CLCD_vSend_Command+0x39a>
    2a7a:	14 c0       	rjmp	.+40     	; 0x2aa4 <CLCD_vSend_Command+0x3ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a7c:	6d 89       	ldd	r22, Y+21	; 0x15
    2a7e:	7e 89       	ldd	r23, Y+22	; 0x16
    2a80:	8f 89       	ldd	r24, Y+23	; 0x17
    2a82:	98 8d       	ldd	r25, Y+24	; 0x18
    2a84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a88:	dc 01       	movw	r26, r24
    2a8a:	cb 01       	movw	r24, r22
    2a8c:	9c 8b       	std	Y+20, r25	; 0x14
    2a8e:	8b 8b       	std	Y+19, r24	; 0x13
    2a90:	8b 89       	ldd	r24, Y+19	; 0x13
    2a92:	9c 89       	ldd	r25, Y+20	; 0x14
    2a94:	98 8b       	std	Y+16, r25	; 0x10
    2a96:	8f 87       	std	Y+15, r24	; 0x0f
    2a98:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a9a:	98 89       	ldd	r25, Y+16	; 0x10
    2a9c:	01 97       	sbiw	r24, 0x01	; 1
    2a9e:	f1 f7       	brne	.-4      	; 0x2a9c <CLCD_vSend_Command+0x3e2>
    2aa0:	98 8b       	std	Y+16, r25	; 0x10
    2aa2:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CONTROL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
    2aa4:	80 e0       	ldi	r24, 0x00	; 0
    2aa6:	61 e0       	ldi	r22, 0x01	; 1
    2aa8:	40 e0       	ldi	r20, 0x00	; 0
    2aaa:	0e 94 47 10 	call	0x208e	; 0x208e <DIO_u8SetPinValue>
    2aae:	80 e0       	ldi	r24, 0x00	; 0
    2ab0:	90 e0       	ldi	r25, 0x00	; 0
    2ab2:	a0 e0       	ldi	r26, 0x00	; 0
    2ab4:	b0 e4       	ldi	r27, 0x40	; 64
    2ab6:	8b 87       	std	Y+11, r24	; 0x0b
    2ab8:	9c 87       	std	Y+12, r25	; 0x0c
    2aba:	ad 87       	std	Y+13, r26	; 0x0d
    2abc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2abe:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ac0:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ac2:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ac4:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ac6:	20 e0       	ldi	r18, 0x00	; 0
    2ac8:	30 e0       	ldi	r19, 0x00	; 0
    2aca:	4a ef       	ldi	r20, 0xFA	; 250
    2acc:	54 e4       	ldi	r21, 0x44	; 68
    2ace:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ad2:	dc 01       	movw	r26, r24
    2ad4:	cb 01       	movw	r24, r22
    2ad6:	8f 83       	std	Y+7, r24	; 0x07
    2ad8:	98 87       	std	Y+8, r25	; 0x08
    2ada:	a9 87       	std	Y+9, r26	; 0x09
    2adc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2ade:	6f 81       	ldd	r22, Y+7	; 0x07
    2ae0:	78 85       	ldd	r23, Y+8	; 0x08
    2ae2:	89 85       	ldd	r24, Y+9	; 0x09
    2ae4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ae6:	20 e0       	ldi	r18, 0x00	; 0
    2ae8:	30 e0       	ldi	r19, 0x00	; 0
    2aea:	40 e8       	ldi	r20, 0x80	; 128
    2aec:	5f e3       	ldi	r21, 0x3F	; 63
    2aee:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2af2:	88 23       	and	r24, r24
    2af4:	2c f4       	brge	.+10     	; 0x2b00 <CLCD_vSend_Command+0x446>
		__ticks = 1;
    2af6:	81 e0       	ldi	r24, 0x01	; 1
    2af8:	90 e0       	ldi	r25, 0x00	; 0
    2afa:	9e 83       	std	Y+6, r25	; 0x06
    2afc:	8d 83       	std	Y+5, r24	; 0x05
    2afe:	3f c0       	rjmp	.+126    	; 0x2b7e <CLCD_vSend_Command+0x4c4>
	else if (__tmp > 65535)
    2b00:	6f 81       	ldd	r22, Y+7	; 0x07
    2b02:	78 85       	ldd	r23, Y+8	; 0x08
    2b04:	89 85       	ldd	r24, Y+9	; 0x09
    2b06:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b08:	20 e0       	ldi	r18, 0x00	; 0
    2b0a:	3f ef       	ldi	r19, 0xFF	; 255
    2b0c:	4f e7       	ldi	r20, 0x7F	; 127
    2b0e:	57 e4       	ldi	r21, 0x47	; 71
    2b10:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b14:	18 16       	cp	r1, r24
    2b16:	4c f5       	brge	.+82     	; 0x2b6a <CLCD_vSend_Command+0x4b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b18:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b1a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b1c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b1e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b20:	20 e0       	ldi	r18, 0x00	; 0
    2b22:	30 e0       	ldi	r19, 0x00	; 0
    2b24:	40 e2       	ldi	r20, 0x20	; 32
    2b26:	51 e4       	ldi	r21, 0x41	; 65
    2b28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b2c:	dc 01       	movw	r26, r24
    2b2e:	cb 01       	movw	r24, r22
    2b30:	bc 01       	movw	r22, r24
    2b32:	cd 01       	movw	r24, r26
    2b34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b38:	dc 01       	movw	r26, r24
    2b3a:	cb 01       	movw	r24, r22
    2b3c:	9e 83       	std	Y+6, r25	; 0x06
    2b3e:	8d 83       	std	Y+5, r24	; 0x05
    2b40:	0f c0       	rjmp	.+30     	; 0x2b60 <CLCD_vSend_Command+0x4a6>
    2b42:	88 ec       	ldi	r24, 0xC8	; 200
    2b44:	90 e0       	ldi	r25, 0x00	; 0
    2b46:	9c 83       	std	Y+4, r25	; 0x04
    2b48:	8b 83       	std	Y+3, r24	; 0x03
    2b4a:	8b 81       	ldd	r24, Y+3	; 0x03
    2b4c:	9c 81       	ldd	r25, Y+4	; 0x04
    2b4e:	01 97       	sbiw	r24, 0x01	; 1
    2b50:	f1 f7       	brne	.-4      	; 0x2b4e <CLCD_vSend_Command+0x494>
    2b52:	9c 83       	std	Y+4, r25	; 0x04
    2b54:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b56:	8d 81       	ldd	r24, Y+5	; 0x05
    2b58:	9e 81       	ldd	r25, Y+6	; 0x06
    2b5a:	01 97       	sbiw	r24, 0x01	; 1
    2b5c:	9e 83       	std	Y+6, r25	; 0x06
    2b5e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b60:	8d 81       	ldd	r24, Y+5	; 0x05
    2b62:	9e 81       	ldd	r25, Y+6	; 0x06
    2b64:	00 97       	sbiw	r24, 0x00	; 0
    2b66:	69 f7       	brne	.-38     	; 0x2b42 <CLCD_vSend_Command+0x488>
    2b68:	14 c0       	rjmp	.+40     	; 0x2b92 <CLCD_vSend_Command+0x4d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b6a:	6f 81       	ldd	r22, Y+7	; 0x07
    2b6c:	78 85       	ldd	r23, Y+8	; 0x08
    2b6e:	89 85       	ldd	r24, Y+9	; 0x09
    2b70:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b76:	dc 01       	movw	r26, r24
    2b78:	cb 01       	movw	r24, r22
    2b7a:	9e 83       	std	Y+6, r25	; 0x06
    2b7c:	8d 83       	std	Y+5, r24	; 0x05
    2b7e:	8d 81       	ldd	r24, Y+5	; 0x05
    2b80:	9e 81       	ldd	r25, Y+6	; 0x06
    2b82:	9a 83       	std	Y+2, r25	; 0x02
    2b84:	89 83       	std	Y+1, r24	; 0x01
    2b86:	89 81       	ldd	r24, Y+1	; 0x01
    2b88:	9a 81       	ldd	r25, Y+2	; 0x02
    2b8a:	01 97       	sbiw	r24, 0x01	; 1
    2b8c:	f1 f7       	brne	.-4      	; 0x2b8a <CLCD_vSend_Command+0x4d0>
    2b8e:	9a 83       	std	Y+2, r25	; 0x02
    2b90:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	#endif



}
    2b92:	cd 5b       	subi	r28, 0xBD	; 189
    2b94:	df 4f       	sbci	r29, 0xFF	; 255
    2b96:	0f b6       	in	r0, 0x3f	; 63
    2b98:	f8 94       	cli
    2b9a:	de bf       	out	0x3e, r29	; 62
    2b9c:	0f be       	out	0x3f, r0	; 63
    2b9e:	cd bf       	out	0x3d, r28	; 61
    2ba0:	cf 91       	pop	r28
    2ba2:	df 91       	pop	r29
    2ba4:	08 95       	ret

00002ba6 <CLCD_vSend_Data>:
void CLCD_vSend_Data(u8 Copy_u8Data)
{
    2ba6:	df 93       	push	r29
    2ba8:	cf 93       	push	r28
    2baa:	cd b7       	in	r28, 0x3d	; 61
    2bac:	de b7       	in	r29, 0x3e	; 62
    2bae:	ab 97       	sbiw	r28, 0x2b	; 43
    2bb0:	0f b6       	in	r0, 0x3f	; 63
    2bb2:	f8 94       	cli
    2bb4:	de bf       	out	0x3e, r29	; 62
    2bb6:	0f be       	out	0x3f, r0	; 63
    2bb8:	cd bf       	out	0x3d, r28	; 61
    2bba:	8b a7       	std	Y+43, r24	; 0x2b

	#elif CLCD_MODE == CLCD_4BitMode

	//send higher nibble of command to data pins

	DIO_u8SetPortValue(CLCD_DATA_PORT,Copy_u8Data&0XF0);
    2bbc:	8b a5       	ldd	r24, Y+43	; 0x2b
    2bbe:	98 2f       	mov	r25, r24
    2bc0:	90 7f       	andi	r25, 0xF0	; 240
    2bc2:	80 e0       	ldi	r24, 0x00	; 0
    2bc4:	69 2f       	mov	r22, r25
    2bc6:	0e 94 56 11 	call	0x22ac	; 0x22ac <DIO_u8SetPortValue>
	//set RS high for data
	DIO_u8SetPinValue(CLCD_CONTROL_PORT,CLCD_RS_PIN,DIO_u8PIN_HIGH);
    2bca:	80 e0       	ldi	r24, 0x00	; 0
    2bcc:	60 e0       	ldi	r22, 0x00	; 0
    2bce:	41 e0       	ldi	r20, 0x01	; 1
    2bd0:	0e 94 47 10 	call	0x208e	; 0x208e <DIO_u8SetPinValue>
	//set RW low for write
	DIO_u8SetPinValue(CLCD_CONTROL_PORT,CLCD_RW_PIN,DIO_u8PIN_LOW);
    2bd4:	80 e0       	ldi	r24, 0x00	; 0
    2bd6:	62 e0       	ldi	r22, 0x02	; 2
    2bd8:	40 e0       	ldi	r20, 0x00	; 0
    2bda:	0e 94 47 10 	call	0x208e	; 0x208e <DIO_u8SetPinValue>


	//send enable pulse
	DIO_u8SetPinValue(CLCD_CONTROL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
    2bde:	80 e0       	ldi	r24, 0x00	; 0
    2be0:	61 e0       	ldi	r22, 0x01	; 1
    2be2:	41 e0       	ldi	r20, 0x01	; 1
    2be4:	0e 94 47 10 	call	0x208e	; 0x208e <DIO_u8SetPinValue>
    2be8:	80 e0       	ldi	r24, 0x00	; 0
    2bea:	90 e0       	ldi	r25, 0x00	; 0
    2bec:	a0 e0       	ldi	r26, 0x00	; 0
    2bee:	b0 e4       	ldi	r27, 0x40	; 64
    2bf0:	8f a3       	std	Y+39, r24	; 0x27
    2bf2:	98 a7       	std	Y+40, r25	; 0x28
    2bf4:	a9 a7       	std	Y+41, r26	; 0x29
    2bf6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bf8:	6f a1       	ldd	r22, Y+39	; 0x27
    2bfa:	78 a5       	ldd	r23, Y+40	; 0x28
    2bfc:	89 a5       	ldd	r24, Y+41	; 0x29
    2bfe:	9a a5       	ldd	r25, Y+42	; 0x2a
    2c00:	20 e0       	ldi	r18, 0x00	; 0
    2c02:	30 e0       	ldi	r19, 0x00	; 0
    2c04:	4a ef       	ldi	r20, 0xFA	; 250
    2c06:	54 e4       	ldi	r21, 0x44	; 68
    2c08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c0c:	dc 01       	movw	r26, r24
    2c0e:	cb 01       	movw	r24, r22
    2c10:	8b a3       	std	Y+35, r24	; 0x23
    2c12:	9c a3       	std	Y+36, r25	; 0x24
    2c14:	ad a3       	std	Y+37, r26	; 0x25
    2c16:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2c18:	6b a1       	ldd	r22, Y+35	; 0x23
    2c1a:	7c a1       	ldd	r23, Y+36	; 0x24
    2c1c:	8d a1       	ldd	r24, Y+37	; 0x25
    2c1e:	9e a1       	ldd	r25, Y+38	; 0x26
    2c20:	20 e0       	ldi	r18, 0x00	; 0
    2c22:	30 e0       	ldi	r19, 0x00	; 0
    2c24:	40 e8       	ldi	r20, 0x80	; 128
    2c26:	5f e3       	ldi	r21, 0x3F	; 63
    2c28:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c2c:	88 23       	and	r24, r24
    2c2e:	2c f4       	brge	.+10     	; 0x2c3a <CLCD_vSend_Data+0x94>
		__ticks = 1;
    2c30:	81 e0       	ldi	r24, 0x01	; 1
    2c32:	90 e0       	ldi	r25, 0x00	; 0
    2c34:	9a a3       	std	Y+34, r25	; 0x22
    2c36:	89 a3       	std	Y+33, r24	; 0x21
    2c38:	3f c0       	rjmp	.+126    	; 0x2cb8 <CLCD_vSend_Data+0x112>
	else if (__tmp > 65535)
    2c3a:	6b a1       	ldd	r22, Y+35	; 0x23
    2c3c:	7c a1       	ldd	r23, Y+36	; 0x24
    2c3e:	8d a1       	ldd	r24, Y+37	; 0x25
    2c40:	9e a1       	ldd	r25, Y+38	; 0x26
    2c42:	20 e0       	ldi	r18, 0x00	; 0
    2c44:	3f ef       	ldi	r19, 0xFF	; 255
    2c46:	4f e7       	ldi	r20, 0x7F	; 127
    2c48:	57 e4       	ldi	r21, 0x47	; 71
    2c4a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c4e:	18 16       	cp	r1, r24
    2c50:	4c f5       	brge	.+82     	; 0x2ca4 <CLCD_vSend_Data+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c52:	6f a1       	ldd	r22, Y+39	; 0x27
    2c54:	78 a5       	ldd	r23, Y+40	; 0x28
    2c56:	89 a5       	ldd	r24, Y+41	; 0x29
    2c58:	9a a5       	ldd	r25, Y+42	; 0x2a
    2c5a:	20 e0       	ldi	r18, 0x00	; 0
    2c5c:	30 e0       	ldi	r19, 0x00	; 0
    2c5e:	40 e2       	ldi	r20, 0x20	; 32
    2c60:	51 e4       	ldi	r21, 0x41	; 65
    2c62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c66:	dc 01       	movw	r26, r24
    2c68:	cb 01       	movw	r24, r22
    2c6a:	bc 01       	movw	r22, r24
    2c6c:	cd 01       	movw	r24, r26
    2c6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c72:	dc 01       	movw	r26, r24
    2c74:	cb 01       	movw	r24, r22
    2c76:	9a a3       	std	Y+34, r25	; 0x22
    2c78:	89 a3       	std	Y+33, r24	; 0x21
    2c7a:	0f c0       	rjmp	.+30     	; 0x2c9a <CLCD_vSend_Data+0xf4>
    2c7c:	88 ec       	ldi	r24, 0xC8	; 200
    2c7e:	90 e0       	ldi	r25, 0x00	; 0
    2c80:	98 a3       	std	Y+32, r25	; 0x20
    2c82:	8f 8f       	std	Y+31, r24	; 0x1f
    2c84:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2c86:	98 a1       	ldd	r25, Y+32	; 0x20
    2c88:	01 97       	sbiw	r24, 0x01	; 1
    2c8a:	f1 f7       	brne	.-4      	; 0x2c88 <CLCD_vSend_Data+0xe2>
    2c8c:	98 a3       	std	Y+32, r25	; 0x20
    2c8e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c90:	89 a1       	ldd	r24, Y+33	; 0x21
    2c92:	9a a1       	ldd	r25, Y+34	; 0x22
    2c94:	01 97       	sbiw	r24, 0x01	; 1
    2c96:	9a a3       	std	Y+34, r25	; 0x22
    2c98:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c9a:	89 a1       	ldd	r24, Y+33	; 0x21
    2c9c:	9a a1       	ldd	r25, Y+34	; 0x22
    2c9e:	00 97       	sbiw	r24, 0x00	; 0
    2ca0:	69 f7       	brne	.-38     	; 0x2c7c <CLCD_vSend_Data+0xd6>
    2ca2:	14 c0       	rjmp	.+40     	; 0x2ccc <CLCD_vSend_Data+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ca4:	6b a1       	ldd	r22, Y+35	; 0x23
    2ca6:	7c a1       	ldd	r23, Y+36	; 0x24
    2ca8:	8d a1       	ldd	r24, Y+37	; 0x25
    2caa:	9e a1       	ldd	r25, Y+38	; 0x26
    2cac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cb0:	dc 01       	movw	r26, r24
    2cb2:	cb 01       	movw	r24, r22
    2cb4:	9a a3       	std	Y+34, r25	; 0x22
    2cb6:	89 a3       	std	Y+33, r24	; 0x21
    2cb8:	89 a1       	ldd	r24, Y+33	; 0x21
    2cba:	9a a1       	ldd	r25, Y+34	; 0x22
    2cbc:	9e 8f       	std	Y+30, r25	; 0x1e
    2cbe:	8d 8f       	std	Y+29, r24	; 0x1d
    2cc0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2cc2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2cc4:	01 97       	sbiw	r24, 0x01	; 1
    2cc6:	f1 f7       	brne	.-4      	; 0x2cc4 <CLCD_vSend_Data+0x11e>
    2cc8:	9e 8f       	std	Y+30, r25	; 0x1e
    2cca:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CONTROL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
    2ccc:	80 e0       	ldi	r24, 0x00	; 0
    2cce:	61 e0       	ldi	r22, 0x01	; 1
    2cd0:	40 e0       	ldi	r20, 0x00	; 0
    2cd2:	0e 94 47 10 	call	0x208e	; 0x208e <DIO_u8SetPinValue>

	//send lower nibble of command to data pins

	DIO_u8SetPortValue(CLCD_DATA_PORT,(Copy_u8Data<<4)&0XF0);
    2cd6:	8b a5       	ldd	r24, Y+43	; 0x2b
    2cd8:	88 2f       	mov	r24, r24
    2cda:	90 e0       	ldi	r25, 0x00	; 0
    2cdc:	82 95       	swap	r24
    2cde:	92 95       	swap	r25
    2ce0:	90 7f       	andi	r25, 0xF0	; 240
    2ce2:	98 27       	eor	r25, r24
    2ce4:	80 7f       	andi	r24, 0xF0	; 240
    2ce6:	98 27       	eor	r25, r24
    2ce8:	98 2f       	mov	r25, r24
    2cea:	80 e0       	ldi	r24, 0x00	; 0
    2cec:	69 2f       	mov	r22, r25
    2cee:	0e 94 56 11 	call	0x22ac	; 0x22ac <DIO_u8SetPortValue>
	//set RS high for data
	DIO_u8SetPinValue(CLCD_CONTROL_PORT,CLCD_RS_PIN,DIO_u8PIN_HIGH);
    2cf2:	80 e0       	ldi	r24, 0x00	; 0
    2cf4:	60 e0       	ldi	r22, 0x00	; 0
    2cf6:	41 e0       	ldi	r20, 0x01	; 1
    2cf8:	0e 94 47 10 	call	0x208e	; 0x208e <DIO_u8SetPinValue>
	//set RW low for write
	DIO_u8SetPinValue(CLCD_CONTROL_PORT,CLCD_RW_PIN,DIO_u8PIN_LOW);
    2cfc:	80 e0       	ldi	r24, 0x00	; 0
    2cfe:	62 e0       	ldi	r22, 0x02	; 2
    2d00:	40 e0       	ldi	r20, 0x00	; 0
    2d02:	0e 94 47 10 	call	0x208e	; 0x208e <DIO_u8SetPinValue>



	//send enable pulse
	DIO_u8SetPinValue(CLCD_CONTROL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
    2d06:	80 e0       	ldi	r24, 0x00	; 0
    2d08:	61 e0       	ldi	r22, 0x01	; 1
    2d0a:	41 e0       	ldi	r20, 0x01	; 1
    2d0c:	0e 94 47 10 	call	0x208e	; 0x208e <DIO_u8SetPinValue>
    2d10:	80 e0       	ldi	r24, 0x00	; 0
    2d12:	90 e0       	ldi	r25, 0x00	; 0
    2d14:	a0 e0       	ldi	r26, 0x00	; 0
    2d16:	b0 e4       	ldi	r27, 0x40	; 64
    2d18:	89 8f       	std	Y+25, r24	; 0x19
    2d1a:	9a 8f       	std	Y+26, r25	; 0x1a
    2d1c:	ab 8f       	std	Y+27, r26	; 0x1b
    2d1e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d20:	69 8d       	ldd	r22, Y+25	; 0x19
    2d22:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2d24:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d26:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d28:	20 e0       	ldi	r18, 0x00	; 0
    2d2a:	30 e0       	ldi	r19, 0x00	; 0
    2d2c:	4a ef       	ldi	r20, 0xFA	; 250
    2d2e:	54 e4       	ldi	r21, 0x44	; 68
    2d30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d34:	dc 01       	movw	r26, r24
    2d36:	cb 01       	movw	r24, r22
    2d38:	8d 8b       	std	Y+21, r24	; 0x15
    2d3a:	9e 8b       	std	Y+22, r25	; 0x16
    2d3c:	af 8b       	std	Y+23, r26	; 0x17
    2d3e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2d40:	6d 89       	ldd	r22, Y+21	; 0x15
    2d42:	7e 89       	ldd	r23, Y+22	; 0x16
    2d44:	8f 89       	ldd	r24, Y+23	; 0x17
    2d46:	98 8d       	ldd	r25, Y+24	; 0x18
    2d48:	20 e0       	ldi	r18, 0x00	; 0
    2d4a:	30 e0       	ldi	r19, 0x00	; 0
    2d4c:	40 e8       	ldi	r20, 0x80	; 128
    2d4e:	5f e3       	ldi	r21, 0x3F	; 63
    2d50:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d54:	88 23       	and	r24, r24
    2d56:	2c f4       	brge	.+10     	; 0x2d62 <CLCD_vSend_Data+0x1bc>
		__ticks = 1;
    2d58:	81 e0       	ldi	r24, 0x01	; 1
    2d5a:	90 e0       	ldi	r25, 0x00	; 0
    2d5c:	9c 8b       	std	Y+20, r25	; 0x14
    2d5e:	8b 8b       	std	Y+19, r24	; 0x13
    2d60:	3f c0       	rjmp	.+126    	; 0x2de0 <CLCD_vSend_Data+0x23a>
	else if (__tmp > 65535)
    2d62:	6d 89       	ldd	r22, Y+21	; 0x15
    2d64:	7e 89       	ldd	r23, Y+22	; 0x16
    2d66:	8f 89       	ldd	r24, Y+23	; 0x17
    2d68:	98 8d       	ldd	r25, Y+24	; 0x18
    2d6a:	20 e0       	ldi	r18, 0x00	; 0
    2d6c:	3f ef       	ldi	r19, 0xFF	; 255
    2d6e:	4f e7       	ldi	r20, 0x7F	; 127
    2d70:	57 e4       	ldi	r21, 0x47	; 71
    2d72:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d76:	18 16       	cp	r1, r24
    2d78:	4c f5       	brge	.+82     	; 0x2dcc <CLCD_vSend_Data+0x226>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d7a:	69 8d       	ldd	r22, Y+25	; 0x19
    2d7c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2d7e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d80:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d82:	20 e0       	ldi	r18, 0x00	; 0
    2d84:	30 e0       	ldi	r19, 0x00	; 0
    2d86:	40 e2       	ldi	r20, 0x20	; 32
    2d88:	51 e4       	ldi	r21, 0x41	; 65
    2d8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d8e:	dc 01       	movw	r26, r24
    2d90:	cb 01       	movw	r24, r22
    2d92:	bc 01       	movw	r22, r24
    2d94:	cd 01       	movw	r24, r26
    2d96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d9a:	dc 01       	movw	r26, r24
    2d9c:	cb 01       	movw	r24, r22
    2d9e:	9c 8b       	std	Y+20, r25	; 0x14
    2da0:	8b 8b       	std	Y+19, r24	; 0x13
    2da2:	0f c0       	rjmp	.+30     	; 0x2dc2 <CLCD_vSend_Data+0x21c>
    2da4:	88 ec       	ldi	r24, 0xC8	; 200
    2da6:	90 e0       	ldi	r25, 0x00	; 0
    2da8:	9a 8b       	std	Y+18, r25	; 0x12
    2daa:	89 8b       	std	Y+17, r24	; 0x11
    2dac:	89 89       	ldd	r24, Y+17	; 0x11
    2dae:	9a 89       	ldd	r25, Y+18	; 0x12
    2db0:	01 97       	sbiw	r24, 0x01	; 1
    2db2:	f1 f7       	brne	.-4      	; 0x2db0 <CLCD_vSend_Data+0x20a>
    2db4:	9a 8b       	std	Y+18, r25	; 0x12
    2db6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2db8:	8b 89       	ldd	r24, Y+19	; 0x13
    2dba:	9c 89       	ldd	r25, Y+20	; 0x14
    2dbc:	01 97       	sbiw	r24, 0x01	; 1
    2dbe:	9c 8b       	std	Y+20, r25	; 0x14
    2dc0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2dc2:	8b 89       	ldd	r24, Y+19	; 0x13
    2dc4:	9c 89       	ldd	r25, Y+20	; 0x14
    2dc6:	00 97       	sbiw	r24, 0x00	; 0
    2dc8:	69 f7       	brne	.-38     	; 0x2da4 <CLCD_vSend_Data+0x1fe>
    2dca:	14 c0       	rjmp	.+40     	; 0x2df4 <CLCD_vSend_Data+0x24e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2dcc:	6d 89       	ldd	r22, Y+21	; 0x15
    2dce:	7e 89       	ldd	r23, Y+22	; 0x16
    2dd0:	8f 89       	ldd	r24, Y+23	; 0x17
    2dd2:	98 8d       	ldd	r25, Y+24	; 0x18
    2dd4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dd8:	dc 01       	movw	r26, r24
    2dda:	cb 01       	movw	r24, r22
    2ddc:	9c 8b       	std	Y+20, r25	; 0x14
    2dde:	8b 8b       	std	Y+19, r24	; 0x13
    2de0:	8b 89       	ldd	r24, Y+19	; 0x13
    2de2:	9c 89       	ldd	r25, Y+20	; 0x14
    2de4:	98 8b       	std	Y+16, r25	; 0x10
    2de6:	8f 87       	std	Y+15, r24	; 0x0f
    2de8:	8f 85       	ldd	r24, Y+15	; 0x0f
    2dea:	98 89       	ldd	r25, Y+16	; 0x10
    2dec:	01 97       	sbiw	r24, 0x01	; 1
    2dee:	f1 f7       	brne	.-4      	; 0x2dec <CLCD_vSend_Data+0x246>
    2df0:	98 8b       	std	Y+16, r25	; 0x10
    2df2:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CONTROL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
    2df4:	80 e0       	ldi	r24, 0x00	; 0
    2df6:	61 e0       	ldi	r22, 0x01	; 1
    2df8:	40 e0       	ldi	r20, 0x00	; 0
    2dfa:	0e 94 47 10 	call	0x208e	; 0x208e <DIO_u8SetPinValue>
    2dfe:	80 e0       	ldi	r24, 0x00	; 0
    2e00:	90 e0       	ldi	r25, 0x00	; 0
    2e02:	a0 e0       	ldi	r26, 0x00	; 0
    2e04:	b0 e4       	ldi	r27, 0x40	; 64
    2e06:	8b 87       	std	Y+11, r24	; 0x0b
    2e08:	9c 87       	std	Y+12, r25	; 0x0c
    2e0a:	ad 87       	std	Y+13, r26	; 0x0d
    2e0c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e0e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e10:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e12:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e14:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e16:	20 e0       	ldi	r18, 0x00	; 0
    2e18:	30 e0       	ldi	r19, 0x00	; 0
    2e1a:	4a ef       	ldi	r20, 0xFA	; 250
    2e1c:	54 e4       	ldi	r21, 0x44	; 68
    2e1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e22:	dc 01       	movw	r26, r24
    2e24:	cb 01       	movw	r24, r22
    2e26:	8f 83       	std	Y+7, r24	; 0x07
    2e28:	98 87       	std	Y+8, r25	; 0x08
    2e2a:	a9 87       	std	Y+9, r26	; 0x09
    2e2c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2e2e:	6f 81       	ldd	r22, Y+7	; 0x07
    2e30:	78 85       	ldd	r23, Y+8	; 0x08
    2e32:	89 85       	ldd	r24, Y+9	; 0x09
    2e34:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e36:	20 e0       	ldi	r18, 0x00	; 0
    2e38:	30 e0       	ldi	r19, 0x00	; 0
    2e3a:	40 e8       	ldi	r20, 0x80	; 128
    2e3c:	5f e3       	ldi	r21, 0x3F	; 63
    2e3e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e42:	88 23       	and	r24, r24
    2e44:	2c f4       	brge	.+10     	; 0x2e50 <CLCD_vSend_Data+0x2aa>
		__ticks = 1;
    2e46:	81 e0       	ldi	r24, 0x01	; 1
    2e48:	90 e0       	ldi	r25, 0x00	; 0
    2e4a:	9e 83       	std	Y+6, r25	; 0x06
    2e4c:	8d 83       	std	Y+5, r24	; 0x05
    2e4e:	3f c0       	rjmp	.+126    	; 0x2ece <CLCD_vSend_Data+0x328>
	else if (__tmp > 65535)
    2e50:	6f 81       	ldd	r22, Y+7	; 0x07
    2e52:	78 85       	ldd	r23, Y+8	; 0x08
    2e54:	89 85       	ldd	r24, Y+9	; 0x09
    2e56:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e58:	20 e0       	ldi	r18, 0x00	; 0
    2e5a:	3f ef       	ldi	r19, 0xFF	; 255
    2e5c:	4f e7       	ldi	r20, 0x7F	; 127
    2e5e:	57 e4       	ldi	r21, 0x47	; 71
    2e60:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e64:	18 16       	cp	r1, r24
    2e66:	4c f5       	brge	.+82     	; 0x2eba <CLCD_vSend_Data+0x314>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e68:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e6a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e6c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e6e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e70:	20 e0       	ldi	r18, 0x00	; 0
    2e72:	30 e0       	ldi	r19, 0x00	; 0
    2e74:	40 e2       	ldi	r20, 0x20	; 32
    2e76:	51 e4       	ldi	r21, 0x41	; 65
    2e78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e7c:	dc 01       	movw	r26, r24
    2e7e:	cb 01       	movw	r24, r22
    2e80:	bc 01       	movw	r22, r24
    2e82:	cd 01       	movw	r24, r26
    2e84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e88:	dc 01       	movw	r26, r24
    2e8a:	cb 01       	movw	r24, r22
    2e8c:	9e 83       	std	Y+6, r25	; 0x06
    2e8e:	8d 83       	std	Y+5, r24	; 0x05
    2e90:	0f c0       	rjmp	.+30     	; 0x2eb0 <CLCD_vSend_Data+0x30a>
    2e92:	88 ec       	ldi	r24, 0xC8	; 200
    2e94:	90 e0       	ldi	r25, 0x00	; 0
    2e96:	9c 83       	std	Y+4, r25	; 0x04
    2e98:	8b 83       	std	Y+3, r24	; 0x03
    2e9a:	8b 81       	ldd	r24, Y+3	; 0x03
    2e9c:	9c 81       	ldd	r25, Y+4	; 0x04
    2e9e:	01 97       	sbiw	r24, 0x01	; 1
    2ea0:	f1 f7       	brne	.-4      	; 0x2e9e <CLCD_vSend_Data+0x2f8>
    2ea2:	9c 83       	std	Y+4, r25	; 0x04
    2ea4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ea6:	8d 81       	ldd	r24, Y+5	; 0x05
    2ea8:	9e 81       	ldd	r25, Y+6	; 0x06
    2eaa:	01 97       	sbiw	r24, 0x01	; 1
    2eac:	9e 83       	std	Y+6, r25	; 0x06
    2eae:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2eb0:	8d 81       	ldd	r24, Y+5	; 0x05
    2eb2:	9e 81       	ldd	r25, Y+6	; 0x06
    2eb4:	00 97       	sbiw	r24, 0x00	; 0
    2eb6:	69 f7       	brne	.-38     	; 0x2e92 <CLCD_vSend_Data+0x2ec>
    2eb8:	14 c0       	rjmp	.+40     	; 0x2ee2 <CLCD_vSend_Data+0x33c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2eba:	6f 81       	ldd	r22, Y+7	; 0x07
    2ebc:	78 85       	ldd	r23, Y+8	; 0x08
    2ebe:	89 85       	ldd	r24, Y+9	; 0x09
    2ec0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ec2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ec6:	dc 01       	movw	r26, r24
    2ec8:	cb 01       	movw	r24, r22
    2eca:	9e 83       	std	Y+6, r25	; 0x06
    2ecc:	8d 83       	std	Y+5, r24	; 0x05
    2ece:	8d 81       	ldd	r24, Y+5	; 0x05
    2ed0:	9e 81       	ldd	r25, Y+6	; 0x06
    2ed2:	9a 83       	std	Y+2, r25	; 0x02
    2ed4:	89 83       	std	Y+1, r24	; 0x01
    2ed6:	89 81       	ldd	r24, Y+1	; 0x01
    2ed8:	9a 81       	ldd	r25, Y+2	; 0x02
    2eda:	01 97       	sbiw	r24, 0x01	; 1
    2edc:	f1 f7       	brne	.-4      	; 0x2eda <CLCD_vSend_Data+0x334>
    2ede:	9a 83       	std	Y+2, r25	; 0x02
    2ee0:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(2);
	#endif
}
    2ee2:	ab 96       	adiw	r28, 0x2b	; 43
    2ee4:	0f b6       	in	r0, 0x3f	; 63
    2ee6:	f8 94       	cli
    2ee8:	de bf       	out	0x3e, r29	; 62
    2eea:	0f be       	out	0x3f, r0	; 63
    2eec:	cd bf       	out	0x3d, r28	; 61
    2eee:	cf 91       	pop	r28
    2ef0:	df 91       	pop	r29
    2ef2:	08 95       	ret

00002ef4 <CLCD_vMoveToNextLine>:

u16 currentRow=0,currentCol=0;
void CLCD_vMoveToNextLine()
{
    2ef4:	df 93       	push	r29
    2ef6:	cf 93       	push	r28
    2ef8:	cd b7       	in	r28, 0x3d	; 61
    2efa:	de b7       	in	r29, 0x3e	; 62

	if (++currentRow >= CLCD_ROWS)
    2efc:	80 91 f6 02 	lds	r24, 0x02F6
    2f00:	90 91 f7 02 	lds	r25, 0x02F7
    2f04:	01 96       	adiw	r24, 0x01	; 1
    2f06:	90 93 f7 02 	sts	0x02F7, r25
    2f0a:	80 93 f6 02 	sts	0x02F6, r24
    2f0e:	80 91 f6 02 	lds	r24, 0x02F6
    2f12:	90 91 f7 02 	lds	r25, 0x02F7
    2f16:	82 30       	cpi	r24, 0x02	; 2
    2f18:	91 05       	cpc	r25, r1
    2f1a:	20 f0       	brcs	.+8      	; 0x2f24 <CLCD_vMoveToNextLine+0x30>
	{
		currentRow = 0; // If at the last row, move back to the first row
    2f1c:	10 92 f7 02 	sts	0x02F7, r1
    2f20:	10 92 f6 02 	sts	0x02F6, r1
	}
	if (currentRow == 1)
    2f24:	80 91 f6 02 	lds	r24, 0x02F6
    2f28:	90 91 f7 02 	lds	r25, 0x02F7
    2f2c:	81 30       	cpi	r24, 0x01	; 1
    2f2e:	91 05       	cpc	r25, r1
    2f30:	21 f4       	brne	.+8      	; 0x2f3a <CLCD_vMoveToNextLine+0x46>
	{
		CLCD_vSend_Command(0xC0); // Move to the second line
    2f32:	80 ec       	ldi	r24, 0xC0	; 192
    2f34:	0e 94 5d 13 	call	0x26ba	; 0x26ba <CLCD_vSend_Command>
    2f38:	06 c0       	rjmp	.+12     	; 0x2f46 <CLCD_vMoveToNextLine+0x52>
	}
	else
	{
		CLCD_vSend_Command(0X1);
    2f3a:	81 e0       	ldi	r24, 0x01	; 1
    2f3c:	0e 94 5d 13 	call	0x26ba	; 0x26ba <CLCD_vSend_Command>
		CLCD_vSend_Command(0x80); // Move to the first line
    2f40:	80 e8       	ldi	r24, 0x80	; 128
    2f42:	0e 94 5d 13 	call	0x26ba	; 0x26ba <CLCD_vSend_Command>
	}
	currentCol = 0; // Reset column position to start of the line
    2f46:	10 92 f9 02 	sts	0x02F9, r1
    2f4a:	10 92 f8 02 	sts	0x02F8, r1
}
    2f4e:	cf 91       	pop	r28
    2f50:	df 91       	pop	r29
    2f52:	08 95       	ret

00002f54 <CLCD_vSendString>:

void CLCD_vSendString(const u8 *str) {
    2f54:	df 93       	push	r29
    2f56:	cf 93       	push	r28
    2f58:	00 d0       	rcall	.+0      	; 0x2f5a <CLCD_vSendString+0x6>
    2f5a:	0f 92       	push	r0
    2f5c:	cd b7       	in	r28, 0x3d	; 61
    2f5e:	de b7       	in	r29, 0x3e	; 62
    2f60:	9b 83       	std	Y+3, r25	; 0x03
    2f62:	8a 83       	std	Y+2, r24	; 0x02
    u8 charCount = 0;
    2f64:	19 82       	std	Y+1, r1	; 0x01
    2f66:	13 c0       	rjmp	.+38     	; 0x2f8e <CLCD_vSendString+0x3a>

    // Loop until the end of the string ('\0' character) or LCD boundary is reached
    while (*str != '\0' && charCount < 32) { // Limit to 32 characters (16x2 LCD)
        // Check if the current character count exceeds the first line limit (16 characters)
        if (charCount == 16) {
    2f68:	89 81       	ldd	r24, Y+1	; 0x01
    2f6a:	80 31       	cpi	r24, 0x10	; 16
    2f6c:	19 f4       	brne	.+6      	; 0x2f74 <CLCD_vSendString+0x20>
            // Move to the second line
            CLCD_vSend_Command(0xC0); // Set DDRAM address to the beginning of the second line
    2f6e:	80 ec       	ldi	r24, 0xC0	; 192
    2f70:	0e 94 5d 13 	call	0x26ba	; 0x26ba <CLCD_vSend_Command>
        }
        // Send each character of the string
        CLCD_vSend_Data(*str);
    2f74:	ea 81       	ldd	r30, Y+2	; 0x02
    2f76:	fb 81       	ldd	r31, Y+3	; 0x03
    2f78:	80 81       	ld	r24, Z
    2f7a:	0e 94 d3 15 	call	0x2ba6	; 0x2ba6 <CLCD_vSend_Data>
        // Move to the next character
        str++;
    2f7e:	8a 81       	ldd	r24, Y+2	; 0x02
    2f80:	9b 81       	ldd	r25, Y+3	; 0x03
    2f82:	01 96       	adiw	r24, 0x01	; 1
    2f84:	9b 83       	std	Y+3, r25	; 0x03
    2f86:	8a 83       	std	Y+2, r24	; 0x02
        charCount++;
    2f88:	89 81       	ldd	r24, Y+1	; 0x01
    2f8a:	8f 5f       	subi	r24, 0xFF	; 255
    2f8c:	89 83       	std	Y+1, r24	; 0x01

void CLCD_vSendString(const u8 *str) {
    u8 charCount = 0;

    // Loop until the end of the string ('\0' character) or LCD boundary is reached
    while (*str != '\0' && charCount < 32) { // Limit to 32 characters (16x2 LCD)
    2f8e:	ea 81       	ldd	r30, Y+2	; 0x02
    2f90:	fb 81       	ldd	r31, Y+3	; 0x03
    2f92:	80 81       	ld	r24, Z
    2f94:	88 23       	and	r24, r24
    2f96:	19 f0       	breq	.+6      	; 0x2f9e <CLCD_vSendString+0x4a>
    2f98:	89 81       	ldd	r24, Y+1	; 0x01
    2f9a:	80 32       	cpi	r24, 0x20	; 32
    2f9c:	28 f3       	brcs	.-54     	; 0x2f68 <CLCD_vSendString+0x14>
        CLCD_vSend_Data(*str);
        // Move to the next character
        str++;
        charCount++;
    }
}
    2f9e:	0f 90       	pop	r0
    2fa0:	0f 90       	pop	r0
    2fa2:	0f 90       	pop	r0
    2fa4:	cf 91       	pop	r28
    2fa6:	df 91       	pop	r29
    2fa8:	08 95       	ret

00002faa <CLCD_vGoToXY>:

void CLCD_vGoToXY(u8 Copy_u8Yposition, u8 Copy_u8Xposition)
{
    2faa:	df 93       	push	r29
    2fac:	cf 93       	push	r28
    2fae:	00 d0       	rcall	.+0      	; 0x2fb0 <CLCD_vGoToXY+0x6>
    2fb0:	0f 92       	push	r0
    2fb2:	cd b7       	in	r28, 0x3d	; 61
    2fb4:	de b7       	in	r29, 0x3e	; 62
    2fb6:	8a 83       	std	Y+2, r24	; 0x02
    2fb8:	6b 83       	std	Y+3, r22	; 0x03

	if (Copy_u8Xposition >= 2) {
    2fba:	8b 81       	ldd	r24, Y+3	; 0x03
    2fbc:	82 30       	cpi	r24, 0x02	; 2
    2fbe:	10 f0       	brcs	.+4      	; 0x2fc4 <CLCD_vGoToXY+0x1a>
		Copy_u8Xposition = 1; // Limit y position to last row
    2fc0:	81 e0       	ldi	r24, 0x01	; 1
    2fc2:	8b 83       	std	Y+3, r24	; 0x03
	}
	if (Copy_u8Yposition >= 16) {
    2fc4:	8a 81       	ldd	r24, Y+2	; 0x02
    2fc6:	80 31       	cpi	r24, 0x10	; 16
    2fc8:	10 f0       	brcs	.+4      	; 0x2fce <CLCD_vGoToXY+0x24>
		Copy_u8Yposition = 15; // Limit x position to last column
    2fca:	8f e0       	ldi	r24, 0x0F	; 15
    2fcc:	8a 83       	std	Y+2, r24	; 0x02
	}
	u8 Local_u8Adress;


	if(Copy_u8Xposition==0){
    2fce:	8b 81       	ldd	r24, Y+3	; 0x03
    2fd0:	88 23       	and	r24, r24
    2fd2:	19 f4       	brne	.+6      	; 0x2fda <CLCD_vGoToXY+0x30>
		Local_u8Adress=Copy_u8Yposition;
    2fd4:	8a 81       	ldd	r24, Y+2	; 0x02
    2fd6:	89 83       	std	Y+1, r24	; 0x01
    2fd8:	06 c0       	rjmp	.+12     	; 0x2fe6 <CLCD_vGoToXY+0x3c>
	}
	else if(Copy_u8Xposition==1){
    2fda:	8b 81       	ldd	r24, Y+3	; 0x03
    2fdc:	81 30       	cpi	r24, 0x01	; 1
    2fde:	19 f4       	brne	.+6      	; 0x2fe6 <CLCD_vGoToXY+0x3c>
		Local_u8Adress=Copy_u8Yposition+0x40;
    2fe0:	8a 81       	ldd	r24, Y+2	; 0x02
    2fe2:	80 5c       	subi	r24, 0xC0	; 192
    2fe4:	89 83       	std	Y+1, r24	; 0x01
	}
	CLCD_vSend_Command(SET_BIT(Local_u8Adress,7));
    2fe6:	89 81       	ldd	r24, Y+1	; 0x01
    2fe8:	80 68       	ori	r24, 0x80	; 128
    2fea:	89 83       	std	Y+1, r24	; 0x01
    2fec:	89 81       	ldd	r24, Y+1	; 0x01
    2fee:	0e 94 5d 13 	call	0x26ba	; 0x26ba <CLCD_vSend_Command>
}
    2ff2:	0f 90       	pop	r0
    2ff4:	0f 90       	pop	r0
    2ff6:	0f 90       	pop	r0
    2ff8:	cf 91       	pop	r28
    2ffa:	df 91       	pop	r29
    2ffc:	08 95       	ret

00002ffe <CLCD_vSendSpecialChar>:


void CLCD_vSendSpecialChar(pu8 Copy_pu8Pattern , u8 Copy_pu8PatternNumber, u8 Copy_u8XPosition, u8 Copy_u8YPosition)
{
    2ffe:	df 93       	push	r29
    3000:	cf 93       	push	r28
    3002:	cd b7       	in	r28, 0x3d	; 61
    3004:	de b7       	in	r29, 0x3e	; 62
    3006:	27 97       	sbiw	r28, 0x07	; 7
    3008:	0f b6       	in	r0, 0x3f	; 63
    300a:	f8 94       	cli
    300c:	de bf       	out	0x3e, r29	; 62
    300e:	0f be       	out	0x3f, r0	; 63
    3010:	cd bf       	out	0x3d, r28	; 61
    3012:	9c 83       	std	Y+4, r25	; 0x04
    3014:	8b 83       	std	Y+3, r24	; 0x03
    3016:	6d 83       	std	Y+5, r22	; 0x05
    3018:	4e 83       	std	Y+6, r20	; 0x06
    301a:	2f 83       	std	Y+7, r18	; 0x07
	u8 Local_u8CGRAM_Adress=0,Local_u8Iterator;
    301c:	1a 82       	std	Y+2, r1	; 0x02

	Local_u8CGRAM_Adress = Copy_pu8PatternNumber * 8;
    301e:	8d 81       	ldd	r24, Y+5	; 0x05
    3020:	88 2f       	mov	r24, r24
    3022:	90 e0       	ldi	r25, 0x00	; 0
    3024:	88 0f       	add	r24, r24
    3026:	99 1f       	adc	r25, r25
    3028:	88 0f       	add	r24, r24
    302a:	99 1f       	adc	r25, r25
    302c:	88 0f       	add	r24, r24
    302e:	99 1f       	adc	r25, r25
    3030:	8a 83       	std	Y+2, r24	; 0x02

	CLCD_vSend_Command(Local_u8CGRAM_Adress+64);
    3032:	8a 81       	ldd	r24, Y+2	; 0x02
    3034:	80 5c       	subi	r24, 0xC0	; 192
    3036:	0e 94 5d 13 	call	0x26ba	; 0x26ba <CLCD_vSend_Command>

	for(Local_u8Iterator=0; Local_u8Iterator<8 ; Local_u8Iterator++)
    303a:	19 82       	std	Y+1, r1	; 0x01
    303c:	0e c0       	rjmp	.+28     	; 0x305a <CLCD_vSendSpecialChar+0x5c>
	{
		CLCD_vSend_Data(Copy_pu8Pattern[Local_u8Iterator]);
    303e:	89 81       	ldd	r24, Y+1	; 0x01
    3040:	28 2f       	mov	r18, r24
    3042:	30 e0       	ldi	r19, 0x00	; 0
    3044:	8b 81       	ldd	r24, Y+3	; 0x03
    3046:	9c 81       	ldd	r25, Y+4	; 0x04
    3048:	fc 01       	movw	r30, r24
    304a:	e2 0f       	add	r30, r18
    304c:	f3 1f       	adc	r31, r19
    304e:	80 81       	ld	r24, Z
    3050:	0e 94 d3 15 	call	0x2ba6	; 0x2ba6 <CLCD_vSend_Data>

	Local_u8CGRAM_Adress = Copy_pu8PatternNumber * 8;

	CLCD_vSend_Command(Local_u8CGRAM_Adress+64);

	for(Local_u8Iterator=0; Local_u8Iterator<8 ; Local_u8Iterator++)
    3054:	89 81       	ldd	r24, Y+1	; 0x01
    3056:	8f 5f       	subi	r24, 0xFF	; 255
    3058:	89 83       	std	Y+1, r24	; 0x01
    305a:	89 81       	ldd	r24, Y+1	; 0x01
    305c:	88 30       	cpi	r24, 0x08	; 8
    305e:	78 f3       	brcs	.-34     	; 0x303e <CLCD_vSendSpecialChar+0x40>
	{
		CLCD_vSend_Data(Copy_pu8Pattern[Local_u8Iterator]);
	}

	CLCD_vGoToXY(Copy_u8XPosition,Copy_u8YPosition);
    3060:	8e 81       	ldd	r24, Y+6	; 0x06
    3062:	6f 81       	ldd	r22, Y+7	; 0x07
    3064:	0e 94 d5 17 	call	0x2faa	; 0x2faa <CLCD_vGoToXY>

	CLCD_vSend_Data(Copy_pu8PatternNumber);
    3068:	8d 81       	ldd	r24, Y+5	; 0x05
    306a:	0e 94 d3 15 	call	0x2ba6	; 0x2ba6 <CLCD_vSend_Data>
}
    306e:	27 96       	adiw	r28, 0x07	; 7
    3070:	0f b6       	in	r0, 0x3f	; 63
    3072:	f8 94       	cli
    3074:	de bf       	out	0x3e, r29	; 62
    3076:	0f be       	out	0x3f, r0	; 63
    3078:	cd bf       	out	0x3d, r28	; 61
    307a:	cf 91       	pop	r28
    307c:	df 91       	pop	r29
    307e:	08 95       	ret

00003080 <CLCD_u16GetLengh>:

static u16 CLCD_u16GetLengh(u16 Copy_u16Number)
{
    3080:	df 93       	push	r29
    3082:	cf 93       	push	r28
    3084:	00 d0       	rcall	.+0      	; 0x3086 <CLCD_u16GetLengh+0x6>
    3086:	00 d0       	rcall	.+0      	; 0x3088 <CLCD_u16GetLengh+0x8>
    3088:	cd b7       	in	r28, 0x3d	; 61
    308a:	de b7       	in	r29, 0x3e	; 62
    308c:	9c 83       	std	Y+4, r25	; 0x04
    308e:	8b 83       	std	Y+3, r24	; 0x03
	u16 Length = (Copy_u16Number == 0? 1 :0);
    3090:	1a 82       	std	Y+2, r1	; 0x02
    3092:	19 82       	std	Y+1, r1	; 0x01
    3094:	8b 81       	ldd	r24, Y+3	; 0x03
    3096:	9c 81       	ldd	r25, Y+4	; 0x04
    3098:	00 97       	sbiw	r24, 0x00	; 0
    309a:	a1 f4       	brne	.+40     	; 0x30c4 <CLCD_u16GetLengh+0x44>
    309c:	81 e0       	ldi	r24, 0x01	; 1
    309e:	90 e0       	ldi	r25, 0x00	; 0
    30a0:	9a 83       	std	Y+2, r25	; 0x02
    30a2:	89 83       	std	Y+1, r24	; 0x01
    30a4:	0f c0       	rjmp	.+30     	; 0x30c4 <CLCD_u16GetLengh+0x44>
	while(Copy_u16Number>0)
	{
		Length++;
    30a6:	89 81       	ldd	r24, Y+1	; 0x01
    30a8:	9a 81       	ldd	r25, Y+2	; 0x02
    30aa:	01 96       	adiw	r24, 0x01	; 1
    30ac:	9a 83       	std	Y+2, r25	; 0x02
    30ae:	89 83       	std	Y+1, r24	; 0x01
		Copy_u16Number/=10;
    30b0:	8b 81       	ldd	r24, Y+3	; 0x03
    30b2:	9c 81       	ldd	r25, Y+4	; 0x04
    30b4:	2a e0       	ldi	r18, 0x0A	; 10
    30b6:	30 e0       	ldi	r19, 0x00	; 0
    30b8:	b9 01       	movw	r22, r18
    30ba:	0e 94 24 2b 	call	0x5648	; 0x5648 <__udivmodhi4>
    30be:	cb 01       	movw	r24, r22
    30c0:	9c 83       	std	Y+4, r25	; 0x04
    30c2:	8b 83       	std	Y+3, r24	; 0x03
}

static u16 CLCD_u16GetLengh(u16 Copy_u16Number)
{
	u16 Length = (Copy_u16Number == 0? 1 :0);
	while(Copy_u16Number>0)
    30c4:	8b 81       	ldd	r24, Y+3	; 0x03
    30c6:	9c 81       	ldd	r25, Y+4	; 0x04
    30c8:	00 97       	sbiw	r24, 0x00	; 0
    30ca:	69 f7       	brne	.-38     	; 0x30a6 <CLCD_u16GetLengh+0x26>
	{
		Length++;
		Copy_u16Number/=10;
	}
	return Length;
    30cc:	89 81       	ldd	r24, Y+1	; 0x01
    30ce:	9a 81       	ldd	r25, Y+2	; 0x02
}
    30d0:	0f 90       	pop	r0
    30d2:	0f 90       	pop	r0
    30d4:	0f 90       	pop	r0
    30d6:	0f 90       	pop	r0
    30d8:	cf 91       	pop	r28
    30da:	df 91       	pop	r29
    30dc:	08 95       	ret

000030de <CLCD_vSendNumber>:
void CLCD_vSendNumber(u16 Copy_u8Number)
{
    30de:	df 93       	push	r29
    30e0:	cf 93       	push	r28
    30e2:	cd b7       	in	r28, 0x3d	; 61
    30e4:	de b7       	in	r29, 0x3e	; 62
    30e6:	6e 97       	sbiw	r28, 0x1e	; 30
    30e8:	0f b6       	in	r0, 0x3f	; 63
    30ea:	f8 94       	cli
    30ec:	de bf       	out	0x3e, r29	; 62
    30ee:	0f be       	out	0x3f, r0	; 63
    30f0:	cd bf       	out	0x3d, r28	; 61
    30f2:	9e 8f       	std	Y+30, r25	; 0x1e
    30f4:	8d 8f       	std	Y+29, r24	; 0x1d
	u8 str[16];
	u16 i=0;
    30f6:	1c 86       	std	Y+12, r1	; 0x0c
    30f8:	1b 86       	std	Y+11, r1	; 0x0b
	u16 length = CLCD_u16GetLengh(Copy_u8Number);
    30fa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    30fc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    30fe:	0e 94 40 18 	call	0x3080	; 0x3080 <CLCD_u16GetLengh>
    3102:	9a 87       	std	Y+10, r25	; 0x0a
    3104:	89 87       	std	Y+9, r24	; 0x09
    3106:	27 c0       	rjmp	.+78     	; 0x3156 <CLCD_vSendNumber+0x78>

	while(length > 0)
	{
		u8 digit = Copy_u8Number%10;
    3108:	8d 8d       	ldd	r24, Y+29	; 0x1d
    310a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    310c:	2a e0       	ldi	r18, 0x0A	; 10
    310e:	30 e0       	ldi	r19, 0x00	; 0
    3110:	b9 01       	movw	r22, r18
    3112:	0e 94 24 2b 	call	0x5648	; 0x5648 <__udivmodhi4>
    3116:	8a 83       	std	Y+2, r24	; 0x02
		str[i] = digit + '0';
    3118:	2b 85       	ldd	r18, Y+11	; 0x0b
    311a:	3c 85       	ldd	r19, Y+12	; 0x0c
    311c:	8a 81       	ldd	r24, Y+2	; 0x02
    311e:	48 2f       	mov	r20, r24
    3120:	40 5d       	subi	r20, 0xD0	; 208
    3122:	ce 01       	movw	r24, r28
    3124:	0d 96       	adiw	r24, 0x0d	; 13
    3126:	fc 01       	movw	r30, r24
    3128:	e2 0f       	add	r30, r18
    312a:	f3 1f       	adc	r31, r19
    312c:	40 83       	st	Z, r20
		Copy_u8Number /= 10;
    312e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3130:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3132:	2a e0       	ldi	r18, 0x0A	; 10
    3134:	30 e0       	ldi	r19, 0x00	; 0
    3136:	b9 01       	movw	r22, r18
    3138:	0e 94 24 2b 	call	0x5648	; 0x5648 <__udivmodhi4>
    313c:	cb 01       	movw	r24, r22
    313e:	9e 8f       	std	Y+30, r25	; 0x1e
    3140:	8d 8f       	std	Y+29, r24	; 0x1d
		length--;
    3142:	89 85       	ldd	r24, Y+9	; 0x09
    3144:	9a 85       	ldd	r25, Y+10	; 0x0a
    3146:	01 97       	sbiw	r24, 0x01	; 1
    3148:	9a 87       	std	Y+10, r25	; 0x0a
    314a:	89 87       	std	Y+9, r24	; 0x09
		i++;
    314c:	8b 85       	ldd	r24, Y+11	; 0x0b
    314e:	9c 85       	ldd	r25, Y+12	; 0x0c
    3150:	01 96       	adiw	r24, 0x01	; 1
    3152:	9c 87       	std	Y+12, r25	; 0x0c
    3154:	8b 87       	std	Y+11, r24	; 0x0b
{
	u8 str[16];
	u16 i=0;
	u16 length = CLCD_u16GetLengh(Copy_u8Number);

	while(length > 0)
    3156:	89 85       	ldd	r24, Y+9	; 0x09
    3158:	9a 85       	ldd	r25, Y+10	; 0x0a
    315a:	00 97       	sbiw	r24, 0x00	; 0
    315c:	a9 f6       	brne	.-86     	; 0x3108 <CLCD_vSendNumber+0x2a>
		Copy_u8Number /= 10;
		length--;
		i++;
	}

	str[i] = '\0';
    315e:	2b 85       	ldd	r18, Y+11	; 0x0b
    3160:	3c 85       	ldd	r19, Y+12	; 0x0c
    3162:	ce 01       	movw	r24, r28
    3164:	0d 96       	adiw	r24, 0x0d	; 13
    3166:	fc 01       	movw	r30, r24
    3168:	e2 0f       	add	r30, r18
    316a:	f3 1f       	adc	r31, r19
    316c:	10 82       	st	Z, r1

	u16 start = 0;
    316e:	18 86       	std	Y+8, r1	; 0x08
    3170:	1f 82       	std	Y+7, r1	; 0x07
	u16 end = i - 1;
    3172:	8b 85       	ldd	r24, Y+11	; 0x0b
    3174:	9c 85       	ldd	r25, Y+12	; 0x0c
    3176:	01 97       	sbiw	r24, 0x01	; 1
    3178:	9e 83       	std	Y+6, r25	; 0x06
    317a:	8d 83       	std	Y+5, r24	; 0x05
    317c:	2c c0       	rjmp	.+88     	; 0x31d6 <CLCD_vSendNumber+0xf8>
	while (start < end)
	{
		u8 temp = str[start];
    317e:	2f 81       	ldd	r18, Y+7	; 0x07
    3180:	38 85       	ldd	r19, Y+8	; 0x08
    3182:	ce 01       	movw	r24, r28
    3184:	0d 96       	adiw	r24, 0x0d	; 13
    3186:	fc 01       	movw	r30, r24
    3188:	e2 0f       	add	r30, r18
    318a:	f3 1f       	adc	r31, r19
    318c:	80 81       	ld	r24, Z
    318e:	89 83       	std	Y+1, r24	; 0x01
		str[start] = str[end];
    3190:	4f 81       	ldd	r20, Y+7	; 0x07
    3192:	58 85       	ldd	r21, Y+8	; 0x08
    3194:	2d 81       	ldd	r18, Y+5	; 0x05
    3196:	3e 81       	ldd	r19, Y+6	; 0x06
    3198:	ce 01       	movw	r24, r28
    319a:	0d 96       	adiw	r24, 0x0d	; 13
    319c:	fc 01       	movw	r30, r24
    319e:	e2 0f       	add	r30, r18
    31a0:	f3 1f       	adc	r31, r19
    31a2:	20 81       	ld	r18, Z
    31a4:	ce 01       	movw	r24, r28
    31a6:	0d 96       	adiw	r24, 0x0d	; 13
    31a8:	fc 01       	movw	r30, r24
    31aa:	e4 0f       	add	r30, r20
    31ac:	f5 1f       	adc	r31, r21
    31ae:	20 83       	st	Z, r18
		str[end] = temp;
    31b0:	2d 81       	ldd	r18, Y+5	; 0x05
    31b2:	3e 81       	ldd	r19, Y+6	; 0x06
    31b4:	ce 01       	movw	r24, r28
    31b6:	0d 96       	adiw	r24, 0x0d	; 13
    31b8:	fc 01       	movw	r30, r24
    31ba:	e2 0f       	add	r30, r18
    31bc:	f3 1f       	adc	r31, r19
    31be:	89 81       	ldd	r24, Y+1	; 0x01
    31c0:	80 83       	st	Z, r24
		start++;
    31c2:	8f 81       	ldd	r24, Y+7	; 0x07
    31c4:	98 85       	ldd	r25, Y+8	; 0x08
    31c6:	01 96       	adiw	r24, 0x01	; 1
    31c8:	98 87       	std	Y+8, r25	; 0x08
    31ca:	8f 83       	std	Y+7, r24	; 0x07
		end--;
    31cc:	8d 81       	ldd	r24, Y+5	; 0x05
    31ce:	9e 81       	ldd	r25, Y+6	; 0x06
    31d0:	01 97       	sbiw	r24, 0x01	; 1
    31d2:	9e 83       	std	Y+6, r25	; 0x06
    31d4:	8d 83       	std	Y+5, r24	; 0x05

	str[i] = '\0';

	u16 start = 0;
	u16 end = i - 1;
	while (start < end)
    31d6:	2f 81       	ldd	r18, Y+7	; 0x07
    31d8:	38 85       	ldd	r19, Y+8	; 0x08
    31da:	8d 81       	ldd	r24, Y+5	; 0x05
    31dc:	9e 81       	ldd	r25, Y+6	; 0x06
    31de:	28 17       	cp	r18, r24
    31e0:	39 07       	cpc	r19, r25
    31e2:	68 f2       	brcs	.-102    	; 0x317e <CLCD_vSendNumber+0xa0>
		str[start] = str[end];
		str[end] = temp;
		start++;
		end--;
	}
	u16 j=0;
    31e4:	1c 82       	std	Y+4, r1	; 0x04
    31e6:	1b 82       	std	Y+3, r1	; 0x03
    31e8:	26 c0       	rjmp	.+76     	; 0x3236 <CLCD_vSendNumber+0x158>
		/*if(currentCol>=CLCD_COLS )
		{
			CLCD_vMoveToNextLine();
		}
		*/
		if (str[j]==0)
    31ea:	2b 81       	ldd	r18, Y+3	; 0x03
    31ec:	3c 81       	ldd	r19, Y+4	; 0x04
    31ee:	ce 01       	movw	r24, r28
    31f0:	0d 96       	adiw	r24, 0x0d	; 13
    31f2:	fc 01       	movw	r30, r24
    31f4:	e2 0f       	add	r30, r18
    31f6:	f3 1f       	adc	r31, r19
    31f8:	80 81       	ld	r24, Z
    31fa:	88 23       	and	r24, r24
    31fc:	21 f4       	brne	.+8      	; 0x3206 <CLCD_vSendNumber+0x128>
			CLCD_vSend_Data('0');
    31fe:	80 e3       	ldi	r24, 0x30	; 48
    3200:	0e 94 d3 15 	call	0x2ba6	; 0x2ba6 <CLCD_vSend_Data>
    3204:	0a c0       	rjmp	.+20     	; 0x321a <CLCD_vSendNumber+0x13c>
		else
		CLCD_vSend_Data(str[j]);
    3206:	2b 81       	ldd	r18, Y+3	; 0x03
    3208:	3c 81       	ldd	r19, Y+4	; 0x04
    320a:	ce 01       	movw	r24, r28
    320c:	0d 96       	adiw	r24, 0x0d	; 13
    320e:	fc 01       	movw	r30, r24
    3210:	e2 0f       	add	r30, r18
    3212:	f3 1f       	adc	r31, r19
    3214:	80 81       	ld	r24, Z
    3216:	0e 94 d3 15 	call	0x2ba6	; 0x2ba6 <CLCD_vSend_Data>
		j++;
    321a:	8b 81       	ldd	r24, Y+3	; 0x03
    321c:	9c 81       	ldd	r25, Y+4	; 0x04
    321e:	01 96       	adiw	r24, 0x01	; 1
    3220:	9c 83       	std	Y+4, r25	; 0x04
    3222:	8b 83       	std	Y+3, r24	; 0x03
		currentCol++;
    3224:	80 91 f8 02 	lds	r24, 0x02F8
    3228:	90 91 f9 02 	lds	r25, 0x02F9
    322c:	01 96       	adiw	r24, 0x01	; 1
    322e:	90 93 f9 02 	sts	0x02F9, r25
    3232:	80 93 f8 02 	sts	0x02F8, r24
		str[end] = temp;
		start++;
		end--;
	}
	u16 j=0;
	while(str[j] != '\0')
    3236:	2b 81       	ldd	r18, Y+3	; 0x03
    3238:	3c 81       	ldd	r19, Y+4	; 0x04
    323a:	ce 01       	movw	r24, r28
    323c:	0d 96       	adiw	r24, 0x0d	; 13
    323e:	fc 01       	movw	r30, r24
    3240:	e2 0f       	add	r30, r18
    3242:	f3 1f       	adc	r31, r19
    3244:	80 81       	ld	r24, Z
    3246:	88 23       	and	r24, r24
    3248:	81 f6       	brne	.-96     	; 0x31ea <CLCD_vSendNumber+0x10c>
		else
		CLCD_vSend_Data(str[j]);
		j++;
		currentCol++;
	}
}
    324a:	6e 96       	adiw	r28, 0x1e	; 30
    324c:	0f b6       	in	r0, 0x3f	; 63
    324e:	f8 94       	cli
    3250:	de bf       	out	0x3e, r29	; 62
    3252:	0f be       	out	0x3f, r0	; 63
    3254:	cd bf       	out	0x3d, r28	; 61
    3256:	cf 91       	pop	r28
    3258:	df 91       	pop	r29
    325a:	08 95       	ret

0000325c <CLCD_vClearScreen>:


void CLCD_vClearScreen() {
    325c:	df 93       	push	r29
    325e:	cf 93       	push	r28
    3260:	cd b7       	in	r28, 0x3d	; 61
    3262:	de b7       	in	r29, 0x3e	; 62
    CLCD_vSend_Command(0x01); // Send clear screen command
    3264:	81 e0       	ldi	r24, 0x01	; 1
    3266:	0e 94 5d 13 	call	0x26ba	; 0x26ba <CLCD_vSend_Command>
}
    326a:	cf 91       	pop	r28
    326c:	df 91       	pop	r29
    326e:	08 95       	ret

00003270 <MADC_voidInit>:
#include "MADC_interface.h"

static void (*MADC_pvoidfUserFunction)(void) = NULL_POINTER;

void MADC_voidInit(u8 ARG_u8Vref, u8 ARG_u8Prescaler, u8 ARG_u8Resolution)
{
    3270:	df 93       	push	r29
    3272:	cf 93       	push	r28
    3274:	00 d0       	rcall	.+0      	; 0x3276 <MADC_voidInit+0x6>
    3276:	0f 92       	push	r0
    3278:	cd b7       	in	r28, 0x3d	; 61
    327a:	de b7       	in	r29, 0x3e	; 62
    327c:	89 83       	std	Y+1, r24	; 0x01
    327e:	6a 83       	std	Y+2, r22	; 0x02
    3280:	4b 83       	std	Y+3, r20	; 0x03
	if(((ARG_u8Vref<=1)||(3==ARG_u8Vref))&&(ARG_u8Prescaler<=7)&&(ARG_u8Resolution<=1))
    3282:	89 81       	ldd	r24, Y+1	; 0x01
    3284:	82 30       	cpi	r24, 0x02	; 2
    3286:	18 f0       	brcs	.+6      	; 0x328e <MADC_voidInit+0x1e>
    3288:	89 81       	ldd	r24, Y+1	; 0x01
    328a:	83 30       	cpi	r24, 0x03	; 3
    328c:	99 f5       	brne	.+102    	; 0x32f4 <MADC_voidInit+0x84>
    328e:	8a 81       	ldd	r24, Y+2	; 0x02
    3290:	88 30       	cpi	r24, 0x08	; 8
    3292:	80 f5       	brcc	.+96     	; 0x32f4 <MADC_voidInit+0x84>
    3294:	8b 81       	ldd	r24, Y+3	; 0x03
    3296:	82 30       	cpi	r24, 0x02	; 2
    3298:	68 f5       	brcc	.+90     	; 0x32f4 <MADC_voidInit+0x84>
	{
		ADMUX = (ADMUX&0x1F) | ((ARG_u8Vref<<REFS0) | (ARG_u8Resolution<<ADLAR));
    329a:	a7 e2       	ldi	r26, 0x27	; 39
    329c:	b0 e0       	ldi	r27, 0x00	; 0
    329e:	e7 e2       	ldi	r30, 0x27	; 39
    32a0:	f0 e0       	ldi	r31, 0x00	; 0
    32a2:	80 81       	ld	r24, Z
    32a4:	38 2f       	mov	r19, r24
    32a6:	3f 71       	andi	r19, 0x1F	; 31
    32a8:	89 81       	ldd	r24, Y+1	; 0x01
    32aa:	88 2f       	mov	r24, r24
    32ac:	90 e0       	ldi	r25, 0x00	; 0
    32ae:	00 24       	eor	r0, r0
    32b0:	96 95       	lsr	r25
    32b2:	87 95       	ror	r24
    32b4:	07 94       	ror	r0
    32b6:	96 95       	lsr	r25
    32b8:	87 95       	ror	r24
    32ba:	07 94       	ror	r0
    32bc:	98 2f       	mov	r25, r24
    32be:	80 2d       	mov	r24, r0
    32c0:	28 2f       	mov	r18, r24
    32c2:	8b 81       	ldd	r24, Y+3	; 0x03
    32c4:	88 2f       	mov	r24, r24
    32c6:	90 e0       	ldi	r25, 0x00	; 0
    32c8:	88 0f       	add	r24, r24
    32ca:	99 1f       	adc	r25, r25
    32cc:	82 95       	swap	r24
    32ce:	92 95       	swap	r25
    32d0:	90 7f       	andi	r25, 0xF0	; 240
    32d2:	98 27       	eor	r25, r24
    32d4:	80 7f       	andi	r24, 0xF0	; 240
    32d6:	98 27       	eor	r25, r24
    32d8:	82 2b       	or	r24, r18
    32da:	83 2b       	or	r24, r19
    32dc:	8c 93       	st	X, r24
		ADCSRA = (ADCSRA&0xF8) | ((1<<ADEN) | (ARG_u8Prescaler));
    32de:	a6 e2       	ldi	r26, 0x26	; 38
    32e0:	b0 e0       	ldi	r27, 0x00	; 0
    32e2:	e6 e2       	ldi	r30, 0x26	; 38
    32e4:	f0 e0       	ldi	r31, 0x00	; 0
    32e6:	80 81       	ld	r24, Z
    32e8:	98 2f       	mov	r25, r24
    32ea:	98 7f       	andi	r25, 0xF8	; 248
    32ec:	8a 81       	ldd	r24, Y+2	; 0x02
    32ee:	80 68       	ori	r24, 0x80	; 128
    32f0:	89 2b       	or	r24, r25
    32f2:	8c 93       	st	X, r24
	}
	else
	{
		/* Report an erorr */
	}
}
    32f4:	0f 90       	pop	r0
    32f6:	0f 90       	pop	r0
    32f8:	0f 90       	pop	r0
    32fa:	cf 91       	pop	r28
    32fc:	df 91       	pop	r29
    32fe:	08 95       	ret

00003300 <MADC_voidEnableADC>:

void MADC_voidEnableADC(void)
{
    3300:	df 93       	push	r29
    3302:	cf 93       	push	r28
    3304:	cd b7       	in	r28, 0x3d	; 61
    3306:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADCSRA, ADEN);
    3308:	a6 e2       	ldi	r26, 0x26	; 38
    330a:	b0 e0       	ldi	r27, 0x00	; 0
    330c:	e6 e2       	ldi	r30, 0x26	; 38
    330e:	f0 e0       	ldi	r31, 0x00	; 0
    3310:	80 81       	ld	r24, Z
    3312:	80 68       	ori	r24, 0x80	; 128
    3314:	8c 93       	st	X, r24
}
    3316:	cf 91       	pop	r28
    3318:	df 91       	pop	r29
    331a:	08 95       	ret

0000331c <MADC_voidDisableADC>:

void MADC_voidDisableADC(void)
{
    331c:	df 93       	push	r29
    331e:	cf 93       	push	r28
    3320:	cd b7       	in	r28, 0x3d	; 61
    3322:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(ADCSRA, ADEN);
    3324:	a6 e2       	ldi	r26, 0x26	; 38
    3326:	b0 e0       	ldi	r27, 0x00	; 0
    3328:	e6 e2       	ldi	r30, 0x26	; 38
    332a:	f0 e0       	ldi	r31, 0x00	; 0
    332c:	80 81       	ld	r24, Z
    332e:	8f 77       	andi	r24, 0x7F	; 127
    3330:	8c 93       	st	X, r24
}
    3332:	cf 91       	pop	r28
    3334:	df 91       	pop	r29
    3336:	08 95       	ret

00003338 <MADC_voidEnableInterrupt>:

void MADC_voidEnableInterrupt(void)
{
    3338:	df 93       	push	r29
    333a:	cf 93       	push	r28
    333c:	cd b7       	in	r28, 0x3d	; 61
    333e:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADCSRA, ADIE);
    3340:	a6 e2       	ldi	r26, 0x26	; 38
    3342:	b0 e0       	ldi	r27, 0x00	; 0
    3344:	e6 e2       	ldi	r30, 0x26	; 38
    3346:	f0 e0       	ldi	r31, 0x00	; 0
    3348:	80 81       	ld	r24, Z
    334a:	88 60       	ori	r24, 0x08	; 8
    334c:	8c 93       	st	X, r24
}
    334e:	cf 91       	pop	r28
    3350:	df 91       	pop	r29
    3352:	08 95       	ret

00003354 <MADC_voidDisableInterrupt>:

void MADC_voidDisableInterrupt(void)
{
    3354:	df 93       	push	r29
    3356:	cf 93       	push	r28
    3358:	cd b7       	in	r28, 0x3d	; 61
    335a:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(ADCSRA, ADIE);
    335c:	a6 e2       	ldi	r26, 0x26	; 38
    335e:	b0 e0       	ldi	r27, 0x00	; 0
    3360:	e6 e2       	ldi	r30, 0x26	; 38
    3362:	f0 e0       	ldi	r31, 0x00	; 0
    3364:	80 81       	ld	r24, Z
    3366:	87 7f       	andi	r24, 0xF7	; 247
    3368:	8c 93       	st	X, r24
}
    336a:	cf 91       	pop	r28
    336c:	df 91       	pop	r29
    336e:	08 95       	ret

00003370 <MADC_voidSetCallback>:

void MADC_voidSetCallback(void(*ARG_pvoidfUserFunction)(void))
{
    3370:	df 93       	push	r29
    3372:	cf 93       	push	r28
    3374:	00 d0       	rcall	.+0      	; 0x3376 <MADC_voidSetCallback+0x6>
    3376:	cd b7       	in	r28, 0x3d	; 61
    3378:	de b7       	in	r29, 0x3e	; 62
    337a:	9a 83       	std	Y+2, r25	; 0x02
    337c:	89 83       	std	Y+1, r24	; 0x01
	MADC_pvoidfUserFunction = ARG_pvoidfUserFunction;
    337e:	89 81       	ldd	r24, Y+1	; 0x01
    3380:	9a 81       	ldd	r25, Y+2	; 0x02
    3382:	90 93 fb 02 	sts	0x02FB, r25
    3386:	80 93 fa 02 	sts	0x02FA, r24
}
    338a:	0f 90       	pop	r0
    338c:	0f 90       	pop	r0
    338e:	cf 91       	pop	r28
    3390:	df 91       	pop	r29
    3392:	08 95       	ret

00003394 <MADC_u8ReadADC>:

u8	 MADC_u8ReadADC(u8 ARG_u8Channel)
{
    3394:	df 93       	push	r29
    3396:	cf 93       	push	r28
    3398:	0f 92       	push	r0
    339a:	cd b7       	in	r28, 0x3d	; 61
    339c:	de b7       	in	r29, 0x3e	; 62
    339e:	89 83       	std	Y+1, r24	; 0x01
	MADC_voidStartConversion(ARG_u8Channel);
    33a0:	89 81       	ldd	r24, Y+1	; 0x01
    33a2:	0e 94 f3 19 	call	0x33e6	; 0x33e6 <MADC_voidStartConversion>
	MADC_voidFlagPolling();
    33a6:	0e 94 0e 1a 	call	0x341c	; 0x341c <MADC_voidFlagPolling>
	MADC_voidClearFlag();
    33aa:	0e 94 1e 1a 	call	0x343c	; 0x343c <MADC_voidClearFlag>
	return ADCH ;
    33ae:	e5 e2       	ldi	r30, 0x25	; 37
    33b0:	f0 e0       	ldi	r31, 0x00	; 0
    33b2:	80 81       	ld	r24, Z
}
    33b4:	0f 90       	pop	r0
    33b6:	cf 91       	pop	r28
    33b8:	df 91       	pop	r29
    33ba:	08 95       	ret

000033bc <MADC_u16ReadADC>:

u16	 MADC_u16ReadADC(u8 ARG_u8Channel)
{
    33bc:	df 93       	push	r29
    33be:	cf 93       	push	r28
    33c0:	0f 92       	push	r0
    33c2:	cd b7       	in	r28, 0x3d	; 61
    33c4:	de b7       	in	r29, 0x3e	; 62
    33c6:	89 83       	std	Y+1, r24	; 0x01
	MADC_voidStartConversion(ARG_u8Channel);
    33c8:	89 81       	ldd	r24, Y+1	; 0x01
    33ca:	0e 94 f3 19 	call	0x33e6	; 0x33e6 <MADC_voidStartConversion>
	MADC_voidFlagPolling();
    33ce:	0e 94 0e 1a 	call	0x341c	; 0x341c <MADC_voidFlagPolling>
	MADC_voidClearFlag();
    33d2:	0e 94 1e 1a 	call	0x343c	; 0x343c <MADC_voidClearFlag>
	return ADC ;
    33d6:	e4 e2       	ldi	r30, 0x24	; 36
    33d8:	f0 e0       	ldi	r31, 0x00	; 0
    33da:	80 81       	ld	r24, Z
    33dc:	91 81       	ldd	r25, Z+1	; 0x01
}
    33de:	0f 90       	pop	r0
    33e0:	cf 91       	pop	r28
    33e2:	df 91       	pop	r29
    33e4:	08 95       	ret

000033e6 <MADC_voidStartConversion>:

void MADC_voidStartConversion(u8 ARG_u8Channel)
{
    33e6:	df 93       	push	r29
    33e8:	cf 93       	push	r28
    33ea:	0f 92       	push	r0
    33ec:	cd b7       	in	r28, 0x3d	; 61
    33ee:	de b7       	in	r29, 0x3e	; 62
    33f0:	89 83       	std	Y+1, r24	; 0x01
	ADMUX = (ADMUX & 0xE0) | ARG_u8Channel;
    33f2:	a7 e2       	ldi	r26, 0x27	; 39
    33f4:	b0 e0       	ldi	r27, 0x00	; 0
    33f6:	e7 e2       	ldi	r30, 0x27	; 39
    33f8:	f0 e0       	ldi	r31, 0x00	; 0
    33fa:	80 81       	ld	r24, Z
    33fc:	98 2f       	mov	r25, r24
    33fe:	90 7e       	andi	r25, 0xE0	; 224
    3400:	89 81       	ldd	r24, Y+1	; 0x01
    3402:	89 2b       	or	r24, r25
    3404:	8c 93       	st	X, r24
	SET_BIT(ADCSRA, ADSC);
    3406:	a6 e2       	ldi	r26, 0x26	; 38
    3408:	b0 e0       	ldi	r27, 0x00	; 0
    340a:	e6 e2       	ldi	r30, 0x26	; 38
    340c:	f0 e0       	ldi	r31, 0x00	; 0
    340e:	80 81       	ld	r24, Z
    3410:	80 64       	ori	r24, 0x40	; 64
    3412:	8c 93       	st	X, r24
}
    3414:	0f 90       	pop	r0
    3416:	cf 91       	pop	r28
    3418:	df 91       	pop	r29
    341a:	08 95       	ret

0000341c <MADC_voidFlagPolling>:

void MADC_voidFlagPolling(void)
{
    341c:	df 93       	push	r29
    341e:	cf 93       	push	r28
    3420:	cd b7       	in	r28, 0x3d	; 61
    3422:	de b7       	in	r29, 0x3e	; 62
	while(!GET_BIT(ADCSRA, ADIF));
    3424:	e6 e2       	ldi	r30, 0x26	; 38
    3426:	f0 e0       	ldi	r31, 0x00	; 0
    3428:	80 81       	ld	r24, Z
    342a:	88 2f       	mov	r24, r24
    342c:	90 e0       	ldi	r25, 0x00	; 0
    342e:	80 71       	andi	r24, 0x10	; 16
    3430:	90 70       	andi	r25, 0x00	; 0
    3432:	00 97       	sbiw	r24, 0x00	; 0
    3434:	b9 f3       	breq	.-18     	; 0x3424 <MADC_voidFlagPolling+0x8>
}
    3436:	cf 91       	pop	r28
    3438:	df 91       	pop	r29
    343a:	08 95       	ret

0000343c <MADC_voidClearFlag>:

void MADC_voidClearFlag(void)
{
    343c:	df 93       	push	r29
    343e:	cf 93       	push	r28
    3440:	cd b7       	in	r28, 0x3d	; 61
    3442:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADCSRA, ADIF);
    3444:	a6 e2       	ldi	r26, 0x26	; 38
    3446:	b0 e0       	ldi	r27, 0x00	; 0
    3448:	e6 e2       	ldi	r30, 0x26	; 38
    344a:	f0 e0       	ldi	r31, 0x00	; 0
    344c:	80 81       	ld	r24, Z
    344e:	80 61       	ori	r24, 0x10	; 16
    3450:	8c 93       	st	X, r24
}
    3452:	cf 91       	pop	r28
    3454:	df 91       	pop	r29
    3456:	08 95       	ret

00003458 <__vector_16>:

void __vector_16(void) __attribute__((signal));
void __vector_16(void)
{
    3458:	1f 92       	push	r1
    345a:	0f 92       	push	r0
    345c:	0f b6       	in	r0, 0x3f	; 63
    345e:	0f 92       	push	r0
    3460:	11 24       	eor	r1, r1
    3462:	2f 93       	push	r18
    3464:	3f 93       	push	r19
    3466:	4f 93       	push	r20
    3468:	5f 93       	push	r21
    346a:	6f 93       	push	r22
    346c:	7f 93       	push	r23
    346e:	8f 93       	push	r24
    3470:	9f 93       	push	r25
    3472:	af 93       	push	r26
    3474:	bf 93       	push	r27
    3476:	ef 93       	push	r30
    3478:	ff 93       	push	r31
    347a:	df 93       	push	r29
    347c:	cf 93       	push	r28
    347e:	cd b7       	in	r28, 0x3d	; 61
    3480:	de b7       	in	r29, 0x3e	; 62
	if(MADC_pvoidfUserFunction != NULL_POINTER)
    3482:	80 91 fa 02 	lds	r24, 0x02FA
    3486:	90 91 fb 02 	lds	r25, 0x02FB
    348a:	00 97       	sbiw	r24, 0x00	; 0
    348c:	29 f0       	breq	.+10     	; 0x3498 <__vector_16+0x40>
	{
		(*MADC_pvoidfUserFunction)();
    348e:	e0 91 fa 02 	lds	r30, 0x02FA
    3492:	f0 91 fb 02 	lds	r31, 0x02FB
    3496:	09 95       	icall
	}
	else
	{
		/* Do Noting */
	}
}
    3498:	cf 91       	pop	r28
    349a:	df 91       	pop	r29
    349c:	ff 91       	pop	r31
    349e:	ef 91       	pop	r30
    34a0:	bf 91       	pop	r27
    34a2:	af 91       	pop	r26
    34a4:	9f 91       	pop	r25
    34a6:	8f 91       	pop	r24
    34a8:	7f 91       	pop	r23
    34aa:	6f 91       	pop	r22
    34ac:	5f 91       	pop	r21
    34ae:	4f 91       	pop	r20
    34b0:	3f 91       	pop	r19
    34b2:	2f 91       	pop	r18
    34b4:	0f 90       	pop	r0
    34b6:	0f be       	out	0x3f, r0	; 63
    34b8:	0f 90       	pop	r0
    34ba:	1f 90       	pop	r1
    34bc:	18 95       	reti

000034be <main>:

void checkldr(void);


int main()
{
    34be:	0f 93       	push	r16
    34c0:	1f 93       	push	r17
    34c2:	df 93       	push	r29
    34c4:	cf 93       	push	r28
    34c6:	cd b7       	in	r28, 0x3d	; 61
    34c8:	de b7       	in	r29, 0x3e	; 62
    34ca:	c7 56       	subi	r28, 0x67	; 103
    34cc:	d1 40       	sbci	r29, 0x01	; 1
    34ce:	0f b6       	in	r0, 0x3f	; 63
    34d0:	f8 94       	cli
    34d2:	de bf       	out	0x3e, r29	; 62
    34d4:	0f be       	out	0x3f, r0	; 63
    34d6:	cd bf       	out	0x3d, r28	; 61

	GIE_vEnable();
    34d8:	0e 94 7b 0c 	call	0x18f6	; 0x18f6 <GIE_vEnable>
	DIO_u8SetPinDirection(DIO_u8PORTB,DIO_u8PIN1,DIO_u8PIN_OUTPUT);
    34dc:	81 e0       	ldi	r24, 0x01	; 1
    34de:	61 e0       	ldi	r22, 0x01	; 1
    34e0:	41 e0       	ldi	r20, 0x01	; 1
    34e2:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <DIO_u8SetPinDirection>
	char arr[][13]={"1.Door","2.Lights","3.Fan","4.Music","5.Tempreature",""};
    34e6:	ce 01       	movw	r24, r28
    34e8:	8b 50       	subi	r24, 0x0B	; 11
    34ea:	9f 4f       	sbci	r25, 0xFF	; 255
    34ec:	2e e4       	ldi	r18, 0x4E	; 78
    34ee:	fc 01       	movw	r30, r24
    34f0:	df 01       	movw	r26, r30
    34f2:	32 2f       	mov	r19, r18
    34f4:	1d 92       	st	X+, r1
    34f6:	3a 95       	dec	r19
    34f8:	e9 f7       	brne	.-6      	; 0x34f4 <main+0x36>
    34fa:	ce 01       	movw	r24, r28
    34fc:	8b 50       	subi	r24, 0x0B	; 11
    34fe:	9f 4f       	sbci	r25, 0xFF	; 255
    3500:	cb 5b       	subi	r28, 0xBB	; 187
    3502:	de 4f       	sbci	r29, 0xFE	; 254
    3504:	99 83       	std	Y+1, r25	; 0x01
    3506:	88 83       	st	Y, r24
    3508:	c5 54       	subi	r28, 0x45	; 69
    350a:	d1 40       	sbci	r29, 0x01	; 1
    350c:	cb 5b       	subi	r28, 0xBB	; 187
    350e:	de 4f       	sbci	r29, 0xFE	; 254
    3510:	a8 81       	ld	r26, Y
    3512:	b9 81       	ldd	r27, Y+1	; 0x01
    3514:	c5 54       	subi	r28, 0x45	; 69
    3516:	d1 40       	sbci	r29, 0x01	; 1
    3518:	c9 5b       	subi	r28, 0xB9	; 185
    351a:	de 4f       	sbci	r29, 0xFE	; 254
    351c:	b9 83       	std	Y+1, r27	; 0x01
    351e:	a8 83       	st	Y, r26
    3520:	c7 54       	subi	r28, 0x47	; 71
    3522:	d1 40       	sbci	r29, 0x01	; 1
    3524:	ee e8       	ldi	r30, 0x8E	; 142
    3526:	f1 e0       	ldi	r31, 0x01	; 1
    3528:	c7 5b       	subi	r28, 0xB7	; 183
    352a:	de 4f       	sbci	r29, 0xFE	; 254
    352c:	f9 83       	std	Y+1, r31	; 0x01
    352e:	e8 83       	st	Y, r30
    3530:	c9 54       	subi	r28, 0x49	; 73
    3532:	d1 40       	sbci	r29, 0x01	; 1
    3534:	f7 e0       	ldi	r31, 0x07	; 7
    3536:	c5 5b       	subi	r28, 0xB5	; 181
    3538:	de 4f       	sbci	r29, 0xFE	; 254
    353a:	f8 83       	st	Y, r31
    353c:	cb 54       	subi	r28, 0x4B	; 75
    353e:	d1 40       	sbci	r29, 0x01	; 1
    3540:	c7 5b       	subi	r28, 0xB7	; 183
    3542:	de 4f       	sbci	r29, 0xFE	; 254
    3544:	a8 81       	ld	r26, Y
    3546:	b9 81       	ldd	r27, Y+1	; 0x01
    3548:	c9 54       	subi	r28, 0x49	; 73
    354a:	d1 40       	sbci	r29, 0x01	; 1
    354c:	0c 90       	ld	r0, X
    354e:	c7 5b       	subi	r28, 0xB7	; 183
    3550:	de 4f       	sbci	r29, 0xFE	; 254
    3552:	e8 81       	ld	r30, Y
    3554:	f9 81       	ldd	r31, Y+1	; 0x01
    3556:	c9 54       	subi	r28, 0x49	; 73
    3558:	d1 40       	sbci	r29, 0x01	; 1
    355a:	31 96       	adiw	r30, 0x01	; 1
    355c:	c7 5b       	subi	r28, 0xB7	; 183
    355e:	de 4f       	sbci	r29, 0xFE	; 254
    3560:	f9 83       	std	Y+1, r31	; 0x01
    3562:	e8 83       	st	Y, r30
    3564:	c9 54       	subi	r28, 0x49	; 73
    3566:	d1 40       	sbci	r29, 0x01	; 1
    3568:	c9 5b       	subi	r28, 0xB9	; 185
    356a:	de 4f       	sbci	r29, 0xFE	; 254
    356c:	a8 81       	ld	r26, Y
    356e:	b9 81       	ldd	r27, Y+1	; 0x01
    3570:	c7 54       	subi	r28, 0x47	; 71
    3572:	d1 40       	sbci	r29, 0x01	; 1
    3574:	0c 92       	st	X, r0
    3576:	c9 5b       	subi	r28, 0xB9	; 185
    3578:	de 4f       	sbci	r29, 0xFE	; 254
    357a:	e8 81       	ld	r30, Y
    357c:	f9 81       	ldd	r31, Y+1	; 0x01
    357e:	c7 54       	subi	r28, 0x47	; 71
    3580:	d1 40       	sbci	r29, 0x01	; 1
    3582:	31 96       	adiw	r30, 0x01	; 1
    3584:	c9 5b       	subi	r28, 0xB9	; 185
    3586:	de 4f       	sbci	r29, 0xFE	; 254
    3588:	f9 83       	std	Y+1, r31	; 0x01
    358a:	e8 83       	st	Y, r30
    358c:	c7 54       	subi	r28, 0x47	; 71
    358e:	d1 40       	sbci	r29, 0x01	; 1
    3590:	c5 5b       	subi	r28, 0xB5	; 181
    3592:	de 4f       	sbci	r29, 0xFE	; 254
    3594:	f8 81       	ld	r31, Y
    3596:	cb 54       	subi	r28, 0x4B	; 75
    3598:	d1 40       	sbci	r29, 0x01	; 1
    359a:	f1 50       	subi	r31, 0x01	; 1
    359c:	c5 5b       	subi	r28, 0xB5	; 181
    359e:	de 4f       	sbci	r29, 0xFE	; 254
    35a0:	f8 83       	st	Y, r31
    35a2:	cb 54       	subi	r28, 0x4B	; 75
    35a4:	d1 40       	sbci	r29, 0x01	; 1
    35a6:	c5 5b       	subi	r28, 0xB5	; 181
    35a8:	de 4f       	sbci	r29, 0xFE	; 254
    35aa:	28 81       	ld	r18, Y
    35ac:	cb 54       	subi	r28, 0x4B	; 75
    35ae:	d1 40       	sbci	r29, 0x01	; 1
    35b0:	22 23       	and	r18, r18
    35b2:	31 f6       	brne	.-116    	; 0x3540 <main+0x82>
    35b4:	86 e0       	ldi	r24, 0x06	; 6
    35b6:	cb 5b       	subi	r28, 0xBB	; 187
    35b8:	de 4f       	sbci	r29, 0xFE	; 254
    35ba:	e8 81       	ld	r30, Y
    35bc:	f9 81       	ldd	r31, Y+1	; 0x01
    35be:	c5 54       	subi	r28, 0x45	; 69
    35c0:	d1 40       	sbci	r29, 0x01	; 1
    35c2:	37 96       	adiw	r30, 0x07	; 7
    35c4:	df 01       	movw	r26, r30
    35c6:	28 2f       	mov	r18, r24
    35c8:	1d 92       	st	X+, r1
    35ca:	2a 95       	dec	r18
    35cc:	e9 f7       	brne	.-6      	; 0x35c8 <main+0x10a>
    35ce:	ce 01       	movw	r24, r28
    35d0:	8b 50       	subi	r24, 0x0B	; 11
    35d2:	9f 4f       	sbci	r25, 0xFF	; 255
    35d4:	c4 5b       	subi	r28, 0xB4	; 180
    35d6:	de 4f       	sbci	r29, 0xFE	; 254
    35d8:	99 83       	std	Y+1, r25	; 0x01
    35da:	88 83       	st	Y, r24
    35dc:	cc 54       	subi	r28, 0x4C	; 76
    35de:	d1 40       	sbci	r29, 0x01	; 1
    35e0:	c4 5b       	subi	r28, 0xB4	; 180
    35e2:	de 4f       	sbci	r29, 0xFE	; 254
    35e4:	a8 81       	ld	r26, Y
    35e6:	b9 81       	ldd	r27, Y+1	; 0x01
    35e8:	cc 54       	subi	r28, 0x4C	; 76
    35ea:	d1 40       	sbci	r29, 0x01	; 1
    35ec:	1d 96       	adiw	r26, 0x0d	; 13
    35ee:	c2 5b       	subi	r28, 0xB2	; 178
    35f0:	de 4f       	sbci	r29, 0xFE	; 254
    35f2:	b9 83       	std	Y+1, r27	; 0x01
    35f4:	a8 83       	st	Y, r26
    35f6:	ce 54       	subi	r28, 0x4E	; 78
    35f8:	d1 40       	sbci	r29, 0x01	; 1
    35fa:	eb e9       	ldi	r30, 0x9B	; 155
    35fc:	f1 e0       	ldi	r31, 0x01	; 1
    35fe:	c0 5b       	subi	r28, 0xB0	; 176
    3600:	de 4f       	sbci	r29, 0xFE	; 254
    3602:	f9 83       	std	Y+1, r31	; 0x01
    3604:	e8 83       	st	Y, r30
    3606:	c0 55       	subi	r28, 0x50	; 80
    3608:	d1 40       	sbci	r29, 0x01	; 1
    360a:	f9 e0       	ldi	r31, 0x09	; 9
    360c:	ce 5a       	subi	r28, 0xAE	; 174
    360e:	de 4f       	sbci	r29, 0xFE	; 254
    3610:	f8 83       	st	Y, r31
    3612:	c2 55       	subi	r28, 0x52	; 82
    3614:	d1 40       	sbci	r29, 0x01	; 1
    3616:	c0 5b       	subi	r28, 0xB0	; 176
    3618:	de 4f       	sbci	r29, 0xFE	; 254
    361a:	a8 81       	ld	r26, Y
    361c:	b9 81       	ldd	r27, Y+1	; 0x01
    361e:	c0 55       	subi	r28, 0x50	; 80
    3620:	d1 40       	sbci	r29, 0x01	; 1
    3622:	0c 90       	ld	r0, X
    3624:	c0 5b       	subi	r28, 0xB0	; 176
    3626:	de 4f       	sbci	r29, 0xFE	; 254
    3628:	e8 81       	ld	r30, Y
    362a:	f9 81       	ldd	r31, Y+1	; 0x01
    362c:	c0 55       	subi	r28, 0x50	; 80
    362e:	d1 40       	sbci	r29, 0x01	; 1
    3630:	31 96       	adiw	r30, 0x01	; 1
    3632:	c0 5b       	subi	r28, 0xB0	; 176
    3634:	de 4f       	sbci	r29, 0xFE	; 254
    3636:	f9 83       	std	Y+1, r31	; 0x01
    3638:	e8 83       	st	Y, r30
    363a:	c0 55       	subi	r28, 0x50	; 80
    363c:	d1 40       	sbci	r29, 0x01	; 1
    363e:	c2 5b       	subi	r28, 0xB2	; 178
    3640:	de 4f       	sbci	r29, 0xFE	; 254
    3642:	a8 81       	ld	r26, Y
    3644:	b9 81       	ldd	r27, Y+1	; 0x01
    3646:	ce 54       	subi	r28, 0x4E	; 78
    3648:	d1 40       	sbci	r29, 0x01	; 1
    364a:	0c 92       	st	X, r0
    364c:	c2 5b       	subi	r28, 0xB2	; 178
    364e:	de 4f       	sbci	r29, 0xFE	; 254
    3650:	e8 81       	ld	r30, Y
    3652:	f9 81       	ldd	r31, Y+1	; 0x01
    3654:	ce 54       	subi	r28, 0x4E	; 78
    3656:	d1 40       	sbci	r29, 0x01	; 1
    3658:	31 96       	adiw	r30, 0x01	; 1
    365a:	c2 5b       	subi	r28, 0xB2	; 178
    365c:	de 4f       	sbci	r29, 0xFE	; 254
    365e:	f9 83       	std	Y+1, r31	; 0x01
    3660:	e8 83       	st	Y, r30
    3662:	ce 54       	subi	r28, 0x4E	; 78
    3664:	d1 40       	sbci	r29, 0x01	; 1
    3666:	ce 5a       	subi	r28, 0xAE	; 174
    3668:	de 4f       	sbci	r29, 0xFE	; 254
    366a:	f8 81       	ld	r31, Y
    366c:	c2 55       	subi	r28, 0x52	; 82
    366e:	d1 40       	sbci	r29, 0x01	; 1
    3670:	f1 50       	subi	r31, 0x01	; 1
    3672:	ce 5a       	subi	r28, 0xAE	; 174
    3674:	de 4f       	sbci	r29, 0xFE	; 254
    3676:	f8 83       	st	Y, r31
    3678:	c2 55       	subi	r28, 0x52	; 82
    367a:	d1 40       	sbci	r29, 0x01	; 1
    367c:	ce 5a       	subi	r28, 0xAE	; 174
    367e:	de 4f       	sbci	r29, 0xFE	; 254
    3680:	28 81       	ld	r18, Y
    3682:	c2 55       	subi	r28, 0x52	; 82
    3684:	d1 40       	sbci	r29, 0x01	; 1
    3686:	22 23       	and	r18, r18
    3688:	31 f6       	brne	.-116    	; 0x3616 <main+0x158>
    368a:	c4 5b       	subi	r28, 0xB4	; 180
    368c:	de 4f       	sbci	r29, 0xFE	; 254
    368e:	a8 81       	ld	r26, Y
    3690:	b9 81       	ldd	r27, Y+1	; 0x01
    3692:	cc 54       	subi	r28, 0x4C	; 76
    3694:	d1 40       	sbci	r29, 0x01	; 1
    3696:	56 96       	adiw	r26, 0x16	; 22
    3698:	1d 92       	st	X+, r1
    369a:	1d 92       	st	X+, r1
    369c:	1d 92       	st	X+, r1
    369e:	1c 92       	st	X, r1
    36a0:	59 97       	sbiw	r26, 0x19	; 25
    36a2:	fe 01       	movw	r30, r28
    36a4:	eb 50       	subi	r30, 0x0B	; 11
    36a6:	ff 4f       	sbci	r31, 0xFF	; 255
    36a8:	cd 5a       	subi	r28, 0xAD	; 173
    36aa:	de 4f       	sbci	r29, 0xFE	; 254
    36ac:	f9 83       	std	Y+1, r31	; 0x01
    36ae:	e8 83       	st	Y, r30
    36b0:	c3 55       	subi	r28, 0x53	; 83
    36b2:	d1 40       	sbci	r29, 0x01	; 1
    36b4:	cd 5a       	subi	r28, 0xAD	; 173
    36b6:	de 4f       	sbci	r29, 0xFE	; 254
    36b8:	28 81       	ld	r18, Y
    36ba:	39 81       	ldd	r19, Y+1	; 0x01
    36bc:	c3 55       	subi	r28, 0x53	; 83
    36be:	d1 40       	sbci	r29, 0x01	; 1
    36c0:	26 5e       	subi	r18, 0xE6	; 230
    36c2:	3f 4f       	sbci	r19, 0xFF	; 255
    36c4:	cb 5a       	subi	r28, 0xAB	; 171
    36c6:	de 4f       	sbci	r29, 0xFE	; 254
    36c8:	39 83       	std	Y+1, r19	; 0x01
    36ca:	28 83       	st	Y, r18
    36cc:	c5 55       	subi	r28, 0x55	; 85
    36ce:	d1 40       	sbci	r29, 0x01	; 1
    36d0:	88 ea       	ldi	r24, 0xA8	; 168
    36d2:	91 e0       	ldi	r25, 0x01	; 1
    36d4:	c9 5a       	subi	r28, 0xA9	; 169
    36d6:	de 4f       	sbci	r29, 0xFE	; 254
    36d8:	99 83       	std	Y+1, r25	; 0x01
    36da:	88 83       	st	Y, r24
    36dc:	c7 55       	subi	r28, 0x57	; 87
    36de:	d1 40       	sbci	r29, 0x01	; 1
    36e0:	96 e0       	ldi	r25, 0x06	; 6
    36e2:	c7 5a       	subi	r28, 0xA7	; 167
    36e4:	de 4f       	sbci	r29, 0xFE	; 254
    36e6:	98 83       	st	Y, r25
    36e8:	c9 55       	subi	r28, 0x59	; 89
    36ea:	d1 40       	sbci	r29, 0x01	; 1
    36ec:	c9 5a       	subi	r28, 0xA9	; 169
    36ee:	de 4f       	sbci	r29, 0xFE	; 254
    36f0:	a8 81       	ld	r26, Y
    36f2:	b9 81       	ldd	r27, Y+1	; 0x01
    36f4:	c7 55       	subi	r28, 0x57	; 87
    36f6:	d1 40       	sbci	r29, 0x01	; 1
    36f8:	0c 90       	ld	r0, X
    36fa:	c9 5a       	subi	r28, 0xA9	; 169
    36fc:	de 4f       	sbci	r29, 0xFE	; 254
    36fe:	e8 81       	ld	r30, Y
    3700:	f9 81       	ldd	r31, Y+1	; 0x01
    3702:	c7 55       	subi	r28, 0x57	; 87
    3704:	d1 40       	sbci	r29, 0x01	; 1
    3706:	31 96       	adiw	r30, 0x01	; 1
    3708:	c9 5a       	subi	r28, 0xA9	; 169
    370a:	de 4f       	sbci	r29, 0xFE	; 254
    370c:	f9 83       	std	Y+1, r31	; 0x01
    370e:	e8 83       	st	Y, r30
    3710:	c7 55       	subi	r28, 0x57	; 87
    3712:	d1 40       	sbci	r29, 0x01	; 1
    3714:	cb 5a       	subi	r28, 0xAB	; 171
    3716:	de 4f       	sbci	r29, 0xFE	; 254
    3718:	a8 81       	ld	r26, Y
    371a:	b9 81       	ldd	r27, Y+1	; 0x01
    371c:	c5 55       	subi	r28, 0x55	; 85
    371e:	d1 40       	sbci	r29, 0x01	; 1
    3720:	0c 92       	st	X, r0
    3722:	cb 5a       	subi	r28, 0xAB	; 171
    3724:	de 4f       	sbci	r29, 0xFE	; 254
    3726:	e8 81       	ld	r30, Y
    3728:	f9 81       	ldd	r31, Y+1	; 0x01
    372a:	c5 55       	subi	r28, 0x55	; 85
    372c:	d1 40       	sbci	r29, 0x01	; 1
    372e:	31 96       	adiw	r30, 0x01	; 1
    3730:	cb 5a       	subi	r28, 0xAB	; 171
    3732:	de 4f       	sbci	r29, 0xFE	; 254
    3734:	f9 83       	std	Y+1, r31	; 0x01
    3736:	e8 83       	st	Y, r30
    3738:	c5 55       	subi	r28, 0x55	; 85
    373a:	d1 40       	sbci	r29, 0x01	; 1
    373c:	c7 5a       	subi	r28, 0xA7	; 167
    373e:	de 4f       	sbci	r29, 0xFE	; 254
    3740:	f8 81       	ld	r31, Y
    3742:	c9 55       	subi	r28, 0x59	; 89
    3744:	d1 40       	sbci	r29, 0x01	; 1
    3746:	f1 50       	subi	r31, 0x01	; 1
    3748:	c7 5a       	subi	r28, 0xA7	; 167
    374a:	de 4f       	sbci	r29, 0xFE	; 254
    374c:	f8 83       	st	Y, r31
    374e:	c9 55       	subi	r28, 0x59	; 89
    3750:	d1 40       	sbci	r29, 0x01	; 1
    3752:	c7 5a       	subi	r28, 0xA7	; 167
    3754:	de 4f       	sbci	r29, 0xFE	; 254
    3756:	28 81       	ld	r18, Y
    3758:	c9 55       	subi	r28, 0x59	; 89
    375a:	d1 40       	sbci	r29, 0x01	; 1
    375c:	22 23       	and	r18, r18
    375e:	31 f6       	brne	.-116    	; 0x36ec <main+0x22e>
    3760:	87 e0       	ldi	r24, 0x07	; 7
    3762:	cd 5a       	subi	r28, 0xAD	; 173
    3764:	de 4f       	sbci	r29, 0xFE	; 254
    3766:	e8 81       	ld	r30, Y
    3768:	f9 81       	ldd	r31, Y+1	; 0x01
    376a:	c3 55       	subi	r28, 0x53	; 83
    376c:	d1 40       	sbci	r29, 0x01	; 1
    376e:	b0 96       	adiw	r30, 0x20	; 32
    3770:	df 01       	movw	r26, r30
    3772:	28 2f       	mov	r18, r24
    3774:	1d 92       	st	X+, r1
    3776:	2a 95       	dec	r18
    3778:	e9 f7       	brne	.-6      	; 0x3774 <main+0x2b6>
    377a:	ce 01       	movw	r24, r28
    377c:	8b 50       	subi	r24, 0x0B	; 11
    377e:	9f 4f       	sbci	r25, 0xFF	; 255
    3780:	c6 5a       	subi	r28, 0xA6	; 166
    3782:	de 4f       	sbci	r29, 0xFE	; 254
    3784:	99 83       	std	Y+1, r25	; 0x01
    3786:	88 83       	st	Y, r24
    3788:	ca 55       	subi	r28, 0x5A	; 90
    378a:	d1 40       	sbci	r29, 0x01	; 1
    378c:	c6 5a       	subi	r28, 0xA6	; 166
    378e:	de 4f       	sbci	r29, 0xFE	; 254
    3790:	a8 81       	ld	r26, Y
    3792:	b9 81       	ldd	r27, Y+1	; 0x01
    3794:	ca 55       	subi	r28, 0x5A	; 90
    3796:	d1 40       	sbci	r29, 0x01	; 1
    3798:	97 96       	adiw	r26, 0x27	; 39
    379a:	c4 5a       	subi	r28, 0xA4	; 164
    379c:	de 4f       	sbci	r29, 0xFE	; 254
    379e:	b9 83       	std	Y+1, r27	; 0x01
    37a0:	a8 83       	st	Y, r26
    37a2:	cc 55       	subi	r28, 0x5C	; 92
    37a4:	d1 40       	sbci	r29, 0x01	; 1
    37a6:	e5 eb       	ldi	r30, 0xB5	; 181
    37a8:	f1 e0       	ldi	r31, 0x01	; 1
    37aa:	c2 5a       	subi	r28, 0xA2	; 162
    37ac:	de 4f       	sbci	r29, 0xFE	; 254
    37ae:	f9 83       	std	Y+1, r31	; 0x01
    37b0:	e8 83       	st	Y, r30
    37b2:	ce 55       	subi	r28, 0x5E	; 94
    37b4:	d1 40       	sbci	r29, 0x01	; 1
    37b6:	f8 e0       	ldi	r31, 0x08	; 8
    37b8:	c0 5a       	subi	r28, 0xA0	; 160
    37ba:	de 4f       	sbci	r29, 0xFE	; 254
    37bc:	f8 83       	st	Y, r31
    37be:	c0 56       	subi	r28, 0x60	; 96
    37c0:	d1 40       	sbci	r29, 0x01	; 1
    37c2:	c2 5a       	subi	r28, 0xA2	; 162
    37c4:	de 4f       	sbci	r29, 0xFE	; 254
    37c6:	a8 81       	ld	r26, Y
    37c8:	b9 81       	ldd	r27, Y+1	; 0x01
    37ca:	ce 55       	subi	r28, 0x5E	; 94
    37cc:	d1 40       	sbci	r29, 0x01	; 1
    37ce:	0c 90       	ld	r0, X
    37d0:	c2 5a       	subi	r28, 0xA2	; 162
    37d2:	de 4f       	sbci	r29, 0xFE	; 254
    37d4:	e8 81       	ld	r30, Y
    37d6:	f9 81       	ldd	r31, Y+1	; 0x01
    37d8:	ce 55       	subi	r28, 0x5E	; 94
    37da:	d1 40       	sbci	r29, 0x01	; 1
    37dc:	31 96       	adiw	r30, 0x01	; 1
    37de:	c2 5a       	subi	r28, 0xA2	; 162
    37e0:	de 4f       	sbci	r29, 0xFE	; 254
    37e2:	f9 83       	std	Y+1, r31	; 0x01
    37e4:	e8 83       	st	Y, r30
    37e6:	ce 55       	subi	r28, 0x5E	; 94
    37e8:	d1 40       	sbci	r29, 0x01	; 1
    37ea:	c4 5a       	subi	r28, 0xA4	; 164
    37ec:	de 4f       	sbci	r29, 0xFE	; 254
    37ee:	a8 81       	ld	r26, Y
    37f0:	b9 81       	ldd	r27, Y+1	; 0x01
    37f2:	cc 55       	subi	r28, 0x5C	; 92
    37f4:	d1 40       	sbci	r29, 0x01	; 1
    37f6:	0c 92       	st	X, r0
    37f8:	c4 5a       	subi	r28, 0xA4	; 164
    37fa:	de 4f       	sbci	r29, 0xFE	; 254
    37fc:	e8 81       	ld	r30, Y
    37fe:	f9 81       	ldd	r31, Y+1	; 0x01
    3800:	cc 55       	subi	r28, 0x5C	; 92
    3802:	d1 40       	sbci	r29, 0x01	; 1
    3804:	31 96       	adiw	r30, 0x01	; 1
    3806:	c4 5a       	subi	r28, 0xA4	; 164
    3808:	de 4f       	sbci	r29, 0xFE	; 254
    380a:	f9 83       	std	Y+1, r31	; 0x01
    380c:	e8 83       	st	Y, r30
    380e:	cc 55       	subi	r28, 0x5C	; 92
    3810:	d1 40       	sbci	r29, 0x01	; 1
    3812:	c0 5a       	subi	r28, 0xA0	; 160
    3814:	de 4f       	sbci	r29, 0xFE	; 254
    3816:	f8 81       	ld	r31, Y
    3818:	c0 56       	subi	r28, 0x60	; 96
    381a:	d1 40       	sbci	r29, 0x01	; 1
    381c:	f1 50       	subi	r31, 0x01	; 1
    381e:	c0 5a       	subi	r28, 0xA0	; 160
    3820:	de 4f       	sbci	r29, 0xFE	; 254
    3822:	f8 83       	st	Y, r31
    3824:	c0 56       	subi	r28, 0x60	; 96
    3826:	d1 40       	sbci	r29, 0x01	; 1
    3828:	c0 5a       	subi	r28, 0xA0	; 160
    382a:	de 4f       	sbci	r29, 0xFE	; 254
    382c:	28 81       	ld	r18, Y
    382e:	c0 56       	subi	r28, 0x60	; 96
    3830:	d1 40       	sbci	r29, 0x01	; 1
    3832:	22 23       	and	r18, r18
    3834:	31 f6       	brne	.-116    	; 0x37c2 <main+0x304>
    3836:	85 e0       	ldi	r24, 0x05	; 5
    3838:	c6 5a       	subi	r28, 0xA6	; 166
    383a:	de 4f       	sbci	r29, 0xFE	; 254
    383c:	e8 81       	ld	r30, Y
    383e:	f9 81       	ldd	r31, Y+1	; 0x01
    3840:	ca 55       	subi	r28, 0x5A	; 90
    3842:	d1 40       	sbci	r29, 0x01	; 1
    3844:	bf 96       	adiw	r30, 0x2f	; 47
    3846:	df 01       	movw	r26, r30
    3848:	28 2f       	mov	r18, r24
    384a:	1d 92       	st	X+, r1
    384c:	2a 95       	dec	r18
    384e:	e9 f7       	brne	.-6      	; 0x384a <main+0x38c>
    3850:	ce 01       	movw	r24, r28
    3852:	8b 50       	subi	r24, 0x0B	; 11
    3854:	9f 4f       	sbci	r25, 0xFF	; 255
    3856:	dc 01       	movw	r26, r24
    3858:	d4 96       	adiw	r26, 0x34	; 52
    385a:	cf 59       	subi	r28, 0x9F	; 159
    385c:	de 4f       	sbci	r29, 0xFE	; 254
    385e:	b9 83       	std	Y+1, r27	; 0x01
    3860:	a8 83       	st	Y, r26
    3862:	c1 56       	subi	r28, 0x61	; 97
    3864:	d1 40       	sbci	r29, 0x01	; 1
    3866:	e2 ec       	ldi	r30, 0xC2	; 194
    3868:	f1 e0       	ldi	r31, 0x01	; 1
    386a:	cd 59       	subi	r28, 0x9D	; 157
    386c:	de 4f       	sbci	r29, 0xFE	; 254
    386e:	f9 83       	std	Y+1, r31	; 0x01
    3870:	e8 83       	st	Y, r30
    3872:	c3 56       	subi	r28, 0x63	; 99
    3874:	d1 40       	sbci	r29, 0x01	; 1
    3876:	fd e0       	ldi	r31, 0x0D	; 13
    3878:	cb 59       	subi	r28, 0x9B	; 155
    387a:	de 4f       	sbci	r29, 0xFE	; 254
    387c:	f8 83       	st	Y, r31
    387e:	c5 56       	subi	r28, 0x65	; 101
    3880:	d1 40       	sbci	r29, 0x01	; 1
    3882:	cd 59       	subi	r28, 0x9D	; 157
    3884:	de 4f       	sbci	r29, 0xFE	; 254
    3886:	a8 81       	ld	r26, Y
    3888:	b9 81       	ldd	r27, Y+1	; 0x01
    388a:	c3 56       	subi	r28, 0x63	; 99
    388c:	d1 40       	sbci	r29, 0x01	; 1
    388e:	0c 90       	ld	r0, X
    3890:	cd 59       	subi	r28, 0x9D	; 157
    3892:	de 4f       	sbci	r29, 0xFE	; 254
    3894:	e8 81       	ld	r30, Y
    3896:	f9 81       	ldd	r31, Y+1	; 0x01
    3898:	c3 56       	subi	r28, 0x63	; 99
    389a:	d1 40       	sbci	r29, 0x01	; 1
    389c:	31 96       	adiw	r30, 0x01	; 1
    389e:	cd 59       	subi	r28, 0x9D	; 157
    38a0:	de 4f       	sbci	r29, 0xFE	; 254
    38a2:	f9 83       	std	Y+1, r31	; 0x01
    38a4:	e8 83       	st	Y, r30
    38a6:	c3 56       	subi	r28, 0x63	; 99
    38a8:	d1 40       	sbci	r29, 0x01	; 1
    38aa:	cf 59       	subi	r28, 0x9F	; 159
    38ac:	de 4f       	sbci	r29, 0xFE	; 254
    38ae:	a8 81       	ld	r26, Y
    38b0:	b9 81       	ldd	r27, Y+1	; 0x01
    38b2:	c1 56       	subi	r28, 0x61	; 97
    38b4:	d1 40       	sbci	r29, 0x01	; 1
    38b6:	0c 92       	st	X, r0
    38b8:	cf 59       	subi	r28, 0x9F	; 159
    38ba:	de 4f       	sbci	r29, 0xFE	; 254
    38bc:	e8 81       	ld	r30, Y
    38be:	f9 81       	ldd	r31, Y+1	; 0x01
    38c0:	c1 56       	subi	r28, 0x61	; 97
    38c2:	d1 40       	sbci	r29, 0x01	; 1
    38c4:	31 96       	adiw	r30, 0x01	; 1
    38c6:	cf 59       	subi	r28, 0x9F	; 159
    38c8:	de 4f       	sbci	r29, 0xFE	; 254
    38ca:	f9 83       	std	Y+1, r31	; 0x01
    38cc:	e8 83       	st	Y, r30
    38ce:	c1 56       	subi	r28, 0x61	; 97
    38d0:	d1 40       	sbci	r29, 0x01	; 1
    38d2:	cb 59       	subi	r28, 0x9B	; 155
    38d4:	de 4f       	sbci	r29, 0xFE	; 254
    38d6:	f8 81       	ld	r31, Y
    38d8:	c5 56       	subi	r28, 0x65	; 101
    38da:	d1 40       	sbci	r29, 0x01	; 1
    38dc:	f1 50       	subi	r31, 0x01	; 1
    38de:	cb 59       	subi	r28, 0x9B	; 155
    38e0:	de 4f       	sbci	r29, 0xFE	; 254
    38e2:	f8 83       	st	Y, r31
    38e4:	c5 56       	subi	r28, 0x65	; 101
    38e6:	d1 40       	sbci	r29, 0x01	; 1
    38e8:	cb 59       	subi	r28, 0x9B	; 155
    38ea:	de 4f       	sbci	r29, 0xFE	; 254
    38ec:	28 81       	ld	r18, Y
    38ee:	c5 56       	subi	r28, 0x65	; 101
    38f0:	d1 40       	sbci	r29, 0x01	; 1
    38f2:	22 23       	and	r18, r18
    38f4:	31 f6       	brne	.-116    	; 0x3882 <main+0x3c4>
    38f6:	ce 01       	movw	r24, r28
    38f8:	8b 50       	subi	r24, 0x0B	; 11
    38fa:	9f 4f       	sbci	r25, 0xFF	; 255
    38fc:	fc 01       	movw	r30, r24
    38fe:	ef 5b       	subi	r30, 0xBF	; 191
    3900:	ff 4f       	sbci	r31, 0xFF	; 255
    3902:	10 82       	st	Z, r1
    3904:	11 82       	std	Z+1, r1	; 0x01
    3906:	12 82       	std	Z+2, r1	; 0x02
    3908:	13 82       	std	Z+3, r1	; 0x03
    390a:	89 e0       	ldi	r24, 0x09	; 9
    390c:	34 96       	adiw	r30, 0x04	; 4
    390e:	df 01       	movw	r26, r30
    3910:	28 2f       	mov	r18, r24
    3912:	1d 92       	st	X+, r1
    3914:	2a 95       	dec	r18
    3916:	e9 f7       	brne	.-6      	; 0x3912 <main+0x454>
	CLCD_vInit();
    3918:	0e 94 bf 12 	call	0x257e	; 0x257e <CLCD_vInit>
	KPD_vKPDInit();
    391c:	0e 94 93 0b 	call	0x1726	; 0x1726 <KPD_vKPDInit>
	Timer1_vInit();
    3920:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <Timer1_vInit>
	Timer0_vInit();
    3924:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <Timer0_vInit>
	Timer1_vSetICR(20000);
    3928:	80 e2       	ldi	r24, 0x20	; 32
    392a:	9e e4       	ldi	r25, 0x4E	; 78
    392c:	0e 94 be 07 	call	0xf7c	; 0xf7c <Timer1_vSetICR>
	DIO_u8SetPinDirection(DIO_u8PORTD,DIO_u8PIN5,DIO_u8PIN_OUTPUT);
    3930:	83 e0       	ldi	r24, 0x03	; 3
    3932:	65 e0       	ldi	r22, 0x05	; 5
    3934:	41 e0       	ldi	r20, 0x01	; 1
    3936:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <DIO_u8SetPinDirection>
	DIO_u8SetPinValue(DIO_u8PORTD,DIO_u8PIN5,DIO_u8PIN_LOW);
    393a:	83 e0       	ldi	r24, 0x03	; 3
    393c:	65 e0       	ldi	r22, 0x05	; 5
    393e:	40 e0       	ldi	r20, 0x00	; 0
    3940:	0e 94 47 10 	call	0x208e	; 0x208e <DIO_u8SetPinValue>



	DIO_u8SetPinDirection(DIO_u8PORTD, DIO_u8PIN0, DIO_u8PIN_OUTPUT);
    3944:	83 e0       	ldi	r24, 0x03	; 3
    3946:	60 e0       	ldi	r22, 0x00	; 0
    3948:	41 e0       	ldi	r20, 0x01	; 1
    394a:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <DIO_u8SetPinDirection>
	MADC_voidInit(MADC_VREF_AVCC, MADC_PRESCALER_16, MADC_RESOLUTION_8BITS);
    394e:	81 e0       	ldi	r24, 0x01	; 1
    3950:	64 e0       	ldi	r22, 0x04	; 4
    3952:	41 e0       	ldi	r20, 0x01	; 1
    3954:	0e 94 38 19 	call	0x3270	; 0x3270 <MADC_voidInit>
	u8 reading;

	DIO_u8SetPinDirection(DIO_u8PORTD,DIO_u8PIN3,DIO_u8PIN_OUTPUT);
    3958:	83 e0       	ldi	r24, 0x03	; 3
    395a:	63 e0       	ldi	r22, 0x03	; 3
    395c:	41 e0       	ldi	r20, 0x01	; 1
    395e:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <DIO_u8SetPinDirection>
	DIO_u8SetPinValue(DIO_u8PORTD,DIO_u8PIN3,DIO_u8PIN_LOW);
    3962:	83 e0       	ldi	r24, 0x03	; 3
    3964:	63 e0       	ldi	r22, 0x03	; 3
    3966:	40 e0       	ldi	r20, 0x00	; 0
    3968:	0e 94 47 10 	call	0x208e	; 0x208e <DIO_u8SetPinValue>

	DIO_u8SetPinDirection(DIO_u8PORTB,DIO_u8PIN0,DIO_u8PIN_OUTPUT);
    396c:	81 e0       	ldi	r24, 0x01	; 1
    396e:	60 e0       	ldi	r22, 0x00	; 0
    3970:	41 e0       	ldi	r20, 0x01	; 1
    3972:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <DIO_u8SetPinDirection>
	DIO_u8SetPinValue(DIO_u8PORTB,DIO_u8PIN0,DIO_u8PIN_LOW);
    3976:	81 e0       	ldi	r24, 0x01	; 1
    3978:	60 e0       	ldi	r22, 0x00	; 0
    397a:	40 e0       	ldi	r20, 0x00	; 0
    397c:	0e 94 47 10 	call	0x208e	; 0x208e <DIO_u8SetPinValue>

	DIO_u8SetPinDirection(DIO_u8PORTB,DIO_u8PIN1,DIO_u8PIN_OUTPUT);
    3980:	81 e0       	ldi	r24, 0x01	; 1
    3982:	61 e0       	ldi	r22, 0x01	; 1
    3984:	41 e0       	ldi	r20, 0x01	; 1
    3986:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <DIO_u8SetPinDirection>
	DIO_u8SetPinValue(DIO_u8PORTB,DIO_u8PIN1,DIO_u8PIN_LOW);
    398a:	81 e0       	ldi	r24, 0x01	; 1
    398c:	61 e0       	ldi	r22, 0x01	; 1
    398e:	40 e0       	ldi	r20, 0x00	; 0
    3990:	0e 94 47 10 	call	0x208e	; 0x208e <DIO_u8SetPinValue>

	Timer0_u8SetCallBack(&checkldr);
    3994:	87 ef       	ldi	r24, 0xF7	; 247
    3996:	9a e2       	ldi	r25, 0x2A	; 42
    3998:	0e 94 8f 07 	call	0xf1e	; 0xf1e <Timer0_u8SetCallBack>


	CLCD_vSendString("Welcome To Smart      Home");
    399c:	80 e6       	ldi	r24, 0x60	; 96
    399e:	90 e0       	ldi	r25, 0x00	; 0
    39a0:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <CLCD_vSendString>
    39a4:	fe 01       	movw	r30, r28
    39a6:	e3 52       	subi	r30, 0x23	; 35
    39a8:	ff 4f       	sbci	r31, 0xFF	; 255
    39aa:	80 e0       	ldi	r24, 0x00	; 0
    39ac:	90 e8       	ldi	r25, 0x80	; 128
    39ae:	ab e3       	ldi	r26, 0x3B	; 59
    39b0:	b5 e4       	ldi	r27, 0x45	; 69
    39b2:	80 83       	st	Z, r24
    39b4:	91 83       	std	Z+1, r25	; 0x01
    39b6:	a2 83       	std	Z+2, r26	; 0x02
    39b8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    39ba:	8e 01       	movw	r16, r28
    39bc:	07 52       	subi	r16, 0x27	; 39
    39be:	1f 4f       	sbci	r17, 0xFF	; 255
    39c0:	fe 01       	movw	r30, r28
    39c2:	e3 52       	subi	r30, 0x23	; 35
    39c4:	ff 4f       	sbci	r31, 0xFF	; 255
    39c6:	60 81       	ld	r22, Z
    39c8:	71 81       	ldd	r23, Z+1	; 0x01
    39ca:	82 81       	ldd	r24, Z+2	; 0x02
    39cc:	93 81       	ldd	r25, Z+3	; 0x03
    39ce:	20 e0       	ldi	r18, 0x00	; 0
    39d0:	30 e0       	ldi	r19, 0x00	; 0
    39d2:	4a ef       	ldi	r20, 0xFA	; 250
    39d4:	54 e4       	ldi	r21, 0x44	; 68
    39d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39da:	dc 01       	movw	r26, r24
    39dc:	cb 01       	movw	r24, r22
    39de:	f8 01       	movw	r30, r16
    39e0:	80 83       	st	Z, r24
    39e2:	91 83       	std	Z+1, r25	; 0x01
    39e4:	a2 83       	std	Z+2, r26	; 0x02
    39e6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    39e8:	fe 01       	movw	r30, r28
    39ea:	e7 52       	subi	r30, 0x27	; 39
    39ec:	ff 4f       	sbci	r31, 0xFF	; 255
    39ee:	60 81       	ld	r22, Z
    39f0:	71 81       	ldd	r23, Z+1	; 0x01
    39f2:	82 81       	ldd	r24, Z+2	; 0x02
    39f4:	93 81       	ldd	r25, Z+3	; 0x03
    39f6:	20 e0       	ldi	r18, 0x00	; 0
    39f8:	30 e0       	ldi	r19, 0x00	; 0
    39fa:	40 e8       	ldi	r20, 0x80	; 128
    39fc:	5f e3       	ldi	r21, 0x3F	; 63
    39fe:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3a02:	88 23       	and	r24, r24
    3a04:	44 f4       	brge	.+16     	; 0x3a16 <main+0x558>
		__ticks = 1;
    3a06:	fe 01       	movw	r30, r28
    3a08:	e9 52       	subi	r30, 0x29	; 41
    3a0a:	ff 4f       	sbci	r31, 0xFF	; 255
    3a0c:	81 e0       	ldi	r24, 0x01	; 1
    3a0e:	90 e0       	ldi	r25, 0x00	; 0
    3a10:	91 83       	std	Z+1, r25	; 0x01
    3a12:	80 83       	st	Z, r24
    3a14:	64 c0       	rjmp	.+200    	; 0x3ade <main+0x620>
	else if (__tmp > 65535)
    3a16:	fe 01       	movw	r30, r28
    3a18:	e7 52       	subi	r30, 0x27	; 39
    3a1a:	ff 4f       	sbci	r31, 0xFF	; 255
    3a1c:	60 81       	ld	r22, Z
    3a1e:	71 81       	ldd	r23, Z+1	; 0x01
    3a20:	82 81       	ldd	r24, Z+2	; 0x02
    3a22:	93 81       	ldd	r25, Z+3	; 0x03
    3a24:	20 e0       	ldi	r18, 0x00	; 0
    3a26:	3f ef       	ldi	r19, 0xFF	; 255
    3a28:	4f e7       	ldi	r20, 0x7F	; 127
    3a2a:	57 e4       	ldi	r21, 0x47	; 71
    3a2c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3a30:	18 16       	cp	r1, r24
    3a32:	0c f0       	brlt	.+2      	; 0x3a36 <main+0x578>
    3a34:	43 c0       	rjmp	.+134    	; 0x3abc <main+0x5fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a36:	fe 01       	movw	r30, r28
    3a38:	e3 52       	subi	r30, 0x23	; 35
    3a3a:	ff 4f       	sbci	r31, 0xFF	; 255
    3a3c:	60 81       	ld	r22, Z
    3a3e:	71 81       	ldd	r23, Z+1	; 0x01
    3a40:	82 81       	ldd	r24, Z+2	; 0x02
    3a42:	93 81       	ldd	r25, Z+3	; 0x03
    3a44:	20 e0       	ldi	r18, 0x00	; 0
    3a46:	30 e0       	ldi	r19, 0x00	; 0
    3a48:	40 e2       	ldi	r20, 0x20	; 32
    3a4a:	51 e4       	ldi	r21, 0x41	; 65
    3a4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a50:	dc 01       	movw	r26, r24
    3a52:	cb 01       	movw	r24, r22
    3a54:	8e 01       	movw	r16, r28
    3a56:	09 52       	subi	r16, 0x29	; 41
    3a58:	1f 4f       	sbci	r17, 0xFF	; 255
    3a5a:	bc 01       	movw	r22, r24
    3a5c:	cd 01       	movw	r24, r26
    3a5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a62:	dc 01       	movw	r26, r24
    3a64:	cb 01       	movw	r24, r22
    3a66:	f8 01       	movw	r30, r16
    3a68:	91 83       	std	Z+1, r25	; 0x01
    3a6a:	80 83       	st	Z, r24
    3a6c:	1f c0       	rjmp	.+62     	; 0x3aac <main+0x5ee>
    3a6e:	fe 01       	movw	r30, r28
    3a70:	eb 52       	subi	r30, 0x2B	; 43
    3a72:	ff 4f       	sbci	r31, 0xFF	; 255
    3a74:	88 ec       	ldi	r24, 0xC8	; 200
    3a76:	90 e0       	ldi	r25, 0x00	; 0
    3a78:	91 83       	std	Z+1, r25	; 0x01
    3a7a:	80 83       	st	Z, r24
    3a7c:	fe 01       	movw	r30, r28
    3a7e:	eb 52       	subi	r30, 0x2B	; 43
    3a80:	ff 4f       	sbci	r31, 0xFF	; 255
    3a82:	80 81       	ld	r24, Z
    3a84:	91 81       	ldd	r25, Z+1	; 0x01
    3a86:	01 97       	sbiw	r24, 0x01	; 1
    3a88:	f1 f7       	brne	.-4      	; 0x3a86 <main+0x5c8>
    3a8a:	fe 01       	movw	r30, r28
    3a8c:	eb 52       	subi	r30, 0x2B	; 43
    3a8e:	ff 4f       	sbci	r31, 0xFF	; 255
    3a90:	91 83       	std	Z+1, r25	; 0x01
    3a92:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a94:	de 01       	movw	r26, r28
    3a96:	a9 52       	subi	r26, 0x29	; 41
    3a98:	bf 4f       	sbci	r27, 0xFF	; 255
    3a9a:	fe 01       	movw	r30, r28
    3a9c:	e9 52       	subi	r30, 0x29	; 41
    3a9e:	ff 4f       	sbci	r31, 0xFF	; 255
    3aa0:	80 81       	ld	r24, Z
    3aa2:	91 81       	ldd	r25, Z+1	; 0x01
    3aa4:	01 97       	sbiw	r24, 0x01	; 1
    3aa6:	11 96       	adiw	r26, 0x01	; 1
    3aa8:	9c 93       	st	X, r25
    3aaa:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3aac:	fe 01       	movw	r30, r28
    3aae:	e9 52       	subi	r30, 0x29	; 41
    3ab0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ab2:	80 81       	ld	r24, Z
    3ab4:	91 81       	ldd	r25, Z+1	; 0x01
    3ab6:	00 97       	sbiw	r24, 0x00	; 0
    3ab8:	d1 f6       	brne	.-76     	; 0x3a6e <main+0x5b0>
    3aba:	28 c0       	rjmp	.+80     	; 0x3b0c <main+0x64e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3abc:	8e 01       	movw	r16, r28
    3abe:	09 52       	subi	r16, 0x29	; 41
    3ac0:	1f 4f       	sbci	r17, 0xFF	; 255
    3ac2:	fe 01       	movw	r30, r28
    3ac4:	e7 52       	subi	r30, 0x27	; 39
    3ac6:	ff 4f       	sbci	r31, 0xFF	; 255
    3ac8:	60 81       	ld	r22, Z
    3aca:	71 81       	ldd	r23, Z+1	; 0x01
    3acc:	82 81       	ldd	r24, Z+2	; 0x02
    3ace:	93 81       	ldd	r25, Z+3	; 0x03
    3ad0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ad4:	dc 01       	movw	r26, r24
    3ad6:	cb 01       	movw	r24, r22
    3ad8:	f8 01       	movw	r30, r16
    3ada:	91 83       	std	Z+1, r25	; 0x01
    3adc:	80 83       	st	Z, r24
    3ade:	de 01       	movw	r26, r28
    3ae0:	ad 52       	subi	r26, 0x2D	; 45
    3ae2:	bf 4f       	sbci	r27, 0xFF	; 255
    3ae4:	fe 01       	movw	r30, r28
    3ae6:	e9 52       	subi	r30, 0x29	; 41
    3ae8:	ff 4f       	sbci	r31, 0xFF	; 255
    3aea:	80 81       	ld	r24, Z
    3aec:	91 81       	ldd	r25, Z+1	; 0x01
    3aee:	11 96       	adiw	r26, 0x01	; 1
    3af0:	9c 93       	st	X, r25
    3af2:	8e 93       	st	-X, r24
    3af4:	fe 01       	movw	r30, r28
    3af6:	ed 52       	subi	r30, 0x2D	; 45
    3af8:	ff 4f       	sbci	r31, 0xFF	; 255
    3afa:	80 81       	ld	r24, Z
    3afc:	91 81       	ldd	r25, Z+1	; 0x01
    3afe:	01 97       	sbiw	r24, 0x01	; 1
    3b00:	f1 f7       	brne	.-4      	; 0x3afe <main+0x640>
    3b02:	fe 01       	movw	r30, r28
    3b04:	ed 52       	subi	r30, 0x2D	; 45
    3b06:	ff 4f       	sbci	r31, 0xFF	; 255
    3b08:	91 83       	std	Z+1, r25	; 0x01
    3b0a:	80 83       	st	Z, r24
	_delay_ms(3000);

	u8 music=0;
    3b0c:	fe 01       	movw	r30, r28
    3b0e:	ed 50       	subi	r30, 0x0D	; 13
    3b10:	ff 4f       	sbci	r31, 0xFF	; 255
    3b12:	10 82       	st	Z, r1
	u8 door=0;
    3b14:	fe 01       	movw	r30, r28
    3b16:	ee 50       	subi	r30, 0x0E	; 14
    3b18:	ff 4f       	sbci	r31, 0xFF	; 255
    3b1a:	10 82       	st	Z, r1
	u8 fan=0;
    3b1c:	fe 01       	movw	r30, r28
    3b1e:	ef 50       	subi	r30, 0x0F	; 15
    3b20:	ff 4f       	sbci	r31, 0xFF	; 255
    3b22:	10 82       	st	Z, r1
	u8 led=0;
    3b24:	fe 01       	movw	r30, r28
    3b26:	e0 51       	subi	r30, 0x10	; 16
    3b28:	ff 4f       	sbci	r31, 0xFF	; 255
    3b2a:	10 82       	st	Z, r1
	u8 error=0;
    3b2c:	fe 01       	movw	r30, r28
    3b2e:	e1 51       	subi	r30, 0x11	; 17
    3b30:	ff 4f       	sbci	r31, 0xFF	; 255
    3b32:	10 82       	st	Z, r1
	u8 layer=0;
    3b34:	fe 01       	movw	r30, r28
    3b36:	e2 51       	subi	r30, 0x12	; 18
    3b38:	ff 4f       	sbci	r31, 0xFF	; 255
    3b3a:	10 82       	st	Z, r1
	u8 trials=3;
    3b3c:	fe 01       	movw	r30, r28
    3b3e:	e3 51       	subi	r30, 0x13	; 19
    3b40:	ff 4f       	sbci	r31, 0xFF	; 255
    3b42:	83 e0       	ldi	r24, 0x03	; 3
    3b44:	80 83       	st	Z, r24
	u8 pressed_key;

	while(1)
	{

		if(layer==0)
    3b46:	fe 01       	movw	r30, r28
    3b48:	e2 51       	subi	r30, 0x12	; 18
    3b4a:	ff 4f       	sbci	r31, 0xFF	; 255
    3b4c:	80 81       	ld	r24, Z
    3b4e:	88 23       	and	r24, r24
    3b50:	09 f0       	breq	.+2      	; 0x3b54 <main+0x696>
    3b52:	cc c0       	rjmp	.+408    	; 0x3cec <main+0x82e>
		{
			CLCD_vClearScreen();
    3b54:	0e 94 2e 19 	call	0x325c	; 0x325c <CLCD_vClearScreen>
			CLCD_vSendString("Select User");
    3b58:	8b e7       	ldi	r24, 0x7B	; 123
    3b5a:	90 e0       	ldi	r25, 0x00	; 0
    3b5c:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <CLCD_vSendString>
    3b60:	fe 01       	movw	r30, r28
    3b62:	e1 53       	subi	r30, 0x31	; 49
    3b64:	ff 4f       	sbci	r31, 0xFF	; 255
    3b66:	80 e0       	ldi	r24, 0x00	; 0
    3b68:	90 e8       	ldi	r25, 0x80	; 128
    3b6a:	ab eb       	ldi	r26, 0xBB	; 187
    3b6c:	b4 e4       	ldi	r27, 0x44	; 68
    3b6e:	80 83       	st	Z, r24
    3b70:	91 83       	std	Z+1, r25	; 0x01
    3b72:	a2 83       	std	Z+2, r26	; 0x02
    3b74:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b76:	8e 01       	movw	r16, r28
    3b78:	05 53       	subi	r16, 0x35	; 53
    3b7a:	1f 4f       	sbci	r17, 0xFF	; 255
    3b7c:	fe 01       	movw	r30, r28
    3b7e:	e1 53       	subi	r30, 0x31	; 49
    3b80:	ff 4f       	sbci	r31, 0xFF	; 255
    3b82:	60 81       	ld	r22, Z
    3b84:	71 81       	ldd	r23, Z+1	; 0x01
    3b86:	82 81       	ldd	r24, Z+2	; 0x02
    3b88:	93 81       	ldd	r25, Z+3	; 0x03
    3b8a:	20 e0       	ldi	r18, 0x00	; 0
    3b8c:	30 e0       	ldi	r19, 0x00	; 0
    3b8e:	4a ef       	ldi	r20, 0xFA	; 250
    3b90:	54 e4       	ldi	r21, 0x44	; 68
    3b92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b96:	dc 01       	movw	r26, r24
    3b98:	cb 01       	movw	r24, r22
    3b9a:	f8 01       	movw	r30, r16
    3b9c:	80 83       	st	Z, r24
    3b9e:	91 83       	std	Z+1, r25	; 0x01
    3ba0:	a2 83       	std	Z+2, r26	; 0x02
    3ba2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3ba4:	fe 01       	movw	r30, r28
    3ba6:	e5 53       	subi	r30, 0x35	; 53
    3ba8:	ff 4f       	sbci	r31, 0xFF	; 255
    3baa:	60 81       	ld	r22, Z
    3bac:	71 81       	ldd	r23, Z+1	; 0x01
    3bae:	82 81       	ldd	r24, Z+2	; 0x02
    3bb0:	93 81       	ldd	r25, Z+3	; 0x03
    3bb2:	20 e0       	ldi	r18, 0x00	; 0
    3bb4:	30 e0       	ldi	r19, 0x00	; 0
    3bb6:	40 e8       	ldi	r20, 0x80	; 128
    3bb8:	5f e3       	ldi	r21, 0x3F	; 63
    3bba:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3bbe:	88 23       	and	r24, r24
    3bc0:	44 f4       	brge	.+16     	; 0x3bd2 <main+0x714>
		__ticks = 1;
    3bc2:	fe 01       	movw	r30, r28
    3bc4:	e7 53       	subi	r30, 0x37	; 55
    3bc6:	ff 4f       	sbci	r31, 0xFF	; 255
    3bc8:	81 e0       	ldi	r24, 0x01	; 1
    3bca:	90 e0       	ldi	r25, 0x00	; 0
    3bcc:	91 83       	std	Z+1, r25	; 0x01
    3bce:	80 83       	st	Z, r24
    3bd0:	64 c0       	rjmp	.+200    	; 0x3c9a <main+0x7dc>
	else if (__tmp > 65535)
    3bd2:	fe 01       	movw	r30, r28
    3bd4:	e5 53       	subi	r30, 0x35	; 53
    3bd6:	ff 4f       	sbci	r31, 0xFF	; 255
    3bd8:	60 81       	ld	r22, Z
    3bda:	71 81       	ldd	r23, Z+1	; 0x01
    3bdc:	82 81       	ldd	r24, Z+2	; 0x02
    3bde:	93 81       	ldd	r25, Z+3	; 0x03
    3be0:	20 e0       	ldi	r18, 0x00	; 0
    3be2:	3f ef       	ldi	r19, 0xFF	; 255
    3be4:	4f e7       	ldi	r20, 0x7F	; 127
    3be6:	57 e4       	ldi	r21, 0x47	; 71
    3be8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3bec:	18 16       	cp	r1, r24
    3bee:	0c f0       	brlt	.+2      	; 0x3bf2 <main+0x734>
    3bf0:	43 c0       	rjmp	.+134    	; 0x3c78 <main+0x7ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3bf2:	fe 01       	movw	r30, r28
    3bf4:	e1 53       	subi	r30, 0x31	; 49
    3bf6:	ff 4f       	sbci	r31, 0xFF	; 255
    3bf8:	60 81       	ld	r22, Z
    3bfa:	71 81       	ldd	r23, Z+1	; 0x01
    3bfc:	82 81       	ldd	r24, Z+2	; 0x02
    3bfe:	93 81       	ldd	r25, Z+3	; 0x03
    3c00:	20 e0       	ldi	r18, 0x00	; 0
    3c02:	30 e0       	ldi	r19, 0x00	; 0
    3c04:	40 e2       	ldi	r20, 0x20	; 32
    3c06:	51 e4       	ldi	r21, 0x41	; 65
    3c08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c0c:	dc 01       	movw	r26, r24
    3c0e:	cb 01       	movw	r24, r22
    3c10:	8e 01       	movw	r16, r28
    3c12:	07 53       	subi	r16, 0x37	; 55
    3c14:	1f 4f       	sbci	r17, 0xFF	; 255
    3c16:	bc 01       	movw	r22, r24
    3c18:	cd 01       	movw	r24, r26
    3c1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c1e:	dc 01       	movw	r26, r24
    3c20:	cb 01       	movw	r24, r22
    3c22:	f8 01       	movw	r30, r16
    3c24:	91 83       	std	Z+1, r25	; 0x01
    3c26:	80 83       	st	Z, r24
    3c28:	1f c0       	rjmp	.+62     	; 0x3c68 <main+0x7aa>
    3c2a:	fe 01       	movw	r30, r28
    3c2c:	e9 53       	subi	r30, 0x39	; 57
    3c2e:	ff 4f       	sbci	r31, 0xFF	; 255
    3c30:	88 ec       	ldi	r24, 0xC8	; 200
    3c32:	90 e0       	ldi	r25, 0x00	; 0
    3c34:	91 83       	std	Z+1, r25	; 0x01
    3c36:	80 83       	st	Z, r24
    3c38:	fe 01       	movw	r30, r28
    3c3a:	e9 53       	subi	r30, 0x39	; 57
    3c3c:	ff 4f       	sbci	r31, 0xFF	; 255
    3c3e:	80 81       	ld	r24, Z
    3c40:	91 81       	ldd	r25, Z+1	; 0x01
    3c42:	01 97       	sbiw	r24, 0x01	; 1
    3c44:	f1 f7       	brne	.-4      	; 0x3c42 <main+0x784>
    3c46:	fe 01       	movw	r30, r28
    3c48:	e9 53       	subi	r30, 0x39	; 57
    3c4a:	ff 4f       	sbci	r31, 0xFF	; 255
    3c4c:	91 83       	std	Z+1, r25	; 0x01
    3c4e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c50:	de 01       	movw	r26, r28
    3c52:	a7 53       	subi	r26, 0x37	; 55
    3c54:	bf 4f       	sbci	r27, 0xFF	; 255
    3c56:	fe 01       	movw	r30, r28
    3c58:	e7 53       	subi	r30, 0x37	; 55
    3c5a:	ff 4f       	sbci	r31, 0xFF	; 255
    3c5c:	80 81       	ld	r24, Z
    3c5e:	91 81       	ldd	r25, Z+1	; 0x01
    3c60:	01 97       	sbiw	r24, 0x01	; 1
    3c62:	11 96       	adiw	r26, 0x01	; 1
    3c64:	9c 93       	st	X, r25
    3c66:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c68:	fe 01       	movw	r30, r28
    3c6a:	e7 53       	subi	r30, 0x37	; 55
    3c6c:	ff 4f       	sbci	r31, 0xFF	; 255
    3c6e:	80 81       	ld	r24, Z
    3c70:	91 81       	ldd	r25, Z+1	; 0x01
    3c72:	00 97       	sbiw	r24, 0x00	; 0
    3c74:	d1 f6       	brne	.-76     	; 0x3c2a <main+0x76c>
    3c76:	27 c0       	rjmp	.+78     	; 0x3cc6 <main+0x808>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c78:	8e 01       	movw	r16, r28
    3c7a:	07 53       	subi	r16, 0x37	; 55
    3c7c:	1f 4f       	sbci	r17, 0xFF	; 255
    3c7e:	fe 01       	movw	r30, r28
    3c80:	e5 53       	subi	r30, 0x35	; 53
    3c82:	ff 4f       	sbci	r31, 0xFF	; 255
    3c84:	60 81       	ld	r22, Z
    3c86:	71 81       	ldd	r23, Z+1	; 0x01
    3c88:	82 81       	ldd	r24, Z+2	; 0x02
    3c8a:	93 81       	ldd	r25, Z+3	; 0x03
    3c8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c90:	dc 01       	movw	r26, r24
    3c92:	cb 01       	movw	r24, r22
    3c94:	f8 01       	movw	r30, r16
    3c96:	91 83       	std	Z+1, r25	; 0x01
    3c98:	80 83       	st	Z, r24
    3c9a:	de 01       	movw	r26, r28
    3c9c:	ab 53       	subi	r26, 0x3B	; 59
    3c9e:	bf 4f       	sbci	r27, 0xFF	; 255
    3ca0:	fe 01       	movw	r30, r28
    3ca2:	e7 53       	subi	r30, 0x37	; 55
    3ca4:	ff 4f       	sbci	r31, 0xFF	; 255
    3ca6:	80 81       	ld	r24, Z
    3ca8:	91 81       	ldd	r25, Z+1	; 0x01
    3caa:	8d 93       	st	X+, r24
    3cac:	9c 93       	st	X, r25
    3cae:	fe 01       	movw	r30, r28
    3cb0:	eb 53       	subi	r30, 0x3B	; 59
    3cb2:	ff 4f       	sbci	r31, 0xFF	; 255
    3cb4:	80 81       	ld	r24, Z
    3cb6:	91 81       	ldd	r25, Z+1	; 0x01
    3cb8:	01 97       	sbiw	r24, 0x01	; 1
    3cba:	f1 f7       	brne	.-4      	; 0x3cb8 <main+0x7fa>
    3cbc:	fe 01       	movw	r30, r28
    3cbe:	eb 53       	subi	r30, 0x3B	; 59
    3cc0:	ff 4f       	sbci	r31, 0xFF	; 255
    3cc2:	91 83       	std	Z+1, r25	; 0x01
    3cc4:	80 83       	st	Z, r24
			_delay_ms(1500);

			CLCD_vClearScreen();
    3cc6:	0e 94 2e 19 	call	0x325c	; 0x325c <CLCD_vClearScreen>
			CLCD_vSendString("1.user1");
    3cca:	87 e8       	ldi	r24, 0x87	; 135
    3ccc:	90 e0       	ldi	r25, 0x00	; 0
    3cce:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <CLCD_vSendString>
			CLCD_vGoToXY(0,1);
    3cd2:	80 e0       	ldi	r24, 0x00	; 0
    3cd4:	61 e0       	ldi	r22, 0x01	; 1
    3cd6:	0e 94 d5 17 	call	0x2faa	; 0x2faa <CLCD_vGoToXY>
			CLCD_vSendString("2.user2");
    3cda:	8f e8       	ldi	r24, 0x8F	; 143
    3cdc:	90 e0       	ldi	r25, 0x00	; 0
    3cde:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <CLCD_vSendString>

			layer=1;
    3ce2:	fe 01       	movw	r30, r28
    3ce4:	e2 51       	subi	r30, 0x12	; 18
    3ce6:	ff 4f       	sbci	r31, 0xFF	; 255
    3ce8:	81 e0       	ldi	r24, 0x01	; 1
    3cea:	80 83       	st	Z, r24
		}
		do
		{

			u8 pressed_key = 0xff;
    3cec:	fe 01       	movw	r30, r28
    3cee:	e5 51       	subi	r30, 0x15	; 21
    3cf0:	ff 4f       	sbci	r31, 0xFF	; 255
    3cf2:	8f ef       	ldi	r24, 0xFF	; 255
    3cf4:	80 83       	st	Z, r24
			pressed_key = KPD_u8GetPressedKey();
    3cf6:	0e 94 c6 0b 	call	0x178c	; 0x178c <KPD_u8GetPressedKey>
    3cfa:	fe 01       	movw	r30, r28
    3cfc:	e5 51       	subi	r30, 0x15	; 21
    3cfe:	ff 4f       	sbci	r31, 0xFF	; 255
    3d00:	80 83       	st	Z, r24
			if (pressed_key == 1 || layer>1)
    3d02:	fe 01       	movw	r30, r28
    3d04:	e5 51       	subi	r30, 0x15	; 21
    3d06:	ff 4f       	sbci	r31, 0xFF	; 255
    3d08:	80 81       	ld	r24, Z
    3d0a:	81 30       	cpi	r24, 0x01	; 1
    3d0c:	11 f4       	brne	.+4      	; 0x3d12 <main+0x854>
    3d0e:	0c 94 c7 2a 	jmp	0x558e	; 0x558e <main+0x20d0>
    3d12:	fe 01       	movw	r30, r28
    3d14:	e2 51       	subi	r30, 0x12	; 18
    3d16:	ff 4f       	sbci	r31, 0xFF	; 255
    3d18:	80 81       	ld	r24, Z
    3d1a:	82 30       	cpi	r24, 0x02	; 2
    3d1c:	10 f4       	brcc	.+4      	; 0x3d22 <main+0x864>
    3d1e:	0c 94 cf 2a 	jmp	0x559e	; 0x559e <main+0x20e0>
    3d22:	0c 94 c7 2a 	jmp	0x558e	; 0x558e <main+0x20d0>
			{
				while(layer>0)
				{
				if(eeprom_read_byte(100)==0xff)
    3d26:	84 e6       	ldi	r24, 0x64	; 100
    3d28:	90 e0       	ldi	r25, 0x00	; 0
    3d2a:	0e 94 6f 2b 	call	0x56de	; 0x56de <__eerd_byte_m32>
    3d2e:	8f 3f       	cpi	r24, 0xFF	; 255
    3d30:	09 f0       	breq	.+2      	; 0x3d34 <main+0x876>
    3d32:	42 c3       	rjmp	.+1668   	; 0x43b8 <main+0xefa>
				{
					CLCD_vClearScreen();
    3d34:	0e 94 2e 19 	call	0x325c	; 0x325c <CLCD_vClearScreen>
					CLCD_vGoToXY(0,0);
    3d38:	80 e0       	ldi	r24, 0x00	; 0
    3d3a:	60 e0       	ldi	r22, 0x00	; 0
    3d3c:	0e 94 d5 17 	call	0x2faa	; 0x2faa <CLCD_vGoToXY>
					CLCD_vSendString("New user!");
    3d40:	87 e9       	ldi	r24, 0x97	; 151
    3d42:	90 e0       	ldi	r25, 0x00	; 0
    3d44:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <CLCD_vSendString>
    3d48:	fe 01       	movw	r30, r28
    3d4a:	ef 53       	subi	r30, 0x3F	; 63
    3d4c:	ff 4f       	sbci	r31, 0xFF	; 255
    3d4e:	80 e0       	ldi	r24, 0x00	; 0
    3d50:	90 e0       	ldi	r25, 0x00	; 0
    3d52:	aa ef       	ldi	r26, 0xFA	; 250
    3d54:	b3 e4       	ldi	r27, 0x43	; 67
    3d56:	80 83       	st	Z, r24
    3d58:	91 83       	std	Z+1, r25	; 0x01
    3d5a:	a2 83       	std	Z+2, r26	; 0x02
    3d5c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d5e:	8e 01       	movw	r16, r28
    3d60:	03 54       	subi	r16, 0x43	; 67
    3d62:	1f 4f       	sbci	r17, 0xFF	; 255
    3d64:	fe 01       	movw	r30, r28
    3d66:	ef 53       	subi	r30, 0x3F	; 63
    3d68:	ff 4f       	sbci	r31, 0xFF	; 255
    3d6a:	60 81       	ld	r22, Z
    3d6c:	71 81       	ldd	r23, Z+1	; 0x01
    3d6e:	82 81       	ldd	r24, Z+2	; 0x02
    3d70:	93 81       	ldd	r25, Z+3	; 0x03
    3d72:	20 e0       	ldi	r18, 0x00	; 0
    3d74:	30 e0       	ldi	r19, 0x00	; 0
    3d76:	4a ef       	ldi	r20, 0xFA	; 250
    3d78:	54 e4       	ldi	r21, 0x44	; 68
    3d7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d7e:	dc 01       	movw	r26, r24
    3d80:	cb 01       	movw	r24, r22
    3d82:	f8 01       	movw	r30, r16
    3d84:	80 83       	st	Z, r24
    3d86:	91 83       	std	Z+1, r25	; 0x01
    3d88:	a2 83       	std	Z+2, r26	; 0x02
    3d8a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3d8c:	fe 01       	movw	r30, r28
    3d8e:	e3 54       	subi	r30, 0x43	; 67
    3d90:	ff 4f       	sbci	r31, 0xFF	; 255
    3d92:	60 81       	ld	r22, Z
    3d94:	71 81       	ldd	r23, Z+1	; 0x01
    3d96:	82 81       	ldd	r24, Z+2	; 0x02
    3d98:	93 81       	ldd	r25, Z+3	; 0x03
    3d9a:	20 e0       	ldi	r18, 0x00	; 0
    3d9c:	30 e0       	ldi	r19, 0x00	; 0
    3d9e:	40 e8       	ldi	r20, 0x80	; 128
    3da0:	5f e3       	ldi	r21, 0x3F	; 63
    3da2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3da6:	88 23       	and	r24, r24
    3da8:	44 f4       	brge	.+16     	; 0x3dba <main+0x8fc>
		__ticks = 1;
    3daa:	fe 01       	movw	r30, r28
    3dac:	e5 54       	subi	r30, 0x45	; 69
    3dae:	ff 4f       	sbci	r31, 0xFF	; 255
    3db0:	81 e0       	ldi	r24, 0x01	; 1
    3db2:	90 e0       	ldi	r25, 0x00	; 0
    3db4:	91 83       	std	Z+1, r25	; 0x01
    3db6:	80 83       	st	Z, r24
    3db8:	64 c0       	rjmp	.+200    	; 0x3e82 <main+0x9c4>
	else if (__tmp > 65535)
    3dba:	fe 01       	movw	r30, r28
    3dbc:	e3 54       	subi	r30, 0x43	; 67
    3dbe:	ff 4f       	sbci	r31, 0xFF	; 255
    3dc0:	60 81       	ld	r22, Z
    3dc2:	71 81       	ldd	r23, Z+1	; 0x01
    3dc4:	82 81       	ldd	r24, Z+2	; 0x02
    3dc6:	93 81       	ldd	r25, Z+3	; 0x03
    3dc8:	20 e0       	ldi	r18, 0x00	; 0
    3dca:	3f ef       	ldi	r19, 0xFF	; 255
    3dcc:	4f e7       	ldi	r20, 0x7F	; 127
    3dce:	57 e4       	ldi	r21, 0x47	; 71
    3dd0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3dd4:	18 16       	cp	r1, r24
    3dd6:	0c f0       	brlt	.+2      	; 0x3dda <main+0x91c>
    3dd8:	43 c0       	rjmp	.+134    	; 0x3e60 <main+0x9a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3dda:	fe 01       	movw	r30, r28
    3ddc:	ef 53       	subi	r30, 0x3F	; 63
    3dde:	ff 4f       	sbci	r31, 0xFF	; 255
    3de0:	60 81       	ld	r22, Z
    3de2:	71 81       	ldd	r23, Z+1	; 0x01
    3de4:	82 81       	ldd	r24, Z+2	; 0x02
    3de6:	93 81       	ldd	r25, Z+3	; 0x03
    3de8:	20 e0       	ldi	r18, 0x00	; 0
    3dea:	30 e0       	ldi	r19, 0x00	; 0
    3dec:	40 e2       	ldi	r20, 0x20	; 32
    3dee:	51 e4       	ldi	r21, 0x41	; 65
    3df0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3df4:	dc 01       	movw	r26, r24
    3df6:	cb 01       	movw	r24, r22
    3df8:	8e 01       	movw	r16, r28
    3dfa:	05 54       	subi	r16, 0x45	; 69
    3dfc:	1f 4f       	sbci	r17, 0xFF	; 255
    3dfe:	bc 01       	movw	r22, r24
    3e00:	cd 01       	movw	r24, r26
    3e02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e06:	dc 01       	movw	r26, r24
    3e08:	cb 01       	movw	r24, r22
    3e0a:	f8 01       	movw	r30, r16
    3e0c:	91 83       	std	Z+1, r25	; 0x01
    3e0e:	80 83       	st	Z, r24
    3e10:	1f c0       	rjmp	.+62     	; 0x3e50 <main+0x992>
    3e12:	fe 01       	movw	r30, r28
    3e14:	e7 54       	subi	r30, 0x47	; 71
    3e16:	ff 4f       	sbci	r31, 0xFF	; 255
    3e18:	88 ec       	ldi	r24, 0xC8	; 200
    3e1a:	90 e0       	ldi	r25, 0x00	; 0
    3e1c:	91 83       	std	Z+1, r25	; 0x01
    3e1e:	80 83       	st	Z, r24
    3e20:	fe 01       	movw	r30, r28
    3e22:	e7 54       	subi	r30, 0x47	; 71
    3e24:	ff 4f       	sbci	r31, 0xFF	; 255
    3e26:	80 81       	ld	r24, Z
    3e28:	91 81       	ldd	r25, Z+1	; 0x01
    3e2a:	01 97       	sbiw	r24, 0x01	; 1
    3e2c:	f1 f7       	brne	.-4      	; 0x3e2a <main+0x96c>
    3e2e:	fe 01       	movw	r30, r28
    3e30:	e7 54       	subi	r30, 0x47	; 71
    3e32:	ff 4f       	sbci	r31, 0xFF	; 255
    3e34:	91 83       	std	Z+1, r25	; 0x01
    3e36:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e38:	de 01       	movw	r26, r28
    3e3a:	a5 54       	subi	r26, 0x45	; 69
    3e3c:	bf 4f       	sbci	r27, 0xFF	; 255
    3e3e:	fe 01       	movw	r30, r28
    3e40:	e5 54       	subi	r30, 0x45	; 69
    3e42:	ff 4f       	sbci	r31, 0xFF	; 255
    3e44:	80 81       	ld	r24, Z
    3e46:	91 81       	ldd	r25, Z+1	; 0x01
    3e48:	01 97       	sbiw	r24, 0x01	; 1
    3e4a:	11 96       	adiw	r26, 0x01	; 1
    3e4c:	9c 93       	st	X, r25
    3e4e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e50:	fe 01       	movw	r30, r28
    3e52:	e5 54       	subi	r30, 0x45	; 69
    3e54:	ff 4f       	sbci	r31, 0xFF	; 255
    3e56:	80 81       	ld	r24, Z
    3e58:	91 81       	ldd	r25, Z+1	; 0x01
    3e5a:	00 97       	sbiw	r24, 0x00	; 0
    3e5c:	d1 f6       	brne	.-76     	; 0x3e12 <main+0x954>
    3e5e:	27 c0       	rjmp	.+78     	; 0x3eae <main+0x9f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e60:	8e 01       	movw	r16, r28
    3e62:	05 54       	subi	r16, 0x45	; 69
    3e64:	1f 4f       	sbci	r17, 0xFF	; 255
    3e66:	fe 01       	movw	r30, r28
    3e68:	e3 54       	subi	r30, 0x43	; 67
    3e6a:	ff 4f       	sbci	r31, 0xFF	; 255
    3e6c:	60 81       	ld	r22, Z
    3e6e:	71 81       	ldd	r23, Z+1	; 0x01
    3e70:	82 81       	ldd	r24, Z+2	; 0x02
    3e72:	93 81       	ldd	r25, Z+3	; 0x03
    3e74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e78:	dc 01       	movw	r26, r24
    3e7a:	cb 01       	movw	r24, r22
    3e7c:	f8 01       	movw	r30, r16
    3e7e:	91 83       	std	Z+1, r25	; 0x01
    3e80:	80 83       	st	Z, r24
    3e82:	de 01       	movw	r26, r28
    3e84:	a9 54       	subi	r26, 0x49	; 73
    3e86:	bf 4f       	sbci	r27, 0xFF	; 255
    3e88:	fe 01       	movw	r30, r28
    3e8a:	e5 54       	subi	r30, 0x45	; 69
    3e8c:	ff 4f       	sbci	r31, 0xFF	; 255
    3e8e:	80 81       	ld	r24, Z
    3e90:	91 81       	ldd	r25, Z+1	; 0x01
    3e92:	8d 93       	st	X+, r24
    3e94:	9c 93       	st	X, r25
    3e96:	fe 01       	movw	r30, r28
    3e98:	e9 54       	subi	r30, 0x49	; 73
    3e9a:	ff 4f       	sbci	r31, 0xFF	; 255
    3e9c:	80 81       	ld	r24, Z
    3e9e:	91 81       	ldd	r25, Z+1	; 0x01
    3ea0:	01 97       	sbiw	r24, 0x01	; 1
    3ea2:	f1 f7       	brne	.-4      	; 0x3ea0 <main+0x9e2>
    3ea4:	fe 01       	movw	r30, r28
    3ea6:	e9 54       	subi	r30, 0x49	; 73
    3ea8:	ff 4f       	sbci	r31, 0xFF	; 255
    3eaa:	91 83       	std	Z+1, r25	; 0x01
    3eac:	80 83       	st	Z, r24

					_delay_ms(500);
					CLCD_vClearScreen();
    3eae:	0e 94 2e 19 	call	0x325c	; 0x325c <CLCD_vClearScreen>
					CLCD_vSendString("Enter password:");
    3eb2:	81 ea       	ldi	r24, 0xA1	; 161
    3eb4:	90 e0       	ldi	r25, 0x00	; 0
    3eb6:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <CLCD_vSendString>
    3eba:	fe 01       	movw	r30, r28
    3ebc:	ed 54       	subi	r30, 0x4D	; 77
    3ebe:	ff 4f       	sbci	r31, 0xFF	; 255
    3ec0:	80 e0       	ldi	r24, 0x00	; 0
    3ec2:	90 e0       	ldi	r25, 0x00	; 0
    3ec4:	aa ef       	ldi	r26, 0xFA	; 250
    3ec6:	b3 e4       	ldi	r27, 0x43	; 67
    3ec8:	80 83       	st	Z, r24
    3eca:	91 83       	std	Z+1, r25	; 0x01
    3ecc:	a2 83       	std	Z+2, r26	; 0x02
    3ece:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ed0:	8e 01       	movw	r16, r28
    3ed2:	01 55       	subi	r16, 0x51	; 81
    3ed4:	1f 4f       	sbci	r17, 0xFF	; 255
    3ed6:	fe 01       	movw	r30, r28
    3ed8:	ed 54       	subi	r30, 0x4D	; 77
    3eda:	ff 4f       	sbci	r31, 0xFF	; 255
    3edc:	60 81       	ld	r22, Z
    3ede:	71 81       	ldd	r23, Z+1	; 0x01
    3ee0:	82 81       	ldd	r24, Z+2	; 0x02
    3ee2:	93 81       	ldd	r25, Z+3	; 0x03
    3ee4:	20 e0       	ldi	r18, 0x00	; 0
    3ee6:	30 e0       	ldi	r19, 0x00	; 0
    3ee8:	4a ef       	ldi	r20, 0xFA	; 250
    3eea:	54 e4       	ldi	r21, 0x44	; 68
    3eec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ef0:	dc 01       	movw	r26, r24
    3ef2:	cb 01       	movw	r24, r22
    3ef4:	f8 01       	movw	r30, r16
    3ef6:	80 83       	st	Z, r24
    3ef8:	91 83       	std	Z+1, r25	; 0x01
    3efa:	a2 83       	std	Z+2, r26	; 0x02
    3efc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3efe:	fe 01       	movw	r30, r28
    3f00:	e1 55       	subi	r30, 0x51	; 81
    3f02:	ff 4f       	sbci	r31, 0xFF	; 255
    3f04:	60 81       	ld	r22, Z
    3f06:	71 81       	ldd	r23, Z+1	; 0x01
    3f08:	82 81       	ldd	r24, Z+2	; 0x02
    3f0a:	93 81       	ldd	r25, Z+3	; 0x03
    3f0c:	20 e0       	ldi	r18, 0x00	; 0
    3f0e:	30 e0       	ldi	r19, 0x00	; 0
    3f10:	40 e8       	ldi	r20, 0x80	; 128
    3f12:	5f e3       	ldi	r21, 0x3F	; 63
    3f14:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3f18:	88 23       	and	r24, r24
    3f1a:	44 f4       	brge	.+16     	; 0x3f2c <main+0xa6e>
		__ticks = 1;
    3f1c:	fe 01       	movw	r30, r28
    3f1e:	e3 55       	subi	r30, 0x53	; 83
    3f20:	ff 4f       	sbci	r31, 0xFF	; 255
    3f22:	81 e0       	ldi	r24, 0x01	; 1
    3f24:	90 e0       	ldi	r25, 0x00	; 0
    3f26:	91 83       	std	Z+1, r25	; 0x01
    3f28:	80 83       	st	Z, r24
    3f2a:	64 c0       	rjmp	.+200    	; 0x3ff4 <main+0xb36>
	else if (__tmp > 65535)
    3f2c:	fe 01       	movw	r30, r28
    3f2e:	e1 55       	subi	r30, 0x51	; 81
    3f30:	ff 4f       	sbci	r31, 0xFF	; 255
    3f32:	60 81       	ld	r22, Z
    3f34:	71 81       	ldd	r23, Z+1	; 0x01
    3f36:	82 81       	ldd	r24, Z+2	; 0x02
    3f38:	93 81       	ldd	r25, Z+3	; 0x03
    3f3a:	20 e0       	ldi	r18, 0x00	; 0
    3f3c:	3f ef       	ldi	r19, 0xFF	; 255
    3f3e:	4f e7       	ldi	r20, 0x7F	; 127
    3f40:	57 e4       	ldi	r21, 0x47	; 71
    3f42:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3f46:	18 16       	cp	r1, r24
    3f48:	0c f0       	brlt	.+2      	; 0x3f4c <main+0xa8e>
    3f4a:	43 c0       	rjmp	.+134    	; 0x3fd2 <main+0xb14>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f4c:	fe 01       	movw	r30, r28
    3f4e:	ed 54       	subi	r30, 0x4D	; 77
    3f50:	ff 4f       	sbci	r31, 0xFF	; 255
    3f52:	60 81       	ld	r22, Z
    3f54:	71 81       	ldd	r23, Z+1	; 0x01
    3f56:	82 81       	ldd	r24, Z+2	; 0x02
    3f58:	93 81       	ldd	r25, Z+3	; 0x03
    3f5a:	20 e0       	ldi	r18, 0x00	; 0
    3f5c:	30 e0       	ldi	r19, 0x00	; 0
    3f5e:	40 e2       	ldi	r20, 0x20	; 32
    3f60:	51 e4       	ldi	r21, 0x41	; 65
    3f62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f66:	dc 01       	movw	r26, r24
    3f68:	cb 01       	movw	r24, r22
    3f6a:	8e 01       	movw	r16, r28
    3f6c:	03 55       	subi	r16, 0x53	; 83
    3f6e:	1f 4f       	sbci	r17, 0xFF	; 255
    3f70:	bc 01       	movw	r22, r24
    3f72:	cd 01       	movw	r24, r26
    3f74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f78:	dc 01       	movw	r26, r24
    3f7a:	cb 01       	movw	r24, r22
    3f7c:	f8 01       	movw	r30, r16
    3f7e:	91 83       	std	Z+1, r25	; 0x01
    3f80:	80 83       	st	Z, r24
    3f82:	1f c0       	rjmp	.+62     	; 0x3fc2 <main+0xb04>
    3f84:	fe 01       	movw	r30, r28
    3f86:	e5 55       	subi	r30, 0x55	; 85
    3f88:	ff 4f       	sbci	r31, 0xFF	; 255
    3f8a:	88 ec       	ldi	r24, 0xC8	; 200
    3f8c:	90 e0       	ldi	r25, 0x00	; 0
    3f8e:	91 83       	std	Z+1, r25	; 0x01
    3f90:	80 83       	st	Z, r24
    3f92:	fe 01       	movw	r30, r28
    3f94:	e5 55       	subi	r30, 0x55	; 85
    3f96:	ff 4f       	sbci	r31, 0xFF	; 255
    3f98:	80 81       	ld	r24, Z
    3f9a:	91 81       	ldd	r25, Z+1	; 0x01
    3f9c:	01 97       	sbiw	r24, 0x01	; 1
    3f9e:	f1 f7       	brne	.-4      	; 0x3f9c <main+0xade>
    3fa0:	fe 01       	movw	r30, r28
    3fa2:	e5 55       	subi	r30, 0x55	; 85
    3fa4:	ff 4f       	sbci	r31, 0xFF	; 255
    3fa6:	91 83       	std	Z+1, r25	; 0x01
    3fa8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3faa:	de 01       	movw	r26, r28
    3fac:	a3 55       	subi	r26, 0x53	; 83
    3fae:	bf 4f       	sbci	r27, 0xFF	; 255
    3fb0:	fe 01       	movw	r30, r28
    3fb2:	e3 55       	subi	r30, 0x53	; 83
    3fb4:	ff 4f       	sbci	r31, 0xFF	; 255
    3fb6:	80 81       	ld	r24, Z
    3fb8:	91 81       	ldd	r25, Z+1	; 0x01
    3fba:	01 97       	sbiw	r24, 0x01	; 1
    3fbc:	11 96       	adiw	r26, 0x01	; 1
    3fbe:	9c 93       	st	X, r25
    3fc0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3fc2:	fe 01       	movw	r30, r28
    3fc4:	e3 55       	subi	r30, 0x53	; 83
    3fc6:	ff 4f       	sbci	r31, 0xFF	; 255
    3fc8:	80 81       	ld	r24, Z
    3fca:	91 81       	ldd	r25, Z+1	; 0x01
    3fcc:	00 97       	sbiw	r24, 0x00	; 0
    3fce:	d1 f6       	brne	.-76     	; 0x3f84 <main+0xac6>
    3fd0:	28 c0       	rjmp	.+80     	; 0x4022 <main+0xb64>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3fd2:	8e 01       	movw	r16, r28
    3fd4:	03 55       	subi	r16, 0x53	; 83
    3fd6:	1f 4f       	sbci	r17, 0xFF	; 255
    3fd8:	fe 01       	movw	r30, r28
    3fda:	e1 55       	subi	r30, 0x51	; 81
    3fdc:	ff 4f       	sbci	r31, 0xFF	; 255
    3fde:	60 81       	ld	r22, Z
    3fe0:	71 81       	ldd	r23, Z+1	; 0x01
    3fe2:	82 81       	ldd	r24, Z+2	; 0x02
    3fe4:	93 81       	ldd	r25, Z+3	; 0x03
    3fe6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3fea:	dc 01       	movw	r26, r24
    3fec:	cb 01       	movw	r24, r22
    3fee:	f8 01       	movw	r30, r16
    3ff0:	91 83       	std	Z+1, r25	; 0x01
    3ff2:	80 83       	st	Z, r24
    3ff4:	de 01       	movw	r26, r28
    3ff6:	a7 55       	subi	r26, 0x57	; 87
    3ff8:	bf 4f       	sbci	r27, 0xFF	; 255
    3ffa:	fe 01       	movw	r30, r28
    3ffc:	e3 55       	subi	r30, 0x53	; 83
    3ffe:	ff 4f       	sbci	r31, 0xFF	; 255
    4000:	80 81       	ld	r24, Z
    4002:	91 81       	ldd	r25, Z+1	; 0x01
    4004:	11 96       	adiw	r26, 0x01	; 1
    4006:	9c 93       	st	X, r25
    4008:	8e 93       	st	-X, r24
    400a:	fe 01       	movw	r30, r28
    400c:	e7 55       	subi	r30, 0x57	; 87
    400e:	ff 4f       	sbci	r31, 0xFF	; 255
    4010:	80 81       	ld	r24, Z
    4012:	91 81       	ldd	r25, Z+1	; 0x01
    4014:	01 97       	sbiw	r24, 0x01	; 1
    4016:	f1 f7       	brne	.-4      	; 0x4014 <main+0xb56>
    4018:	fe 01       	movw	r30, r28
    401a:	e7 55       	subi	r30, 0x57	; 87
    401c:	ff 4f       	sbci	r31, 0xFF	; 255
    401e:	91 83       	std	Z+1, r25	; 0x01
    4020:	80 83       	st	Z, r24
					_delay_ms(500);

					u8 len=0;
    4022:	fe 01       	movw	r30, r28
    4024:	e6 51       	subi	r30, 0x16	; 22
    4026:	ff 4f       	sbci	r31, 0xFF	; 255
    4028:	10 82       	st	Z, r1
					u8 pos=12;
    402a:	fe 01       	movw	r30, r28
    402c:	e7 51       	subi	r30, 0x17	; 23
    402e:	ff 4f       	sbci	r31, 0xFF	; 255
    4030:	8c e0       	ldi	r24, 0x0C	; 12
    4032:	80 83       	st	Z, r24
					do
					{	u8 pass=0xff;
    4034:	fe 01       	movw	r30, r28
    4036:	e8 51       	subi	r30, 0x18	; 24
    4038:	ff 4f       	sbci	r31, 0xFF	; 255
    403a:	8f ef       	ldi	r24, 0xFF	; 255
    403c:	80 83       	st	Z, r24
    403e:	06 c0       	rjmp	.+12     	; 0x404c <main+0xb8e>
						while(pass==0xff)
						{
						pass= KPD_u8GetPressedKey();
    4040:	0e 94 c6 0b 	call	0x178c	; 0x178c <KPD_u8GetPressedKey>
    4044:	fe 01       	movw	r30, r28
    4046:	e8 51       	subi	r30, 0x18	; 24
    4048:	ff 4f       	sbci	r31, 0xFF	; 255
    404a:	80 83       	st	Z, r24

					u8 len=0;
					u8 pos=12;
					do
					{	u8 pass=0xff;
						while(pass==0xff)
    404c:	fe 01       	movw	r30, r28
    404e:	e8 51       	subi	r30, 0x18	; 24
    4050:	ff 4f       	sbci	r31, 0xFF	; 255
    4052:	80 81       	ld	r24, Z
    4054:	8f 3f       	cpi	r24, 0xFF	; 255
    4056:	a1 f3       	breq	.-24     	; 0x4040 <main+0xb82>
						{
						pass= KPD_u8GetPressedKey();
						}
						eeprom_write_byte((u8*)102+len,pass);
    4058:	fe 01       	movw	r30, r28
    405a:	e6 51       	subi	r30, 0x16	; 22
    405c:	ff 4f       	sbci	r31, 0xFF	; 255
    405e:	80 81       	ld	r24, Z
    4060:	88 2f       	mov	r24, r24
    4062:	90 e0       	ldi	r25, 0x00	; 0
    4064:	8a 59       	subi	r24, 0x9A	; 154
    4066:	9f 4f       	sbci	r25, 0xFF	; 255
    4068:	fe 01       	movw	r30, r28
    406a:	e8 51       	subi	r30, 0x18	; 24
    406c:	ff 4f       	sbci	r31, 0xFF	; 255
    406e:	60 81       	ld	r22, Z
    4070:	0e 94 77 2b 	call	0x56ee	; 0x56ee <__eewr_byte_m32>
						CLCD_vGoToXY(len,1);
    4074:	fe 01       	movw	r30, r28
    4076:	e6 51       	subi	r30, 0x16	; 22
    4078:	ff 4f       	sbci	r31, 0xFF	; 255
    407a:	80 81       	ld	r24, Z
    407c:	61 e0       	ldi	r22, 0x01	; 1
    407e:	0e 94 d5 17 	call	0x2faa	; 0x2faa <CLCD_vGoToXY>
						CLCD_vSendNumber(pass);
    4082:	fe 01       	movw	r30, r28
    4084:	e8 51       	subi	r30, 0x18	; 24
    4086:	ff 4f       	sbci	r31, 0xFF	; 255
    4088:	80 81       	ld	r24, Z
    408a:	88 2f       	mov	r24, r24
    408c:	90 e0       	ldi	r25, 0x00	; 0
    408e:	0e 94 6f 18 	call	0x30de	; 0x30de <CLCD_vSendNumber>
    4092:	fe 01       	movw	r30, r28
    4094:	eb 55       	subi	r30, 0x5B	; 91
    4096:	ff 4f       	sbci	r31, 0xFF	; 255
    4098:	80 e0       	ldi	r24, 0x00	; 0
    409a:	90 e0       	ldi	r25, 0x00	; 0
    409c:	a8 e4       	ldi	r26, 0x48	; 72
    409e:	b3 e4       	ldi	r27, 0x43	; 67
    40a0:	80 83       	st	Z, r24
    40a2:	91 83       	std	Z+1, r25	; 0x01
    40a4:	a2 83       	std	Z+2, r26	; 0x02
    40a6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    40a8:	8e 01       	movw	r16, r28
    40aa:	0f 55       	subi	r16, 0x5F	; 95
    40ac:	1f 4f       	sbci	r17, 0xFF	; 255
    40ae:	fe 01       	movw	r30, r28
    40b0:	eb 55       	subi	r30, 0x5B	; 91
    40b2:	ff 4f       	sbci	r31, 0xFF	; 255
    40b4:	60 81       	ld	r22, Z
    40b6:	71 81       	ldd	r23, Z+1	; 0x01
    40b8:	82 81       	ldd	r24, Z+2	; 0x02
    40ba:	93 81       	ldd	r25, Z+3	; 0x03
    40bc:	20 e0       	ldi	r18, 0x00	; 0
    40be:	30 e0       	ldi	r19, 0x00	; 0
    40c0:	4a ef       	ldi	r20, 0xFA	; 250
    40c2:	54 e4       	ldi	r21, 0x44	; 68
    40c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40c8:	dc 01       	movw	r26, r24
    40ca:	cb 01       	movw	r24, r22
    40cc:	f8 01       	movw	r30, r16
    40ce:	80 83       	st	Z, r24
    40d0:	91 83       	std	Z+1, r25	; 0x01
    40d2:	a2 83       	std	Z+2, r26	; 0x02
    40d4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    40d6:	fe 01       	movw	r30, r28
    40d8:	ef 55       	subi	r30, 0x5F	; 95
    40da:	ff 4f       	sbci	r31, 0xFF	; 255
    40dc:	60 81       	ld	r22, Z
    40de:	71 81       	ldd	r23, Z+1	; 0x01
    40e0:	82 81       	ldd	r24, Z+2	; 0x02
    40e2:	93 81       	ldd	r25, Z+3	; 0x03
    40e4:	20 e0       	ldi	r18, 0x00	; 0
    40e6:	30 e0       	ldi	r19, 0x00	; 0
    40e8:	40 e8       	ldi	r20, 0x80	; 128
    40ea:	5f e3       	ldi	r21, 0x3F	; 63
    40ec:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    40f0:	88 23       	and	r24, r24
    40f2:	44 f4       	brge	.+16     	; 0x4104 <main+0xc46>
		__ticks = 1;
    40f4:	fe 01       	movw	r30, r28
    40f6:	e1 56       	subi	r30, 0x61	; 97
    40f8:	ff 4f       	sbci	r31, 0xFF	; 255
    40fa:	81 e0       	ldi	r24, 0x01	; 1
    40fc:	90 e0       	ldi	r25, 0x00	; 0
    40fe:	91 83       	std	Z+1, r25	; 0x01
    4100:	80 83       	st	Z, r24
    4102:	64 c0       	rjmp	.+200    	; 0x41cc <main+0xd0e>
	else if (__tmp > 65535)
    4104:	fe 01       	movw	r30, r28
    4106:	ef 55       	subi	r30, 0x5F	; 95
    4108:	ff 4f       	sbci	r31, 0xFF	; 255
    410a:	60 81       	ld	r22, Z
    410c:	71 81       	ldd	r23, Z+1	; 0x01
    410e:	82 81       	ldd	r24, Z+2	; 0x02
    4110:	93 81       	ldd	r25, Z+3	; 0x03
    4112:	20 e0       	ldi	r18, 0x00	; 0
    4114:	3f ef       	ldi	r19, 0xFF	; 255
    4116:	4f e7       	ldi	r20, 0x7F	; 127
    4118:	57 e4       	ldi	r21, 0x47	; 71
    411a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    411e:	18 16       	cp	r1, r24
    4120:	0c f0       	brlt	.+2      	; 0x4124 <main+0xc66>
    4122:	43 c0       	rjmp	.+134    	; 0x41aa <main+0xcec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4124:	fe 01       	movw	r30, r28
    4126:	eb 55       	subi	r30, 0x5B	; 91
    4128:	ff 4f       	sbci	r31, 0xFF	; 255
    412a:	60 81       	ld	r22, Z
    412c:	71 81       	ldd	r23, Z+1	; 0x01
    412e:	82 81       	ldd	r24, Z+2	; 0x02
    4130:	93 81       	ldd	r25, Z+3	; 0x03
    4132:	20 e0       	ldi	r18, 0x00	; 0
    4134:	30 e0       	ldi	r19, 0x00	; 0
    4136:	40 e2       	ldi	r20, 0x20	; 32
    4138:	51 e4       	ldi	r21, 0x41	; 65
    413a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    413e:	dc 01       	movw	r26, r24
    4140:	cb 01       	movw	r24, r22
    4142:	8e 01       	movw	r16, r28
    4144:	01 56       	subi	r16, 0x61	; 97
    4146:	1f 4f       	sbci	r17, 0xFF	; 255
    4148:	bc 01       	movw	r22, r24
    414a:	cd 01       	movw	r24, r26
    414c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4150:	dc 01       	movw	r26, r24
    4152:	cb 01       	movw	r24, r22
    4154:	f8 01       	movw	r30, r16
    4156:	91 83       	std	Z+1, r25	; 0x01
    4158:	80 83       	st	Z, r24
    415a:	1f c0       	rjmp	.+62     	; 0x419a <main+0xcdc>
    415c:	fe 01       	movw	r30, r28
    415e:	e3 56       	subi	r30, 0x63	; 99
    4160:	ff 4f       	sbci	r31, 0xFF	; 255
    4162:	88 ec       	ldi	r24, 0xC8	; 200
    4164:	90 e0       	ldi	r25, 0x00	; 0
    4166:	91 83       	std	Z+1, r25	; 0x01
    4168:	80 83       	st	Z, r24
    416a:	fe 01       	movw	r30, r28
    416c:	e3 56       	subi	r30, 0x63	; 99
    416e:	ff 4f       	sbci	r31, 0xFF	; 255
    4170:	80 81       	ld	r24, Z
    4172:	91 81       	ldd	r25, Z+1	; 0x01
    4174:	01 97       	sbiw	r24, 0x01	; 1
    4176:	f1 f7       	brne	.-4      	; 0x4174 <main+0xcb6>
    4178:	fe 01       	movw	r30, r28
    417a:	e3 56       	subi	r30, 0x63	; 99
    417c:	ff 4f       	sbci	r31, 0xFF	; 255
    417e:	91 83       	std	Z+1, r25	; 0x01
    4180:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4182:	de 01       	movw	r26, r28
    4184:	a1 56       	subi	r26, 0x61	; 97
    4186:	bf 4f       	sbci	r27, 0xFF	; 255
    4188:	fe 01       	movw	r30, r28
    418a:	e1 56       	subi	r30, 0x61	; 97
    418c:	ff 4f       	sbci	r31, 0xFF	; 255
    418e:	80 81       	ld	r24, Z
    4190:	91 81       	ldd	r25, Z+1	; 0x01
    4192:	01 97       	sbiw	r24, 0x01	; 1
    4194:	11 96       	adiw	r26, 0x01	; 1
    4196:	9c 93       	st	X, r25
    4198:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    419a:	fe 01       	movw	r30, r28
    419c:	e1 56       	subi	r30, 0x61	; 97
    419e:	ff 4f       	sbci	r31, 0xFF	; 255
    41a0:	80 81       	ld	r24, Z
    41a2:	91 81       	ldd	r25, Z+1	; 0x01
    41a4:	00 97       	sbiw	r24, 0x00	; 0
    41a6:	d1 f6       	brne	.-76     	; 0x415c <main+0xc9e>
    41a8:	27 c0       	rjmp	.+78     	; 0x41f8 <main+0xd3a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    41aa:	8e 01       	movw	r16, r28
    41ac:	01 56       	subi	r16, 0x61	; 97
    41ae:	1f 4f       	sbci	r17, 0xFF	; 255
    41b0:	fe 01       	movw	r30, r28
    41b2:	ef 55       	subi	r30, 0x5F	; 95
    41b4:	ff 4f       	sbci	r31, 0xFF	; 255
    41b6:	60 81       	ld	r22, Z
    41b8:	71 81       	ldd	r23, Z+1	; 0x01
    41ba:	82 81       	ldd	r24, Z+2	; 0x02
    41bc:	93 81       	ldd	r25, Z+3	; 0x03
    41be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41c2:	dc 01       	movw	r26, r24
    41c4:	cb 01       	movw	r24, r22
    41c6:	f8 01       	movw	r30, r16
    41c8:	91 83       	std	Z+1, r25	; 0x01
    41ca:	80 83       	st	Z, r24
    41cc:	de 01       	movw	r26, r28
    41ce:	a5 56       	subi	r26, 0x65	; 101
    41d0:	bf 4f       	sbci	r27, 0xFF	; 255
    41d2:	fe 01       	movw	r30, r28
    41d4:	e1 56       	subi	r30, 0x61	; 97
    41d6:	ff 4f       	sbci	r31, 0xFF	; 255
    41d8:	80 81       	ld	r24, Z
    41da:	91 81       	ldd	r25, Z+1	; 0x01
    41dc:	8d 93       	st	X+, r24
    41de:	9c 93       	st	X, r25
    41e0:	fe 01       	movw	r30, r28
    41e2:	e5 56       	subi	r30, 0x65	; 101
    41e4:	ff 4f       	sbci	r31, 0xFF	; 255
    41e6:	80 81       	ld	r24, Z
    41e8:	91 81       	ldd	r25, Z+1	; 0x01
    41ea:	01 97       	sbiw	r24, 0x01	; 1
    41ec:	f1 f7       	brne	.-4      	; 0x41ea <main+0xd2c>
    41ee:	fe 01       	movw	r30, r28
    41f0:	e5 56       	subi	r30, 0x65	; 101
    41f2:	ff 4f       	sbci	r31, 0xFF	; 255
    41f4:	91 83       	std	Z+1, r25	; 0x01
    41f6:	80 83       	st	Z, r24
						_delay_ms(200);
						CLCD_vGoToXY(len,1);
    41f8:	fe 01       	movw	r30, r28
    41fa:	e6 51       	subi	r30, 0x16	; 22
    41fc:	ff 4f       	sbci	r31, 0xFF	; 255
    41fe:	80 81       	ld	r24, Z
    4200:	61 e0       	ldi	r22, 0x01	; 1
    4202:	0e 94 d5 17 	call	0x2faa	; 0x2faa <CLCD_vGoToXY>
						CLCD_vSendString("*");
    4206:	81 eb       	ldi	r24, 0xB1	; 177
    4208:	90 e0       	ldi	r25, 0x00	; 0
    420a:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <CLCD_vSendString>
						len++;
    420e:	de 01       	movw	r26, r28
    4210:	a6 51       	subi	r26, 0x16	; 22
    4212:	bf 4f       	sbci	r27, 0xFF	; 255
    4214:	fe 01       	movw	r30, r28
    4216:	e6 51       	subi	r30, 0x16	; 22
    4218:	ff 4f       	sbci	r31, 0xFF	; 255
    421a:	80 81       	ld	r24, Z
    421c:	8f 5f       	subi	r24, 0xFF	; 255
    421e:	8c 93       	st	X, r24
					}while(len<4);
    4220:	fe 01       	movw	r30, r28
    4222:	e6 51       	subi	r30, 0x16	; 22
    4224:	ff 4f       	sbci	r31, 0xFF	; 255
    4226:	80 81       	ld	r24, Z
    4228:	84 30       	cpi	r24, 0x04	; 4
    422a:	08 f4       	brcc	.+2      	; 0x422e <main+0xd70>
    422c:	03 cf       	rjmp	.-506    	; 0x4034 <main+0xb76>

					CLCD_vClearScreen();
    422e:	0e 94 2e 19 	call	0x325c	; 0x325c <CLCD_vClearScreen>
					CLCD_vSendString("Password is set");
    4232:	83 eb       	ldi	r24, 0xB3	; 179
    4234:	90 e0       	ldi	r25, 0x00	; 0
    4236:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <CLCD_vSendString>
					eeprom_write_byte((u8*)100,0);
    423a:	84 e6       	ldi	r24, 0x64	; 100
    423c:	90 e0       	ldi	r25, 0x00	; 0
    423e:	60 e0       	ldi	r22, 0x00	; 0
    4240:	0e 94 77 2b 	call	0x56ee	; 0x56ee <__eewr_byte_m32>
    4244:	fe 01       	movw	r30, r28
    4246:	e9 56       	subi	r30, 0x69	; 105
    4248:	ff 4f       	sbci	r31, 0xFF	; 255
    424a:	80 e0       	ldi	r24, 0x00	; 0
    424c:	90 e0       	ldi	r25, 0x00	; 0
    424e:	aa ef       	ldi	r26, 0xFA	; 250
    4250:	b3 e4       	ldi	r27, 0x43	; 67
    4252:	80 83       	st	Z, r24
    4254:	91 83       	std	Z+1, r25	; 0x01
    4256:	a2 83       	std	Z+2, r26	; 0x02
    4258:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    425a:	8e 01       	movw	r16, r28
    425c:	0d 56       	subi	r16, 0x6D	; 109
    425e:	1f 4f       	sbci	r17, 0xFF	; 255
    4260:	fe 01       	movw	r30, r28
    4262:	e9 56       	subi	r30, 0x69	; 105
    4264:	ff 4f       	sbci	r31, 0xFF	; 255
    4266:	60 81       	ld	r22, Z
    4268:	71 81       	ldd	r23, Z+1	; 0x01
    426a:	82 81       	ldd	r24, Z+2	; 0x02
    426c:	93 81       	ldd	r25, Z+3	; 0x03
    426e:	20 e0       	ldi	r18, 0x00	; 0
    4270:	30 e0       	ldi	r19, 0x00	; 0
    4272:	4a ef       	ldi	r20, 0xFA	; 250
    4274:	54 e4       	ldi	r21, 0x44	; 68
    4276:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    427a:	dc 01       	movw	r26, r24
    427c:	cb 01       	movw	r24, r22
    427e:	f8 01       	movw	r30, r16
    4280:	80 83       	st	Z, r24
    4282:	91 83       	std	Z+1, r25	; 0x01
    4284:	a2 83       	std	Z+2, r26	; 0x02
    4286:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4288:	fe 01       	movw	r30, r28
    428a:	ed 56       	subi	r30, 0x6D	; 109
    428c:	ff 4f       	sbci	r31, 0xFF	; 255
    428e:	60 81       	ld	r22, Z
    4290:	71 81       	ldd	r23, Z+1	; 0x01
    4292:	82 81       	ldd	r24, Z+2	; 0x02
    4294:	93 81       	ldd	r25, Z+3	; 0x03
    4296:	20 e0       	ldi	r18, 0x00	; 0
    4298:	30 e0       	ldi	r19, 0x00	; 0
    429a:	40 e8       	ldi	r20, 0x80	; 128
    429c:	5f e3       	ldi	r21, 0x3F	; 63
    429e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    42a2:	88 23       	and	r24, r24
    42a4:	44 f4       	brge	.+16     	; 0x42b6 <main+0xdf8>
		__ticks = 1;
    42a6:	fe 01       	movw	r30, r28
    42a8:	ef 56       	subi	r30, 0x6F	; 111
    42aa:	ff 4f       	sbci	r31, 0xFF	; 255
    42ac:	81 e0       	ldi	r24, 0x01	; 1
    42ae:	90 e0       	ldi	r25, 0x00	; 0
    42b0:	91 83       	std	Z+1, r25	; 0x01
    42b2:	80 83       	st	Z, r24
    42b4:	64 c0       	rjmp	.+200    	; 0x437e <main+0xec0>
	else if (__tmp > 65535)
    42b6:	fe 01       	movw	r30, r28
    42b8:	ed 56       	subi	r30, 0x6D	; 109
    42ba:	ff 4f       	sbci	r31, 0xFF	; 255
    42bc:	60 81       	ld	r22, Z
    42be:	71 81       	ldd	r23, Z+1	; 0x01
    42c0:	82 81       	ldd	r24, Z+2	; 0x02
    42c2:	93 81       	ldd	r25, Z+3	; 0x03
    42c4:	20 e0       	ldi	r18, 0x00	; 0
    42c6:	3f ef       	ldi	r19, 0xFF	; 255
    42c8:	4f e7       	ldi	r20, 0x7F	; 127
    42ca:	57 e4       	ldi	r21, 0x47	; 71
    42cc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    42d0:	18 16       	cp	r1, r24
    42d2:	0c f0       	brlt	.+2      	; 0x42d6 <main+0xe18>
    42d4:	43 c0       	rjmp	.+134    	; 0x435c <main+0xe9e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    42d6:	fe 01       	movw	r30, r28
    42d8:	e9 56       	subi	r30, 0x69	; 105
    42da:	ff 4f       	sbci	r31, 0xFF	; 255
    42dc:	60 81       	ld	r22, Z
    42de:	71 81       	ldd	r23, Z+1	; 0x01
    42e0:	82 81       	ldd	r24, Z+2	; 0x02
    42e2:	93 81       	ldd	r25, Z+3	; 0x03
    42e4:	20 e0       	ldi	r18, 0x00	; 0
    42e6:	30 e0       	ldi	r19, 0x00	; 0
    42e8:	40 e2       	ldi	r20, 0x20	; 32
    42ea:	51 e4       	ldi	r21, 0x41	; 65
    42ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    42f0:	dc 01       	movw	r26, r24
    42f2:	cb 01       	movw	r24, r22
    42f4:	8e 01       	movw	r16, r28
    42f6:	0f 56       	subi	r16, 0x6F	; 111
    42f8:	1f 4f       	sbci	r17, 0xFF	; 255
    42fa:	bc 01       	movw	r22, r24
    42fc:	cd 01       	movw	r24, r26
    42fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4302:	dc 01       	movw	r26, r24
    4304:	cb 01       	movw	r24, r22
    4306:	f8 01       	movw	r30, r16
    4308:	91 83       	std	Z+1, r25	; 0x01
    430a:	80 83       	st	Z, r24
    430c:	1f c0       	rjmp	.+62     	; 0x434c <main+0xe8e>
    430e:	fe 01       	movw	r30, r28
    4310:	e1 57       	subi	r30, 0x71	; 113
    4312:	ff 4f       	sbci	r31, 0xFF	; 255
    4314:	88 ec       	ldi	r24, 0xC8	; 200
    4316:	90 e0       	ldi	r25, 0x00	; 0
    4318:	91 83       	std	Z+1, r25	; 0x01
    431a:	80 83       	st	Z, r24
    431c:	fe 01       	movw	r30, r28
    431e:	e1 57       	subi	r30, 0x71	; 113
    4320:	ff 4f       	sbci	r31, 0xFF	; 255
    4322:	80 81       	ld	r24, Z
    4324:	91 81       	ldd	r25, Z+1	; 0x01
    4326:	01 97       	sbiw	r24, 0x01	; 1
    4328:	f1 f7       	brne	.-4      	; 0x4326 <main+0xe68>
    432a:	fe 01       	movw	r30, r28
    432c:	e1 57       	subi	r30, 0x71	; 113
    432e:	ff 4f       	sbci	r31, 0xFF	; 255
    4330:	91 83       	std	Z+1, r25	; 0x01
    4332:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4334:	de 01       	movw	r26, r28
    4336:	af 56       	subi	r26, 0x6F	; 111
    4338:	bf 4f       	sbci	r27, 0xFF	; 255
    433a:	fe 01       	movw	r30, r28
    433c:	ef 56       	subi	r30, 0x6F	; 111
    433e:	ff 4f       	sbci	r31, 0xFF	; 255
    4340:	80 81       	ld	r24, Z
    4342:	91 81       	ldd	r25, Z+1	; 0x01
    4344:	01 97       	sbiw	r24, 0x01	; 1
    4346:	11 96       	adiw	r26, 0x01	; 1
    4348:	9c 93       	st	X, r25
    434a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    434c:	fe 01       	movw	r30, r28
    434e:	ef 56       	subi	r30, 0x6F	; 111
    4350:	ff 4f       	sbci	r31, 0xFF	; 255
    4352:	80 81       	ld	r24, Z
    4354:	91 81       	ldd	r25, Z+1	; 0x01
    4356:	00 97       	sbiw	r24, 0x00	; 0
    4358:	d1 f6       	brne	.-76     	; 0x430e <main+0xe50>
    435a:	28 c0       	rjmp	.+80     	; 0x43ac <main+0xeee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    435c:	8e 01       	movw	r16, r28
    435e:	0f 56       	subi	r16, 0x6F	; 111
    4360:	1f 4f       	sbci	r17, 0xFF	; 255
    4362:	fe 01       	movw	r30, r28
    4364:	ed 56       	subi	r30, 0x6D	; 109
    4366:	ff 4f       	sbci	r31, 0xFF	; 255
    4368:	60 81       	ld	r22, Z
    436a:	71 81       	ldd	r23, Z+1	; 0x01
    436c:	82 81       	ldd	r24, Z+2	; 0x02
    436e:	93 81       	ldd	r25, Z+3	; 0x03
    4370:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4374:	dc 01       	movw	r26, r24
    4376:	cb 01       	movw	r24, r22
    4378:	f8 01       	movw	r30, r16
    437a:	91 83       	std	Z+1, r25	; 0x01
    437c:	80 83       	st	Z, r24
    437e:	de 01       	movw	r26, r28
    4380:	a3 57       	subi	r26, 0x73	; 115
    4382:	bf 4f       	sbci	r27, 0xFF	; 255
    4384:	fe 01       	movw	r30, r28
    4386:	ef 56       	subi	r30, 0x6F	; 111
    4388:	ff 4f       	sbci	r31, 0xFF	; 255
    438a:	80 81       	ld	r24, Z
    438c:	91 81       	ldd	r25, Z+1	; 0x01
    438e:	11 96       	adiw	r26, 0x01	; 1
    4390:	9c 93       	st	X, r25
    4392:	8e 93       	st	-X, r24
    4394:	fe 01       	movw	r30, r28
    4396:	e3 57       	subi	r30, 0x73	; 115
    4398:	ff 4f       	sbci	r31, 0xFF	; 255
    439a:	80 81       	ld	r24, Z
    439c:	91 81       	ldd	r25, Z+1	; 0x01
    439e:	01 97       	sbiw	r24, 0x01	; 1
    43a0:	f1 f7       	brne	.-4      	; 0x439e <main+0xee0>
    43a2:	fe 01       	movw	r30, r28
    43a4:	e3 57       	subi	r30, 0x73	; 115
    43a6:	ff 4f       	sbci	r31, 0xFF	; 255
    43a8:	91 83       	std	Z+1, r25	; 0x01
    43aa:	80 83       	st	Z, r24
					_delay_ms(500);
					layer=0;
    43ac:	fe 01       	movw	r30, r28
    43ae:	e2 51       	subi	r30, 0x12	; 18
    43b0:	ff 4f       	sbci	r31, 0xFF	; 255
    43b2:	10 82       	st	Z, r1
    43b4:	0c 94 cf 2a 	jmp	0x559e	; 0x559e <main+0x20e0>
					break;
				}

				else
				{
					if(trials==0)
    43b8:	fe 01       	movw	r30, r28
    43ba:	e3 51       	subi	r30, 0x13	; 19
    43bc:	ff 4f       	sbci	r31, 0xFF	; 255
    43be:	80 81       	ld	r24, Z
    43c0:	88 23       	and	r24, r24
    43c2:	61 f4       	brne	.+24     	; 0x43dc <main+0xf1e>
					{
						CLCD_vClearScreen();
    43c4:	0e 94 2e 19 	call	0x325c	; 0x325c <CLCD_vClearScreen>
						CLCD_vSendString("SYSTEM LOCKED");
    43c8:	83 ec       	ldi	r24, 0xC3	; 195
    43ca:	90 e0       	ldi	r25, 0x00	; 0
    43cc:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <CLCD_vSendString>
						DIO_u8SetPinValue(DIO_u8PORTB,DIO_u8PIN1,DIO_u8PIN_HIGH);
    43d0:	81 e0       	ldi	r24, 0x01	; 1
    43d2:	61 e0       	ldi	r22, 0x01	; 1
    43d4:	41 e0       	ldi	r20, 0x01	; 1
    43d6:	0e 94 47 10 	call	0x208e	; 0x208e <DIO_u8SetPinValue>
    43da:	ff cf       	rjmp	.-2      	; 0x43da <main+0xf1c>
						while(1);
					}
					if(layer<2)
    43dc:	fe 01       	movw	r30, r28
    43de:	e2 51       	subi	r30, 0x12	; 18
    43e0:	ff 4f       	sbci	r31, 0xFF	; 255
    43e2:	80 81       	ld	r24, Z
    43e4:	82 30       	cpi	r24, 0x02	; 2
    43e6:	08 f0       	brcs	.+2      	; 0x43ea <main+0xf2c>
    43e8:	13 c1       	rjmp	.+550    	; 0x4610 <main+0x1152>
					{
					CLCD_vClearScreen();
    43ea:	0e 94 2e 19 	call	0x325c	; 0x325c <CLCD_vClearScreen>
					CLCD_vSendString("Enter password:");
    43ee:	81 ea       	ldi	r24, 0xA1	; 161
    43f0:	90 e0       	ldi	r25, 0x00	; 0
    43f2:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <CLCD_vSendString>
					u8 len=0;
    43f6:	fe 01       	movw	r30, r28
    43f8:	e9 51       	subi	r30, 0x19	; 25
    43fa:	ff 4f       	sbci	r31, 0xFF	; 255
    43fc:	10 82       	st	Z, r1
					error=0;
    43fe:	fe 01       	movw	r30, r28
    4400:	e1 51       	subi	r30, 0x11	; 17
    4402:	ff 4f       	sbci	r31, 0xFF	; 255
    4404:	10 82       	st	Z, r1
					do
					{
						u8 pass = 0xff;
    4406:	fe 01       	movw	r30, r28
    4408:	ea 51       	subi	r30, 0x1A	; 26
    440a:	ff 4f       	sbci	r31, 0xFF	; 255
    440c:	8f ef       	ldi	r24, 0xFF	; 255
    440e:	80 83       	st	Z, r24
    4410:	06 c0       	rjmp	.+12     	; 0x441e <main+0xf60>
						while (pass == 0xff) {
							pass = KPD_u8GetPressedKey();
    4412:	0e 94 c6 0b 	call	0x178c	; 0x178c <KPD_u8GetPressedKey>
    4416:	fe 01       	movw	r30, r28
    4418:	ea 51       	subi	r30, 0x1A	; 26
    441a:	ff 4f       	sbci	r31, 0xFF	; 255
    441c:	80 83       	st	Z, r24
					u8 len=0;
					error=0;
					do
					{
						u8 pass = 0xff;
						while (pass == 0xff) {
    441e:	fe 01       	movw	r30, r28
    4420:	ea 51       	subi	r30, 0x1A	; 26
    4422:	ff 4f       	sbci	r31, 0xFF	; 255
    4424:	80 81       	ld	r24, Z
    4426:	8f 3f       	cpi	r24, 0xFF	; 255
    4428:	a1 f3       	breq	.-24     	; 0x4412 <main+0xf54>
							pass = KPD_u8GetPressedKey();
						}
						if(pass!=EEPROM_u8Read(102+len))
    442a:	fe 01       	movw	r30, r28
    442c:	e9 51       	subi	r30, 0x19	; 25
    442e:	ff 4f       	sbci	r31, 0xFF	; 255
    4430:	80 81       	ld	r24, Z
    4432:	88 2f       	mov	r24, r24
    4434:	90 e0       	ldi	r25, 0x00	; 0
    4436:	8a 59       	subi	r24, 0x9A	; 154
    4438:	9f 4f       	sbci	r25, 0xFF	; 255
    443a:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <EEPROM_u8Read>
    443e:	98 2f       	mov	r25, r24
    4440:	fe 01       	movw	r30, r28
    4442:	ea 51       	subi	r30, 0x1A	; 26
    4444:	ff 4f       	sbci	r31, 0xFF	; 255
    4446:	80 81       	ld	r24, Z
    4448:	98 17       	cp	r25, r24
    444a:	29 f0       	breq	.+10     	; 0x4456 <main+0xf98>
						{
							error=1;
    444c:	fe 01       	movw	r30, r28
    444e:	e1 51       	subi	r30, 0x11	; 17
    4450:	ff 4f       	sbci	r31, 0xFF	; 255
    4452:	81 e0       	ldi	r24, 0x01	; 1
    4454:	80 83       	st	Z, r24
						}
						CLCD_vGoToXY(len, 1);
    4456:	fe 01       	movw	r30, r28
    4458:	e9 51       	subi	r30, 0x19	; 25
    445a:	ff 4f       	sbci	r31, 0xFF	; 255
    445c:	80 81       	ld	r24, Z
    445e:	61 e0       	ldi	r22, 0x01	; 1
    4460:	0e 94 d5 17 	call	0x2faa	; 0x2faa <CLCD_vGoToXY>
						CLCD_vSendNumber(pass);
    4464:	fe 01       	movw	r30, r28
    4466:	ea 51       	subi	r30, 0x1A	; 26
    4468:	ff 4f       	sbci	r31, 0xFF	; 255
    446a:	80 81       	ld	r24, Z
    446c:	88 2f       	mov	r24, r24
    446e:	90 e0       	ldi	r25, 0x00	; 0
    4470:	0e 94 6f 18 	call	0x30de	; 0x30de <CLCD_vSendNumber>
    4474:	fe 01       	movw	r30, r28
    4476:	e7 57       	subi	r30, 0x77	; 119
    4478:	ff 4f       	sbci	r31, 0xFF	; 255
    447a:	80 e0       	ldi	r24, 0x00	; 0
    447c:	90 e0       	ldi	r25, 0x00	; 0
    447e:	a8 e4       	ldi	r26, 0x48	; 72
    4480:	b3 e4       	ldi	r27, 0x43	; 67
    4482:	80 83       	st	Z, r24
    4484:	91 83       	std	Z+1, r25	; 0x01
    4486:	a2 83       	std	Z+2, r26	; 0x02
    4488:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    448a:	8e 01       	movw	r16, r28
    448c:	0b 57       	subi	r16, 0x7B	; 123
    448e:	1f 4f       	sbci	r17, 0xFF	; 255
    4490:	fe 01       	movw	r30, r28
    4492:	e7 57       	subi	r30, 0x77	; 119
    4494:	ff 4f       	sbci	r31, 0xFF	; 255
    4496:	60 81       	ld	r22, Z
    4498:	71 81       	ldd	r23, Z+1	; 0x01
    449a:	82 81       	ldd	r24, Z+2	; 0x02
    449c:	93 81       	ldd	r25, Z+3	; 0x03
    449e:	20 e0       	ldi	r18, 0x00	; 0
    44a0:	30 e0       	ldi	r19, 0x00	; 0
    44a2:	4a ef       	ldi	r20, 0xFA	; 250
    44a4:	54 e4       	ldi	r21, 0x44	; 68
    44a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    44aa:	dc 01       	movw	r26, r24
    44ac:	cb 01       	movw	r24, r22
    44ae:	f8 01       	movw	r30, r16
    44b0:	80 83       	st	Z, r24
    44b2:	91 83       	std	Z+1, r25	; 0x01
    44b4:	a2 83       	std	Z+2, r26	; 0x02
    44b6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    44b8:	fe 01       	movw	r30, r28
    44ba:	eb 57       	subi	r30, 0x7B	; 123
    44bc:	ff 4f       	sbci	r31, 0xFF	; 255
    44be:	60 81       	ld	r22, Z
    44c0:	71 81       	ldd	r23, Z+1	; 0x01
    44c2:	82 81       	ldd	r24, Z+2	; 0x02
    44c4:	93 81       	ldd	r25, Z+3	; 0x03
    44c6:	20 e0       	ldi	r18, 0x00	; 0
    44c8:	30 e0       	ldi	r19, 0x00	; 0
    44ca:	40 e8       	ldi	r20, 0x80	; 128
    44cc:	5f e3       	ldi	r21, 0x3F	; 63
    44ce:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    44d2:	88 23       	and	r24, r24
    44d4:	44 f4       	brge	.+16     	; 0x44e6 <main+0x1028>
		__ticks = 1;
    44d6:	fe 01       	movw	r30, r28
    44d8:	ed 57       	subi	r30, 0x7D	; 125
    44da:	ff 4f       	sbci	r31, 0xFF	; 255
    44dc:	81 e0       	ldi	r24, 0x01	; 1
    44de:	90 e0       	ldi	r25, 0x00	; 0
    44e0:	91 83       	std	Z+1, r25	; 0x01
    44e2:	80 83       	st	Z, r24
    44e4:	64 c0       	rjmp	.+200    	; 0x45ae <main+0x10f0>
	else if (__tmp > 65535)
    44e6:	fe 01       	movw	r30, r28
    44e8:	eb 57       	subi	r30, 0x7B	; 123
    44ea:	ff 4f       	sbci	r31, 0xFF	; 255
    44ec:	60 81       	ld	r22, Z
    44ee:	71 81       	ldd	r23, Z+1	; 0x01
    44f0:	82 81       	ldd	r24, Z+2	; 0x02
    44f2:	93 81       	ldd	r25, Z+3	; 0x03
    44f4:	20 e0       	ldi	r18, 0x00	; 0
    44f6:	3f ef       	ldi	r19, 0xFF	; 255
    44f8:	4f e7       	ldi	r20, 0x7F	; 127
    44fa:	57 e4       	ldi	r21, 0x47	; 71
    44fc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4500:	18 16       	cp	r1, r24
    4502:	0c f0       	brlt	.+2      	; 0x4506 <main+0x1048>
    4504:	43 c0       	rjmp	.+134    	; 0x458c <main+0x10ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4506:	fe 01       	movw	r30, r28
    4508:	e7 57       	subi	r30, 0x77	; 119
    450a:	ff 4f       	sbci	r31, 0xFF	; 255
    450c:	60 81       	ld	r22, Z
    450e:	71 81       	ldd	r23, Z+1	; 0x01
    4510:	82 81       	ldd	r24, Z+2	; 0x02
    4512:	93 81       	ldd	r25, Z+3	; 0x03
    4514:	20 e0       	ldi	r18, 0x00	; 0
    4516:	30 e0       	ldi	r19, 0x00	; 0
    4518:	40 e2       	ldi	r20, 0x20	; 32
    451a:	51 e4       	ldi	r21, 0x41	; 65
    451c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4520:	dc 01       	movw	r26, r24
    4522:	cb 01       	movw	r24, r22
    4524:	8e 01       	movw	r16, r28
    4526:	0d 57       	subi	r16, 0x7D	; 125
    4528:	1f 4f       	sbci	r17, 0xFF	; 255
    452a:	bc 01       	movw	r22, r24
    452c:	cd 01       	movw	r24, r26
    452e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4532:	dc 01       	movw	r26, r24
    4534:	cb 01       	movw	r24, r22
    4536:	f8 01       	movw	r30, r16
    4538:	91 83       	std	Z+1, r25	; 0x01
    453a:	80 83       	st	Z, r24
    453c:	1f c0       	rjmp	.+62     	; 0x457c <main+0x10be>
    453e:	fe 01       	movw	r30, r28
    4540:	ef 57       	subi	r30, 0x7F	; 127
    4542:	ff 4f       	sbci	r31, 0xFF	; 255
    4544:	88 ec       	ldi	r24, 0xC8	; 200
    4546:	90 e0       	ldi	r25, 0x00	; 0
    4548:	91 83       	std	Z+1, r25	; 0x01
    454a:	80 83       	st	Z, r24
    454c:	fe 01       	movw	r30, r28
    454e:	ef 57       	subi	r30, 0x7F	; 127
    4550:	ff 4f       	sbci	r31, 0xFF	; 255
    4552:	80 81       	ld	r24, Z
    4554:	91 81       	ldd	r25, Z+1	; 0x01
    4556:	01 97       	sbiw	r24, 0x01	; 1
    4558:	f1 f7       	brne	.-4      	; 0x4556 <main+0x1098>
    455a:	fe 01       	movw	r30, r28
    455c:	ef 57       	subi	r30, 0x7F	; 127
    455e:	ff 4f       	sbci	r31, 0xFF	; 255
    4560:	91 83       	std	Z+1, r25	; 0x01
    4562:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4564:	de 01       	movw	r26, r28
    4566:	ad 57       	subi	r26, 0x7D	; 125
    4568:	bf 4f       	sbci	r27, 0xFF	; 255
    456a:	fe 01       	movw	r30, r28
    456c:	ed 57       	subi	r30, 0x7D	; 125
    456e:	ff 4f       	sbci	r31, 0xFF	; 255
    4570:	80 81       	ld	r24, Z
    4572:	91 81       	ldd	r25, Z+1	; 0x01
    4574:	01 97       	sbiw	r24, 0x01	; 1
    4576:	11 96       	adiw	r26, 0x01	; 1
    4578:	9c 93       	st	X, r25
    457a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    457c:	fe 01       	movw	r30, r28
    457e:	ed 57       	subi	r30, 0x7D	; 125
    4580:	ff 4f       	sbci	r31, 0xFF	; 255
    4582:	80 81       	ld	r24, Z
    4584:	91 81       	ldd	r25, Z+1	; 0x01
    4586:	00 97       	sbiw	r24, 0x00	; 0
    4588:	d1 f6       	brne	.-76     	; 0x453e <main+0x1080>
    458a:	27 c0       	rjmp	.+78     	; 0x45da <main+0x111c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    458c:	8e 01       	movw	r16, r28
    458e:	0d 57       	subi	r16, 0x7D	; 125
    4590:	1f 4f       	sbci	r17, 0xFF	; 255
    4592:	fe 01       	movw	r30, r28
    4594:	eb 57       	subi	r30, 0x7B	; 123
    4596:	ff 4f       	sbci	r31, 0xFF	; 255
    4598:	60 81       	ld	r22, Z
    459a:	71 81       	ldd	r23, Z+1	; 0x01
    459c:	82 81       	ldd	r24, Z+2	; 0x02
    459e:	93 81       	ldd	r25, Z+3	; 0x03
    45a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    45a4:	dc 01       	movw	r26, r24
    45a6:	cb 01       	movw	r24, r22
    45a8:	f8 01       	movw	r30, r16
    45aa:	91 83       	std	Z+1, r25	; 0x01
    45ac:	80 83       	st	Z, r24
    45ae:	de 01       	movw	r26, r28
    45b0:	a1 58       	subi	r26, 0x81	; 129
    45b2:	bf 4f       	sbci	r27, 0xFF	; 255
    45b4:	fe 01       	movw	r30, r28
    45b6:	ed 57       	subi	r30, 0x7D	; 125
    45b8:	ff 4f       	sbci	r31, 0xFF	; 255
    45ba:	80 81       	ld	r24, Z
    45bc:	91 81       	ldd	r25, Z+1	; 0x01
    45be:	8d 93       	st	X+, r24
    45c0:	9c 93       	st	X, r25
    45c2:	fe 01       	movw	r30, r28
    45c4:	e1 58       	subi	r30, 0x81	; 129
    45c6:	ff 4f       	sbci	r31, 0xFF	; 255
    45c8:	80 81       	ld	r24, Z
    45ca:	91 81       	ldd	r25, Z+1	; 0x01
    45cc:	01 97       	sbiw	r24, 0x01	; 1
    45ce:	f1 f7       	brne	.-4      	; 0x45cc <main+0x110e>
    45d0:	fe 01       	movw	r30, r28
    45d2:	e1 58       	subi	r30, 0x81	; 129
    45d4:	ff 4f       	sbci	r31, 0xFF	; 255
    45d6:	91 83       	std	Z+1, r25	; 0x01
    45d8:	80 83       	st	Z, r24
						_delay_ms(200);
						CLCD_vGoToXY(len, 1);
    45da:	fe 01       	movw	r30, r28
    45dc:	e9 51       	subi	r30, 0x19	; 25
    45de:	ff 4f       	sbci	r31, 0xFF	; 255
    45e0:	80 81       	ld	r24, Z
    45e2:	61 e0       	ldi	r22, 0x01	; 1
    45e4:	0e 94 d5 17 	call	0x2faa	; 0x2faa <CLCD_vGoToXY>
						CLCD_vSendString("*");
    45e8:	81 eb       	ldi	r24, 0xB1	; 177
    45ea:	90 e0       	ldi	r25, 0x00	; 0
    45ec:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <CLCD_vSendString>
						len++;
    45f0:	de 01       	movw	r26, r28
    45f2:	a9 51       	subi	r26, 0x19	; 25
    45f4:	bf 4f       	sbci	r27, 0xFF	; 255
    45f6:	fe 01       	movw	r30, r28
    45f8:	e9 51       	subi	r30, 0x19	; 25
    45fa:	ff 4f       	sbci	r31, 0xFF	; 255
    45fc:	80 81       	ld	r24, Z
    45fe:	8f 5f       	subi	r24, 0xFF	; 255
    4600:	8c 93       	st	X, r24
					} while (len < 4);
    4602:	fe 01       	movw	r30, r28
    4604:	e9 51       	subi	r30, 0x19	; 25
    4606:	ff 4f       	sbci	r31, 0xFF	; 255
    4608:	80 81       	ld	r24, Z
    460a:	84 30       	cpi	r24, 0x04	; 4
    460c:	08 f4       	brcc	.+2      	; 0x4610 <main+0x1152>
    460e:	fb ce       	rjmp	.-522    	; 0x4406 <main+0xf48>
					}

					if(error)
    4610:	fe 01       	movw	r30, r28
    4612:	e1 51       	subi	r30, 0x11	; 17
    4614:	ff 4f       	sbci	r31, 0xFF	; 255
    4616:	80 81       	ld	r24, Z
    4618:	88 23       	and	r24, r24
    461a:	09 f4       	brne	.+2      	; 0x461e <main+0x1160>
    461c:	89 c1       	rjmp	.+786    	; 0x4930 <main+0x1472>
					{
						trials--;
    461e:	de 01       	movw	r26, r28
    4620:	a3 51       	subi	r26, 0x13	; 19
    4622:	bf 4f       	sbci	r27, 0xFF	; 255
    4624:	fe 01       	movw	r30, r28
    4626:	e3 51       	subi	r30, 0x13	; 19
    4628:	ff 4f       	sbci	r31, 0xFF	; 255
    462a:	80 81       	ld	r24, Z
    462c:	81 50       	subi	r24, 0x01	; 1
    462e:	8c 93       	st	X, r24
						CLCD_vClearScreen();
    4630:	0e 94 2e 19 	call	0x325c	; 0x325c <CLCD_vClearScreen>
						CLCD_vSendString("WRONG PASSWORD");
    4634:	81 ed       	ldi	r24, 0xD1	; 209
    4636:	90 e0       	ldi	r25, 0x00	; 0
    4638:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <CLCD_vSendString>
    463c:	fe 01       	movw	r30, r28
    463e:	e5 58       	subi	r30, 0x85	; 133
    4640:	ff 4f       	sbci	r31, 0xFF	; 255
    4642:	80 e0       	ldi	r24, 0x00	; 0
    4644:	90 e0       	ldi	r25, 0x00	; 0
    4646:	aa ef       	ldi	r26, 0xFA	; 250
    4648:	b3 e4       	ldi	r27, 0x43	; 67
    464a:	80 83       	st	Z, r24
    464c:	91 83       	std	Z+1, r25	; 0x01
    464e:	a2 83       	std	Z+2, r26	; 0x02
    4650:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4652:	8e 01       	movw	r16, r28
    4654:	09 58       	subi	r16, 0x89	; 137
    4656:	1f 4f       	sbci	r17, 0xFF	; 255
    4658:	fe 01       	movw	r30, r28
    465a:	e5 58       	subi	r30, 0x85	; 133
    465c:	ff 4f       	sbci	r31, 0xFF	; 255
    465e:	60 81       	ld	r22, Z
    4660:	71 81       	ldd	r23, Z+1	; 0x01
    4662:	82 81       	ldd	r24, Z+2	; 0x02
    4664:	93 81       	ldd	r25, Z+3	; 0x03
    4666:	20 e0       	ldi	r18, 0x00	; 0
    4668:	30 e0       	ldi	r19, 0x00	; 0
    466a:	4a ef       	ldi	r20, 0xFA	; 250
    466c:	54 e4       	ldi	r21, 0x44	; 68
    466e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4672:	dc 01       	movw	r26, r24
    4674:	cb 01       	movw	r24, r22
    4676:	f8 01       	movw	r30, r16
    4678:	80 83       	st	Z, r24
    467a:	91 83       	std	Z+1, r25	; 0x01
    467c:	a2 83       	std	Z+2, r26	; 0x02
    467e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4680:	fe 01       	movw	r30, r28
    4682:	e9 58       	subi	r30, 0x89	; 137
    4684:	ff 4f       	sbci	r31, 0xFF	; 255
    4686:	60 81       	ld	r22, Z
    4688:	71 81       	ldd	r23, Z+1	; 0x01
    468a:	82 81       	ldd	r24, Z+2	; 0x02
    468c:	93 81       	ldd	r25, Z+3	; 0x03
    468e:	20 e0       	ldi	r18, 0x00	; 0
    4690:	30 e0       	ldi	r19, 0x00	; 0
    4692:	40 e8       	ldi	r20, 0x80	; 128
    4694:	5f e3       	ldi	r21, 0x3F	; 63
    4696:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    469a:	88 23       	and	r24, r24
    469c:	44 f4       	brge	.+16     	; 0x46ae <main+0x11f0>
		__ticks = 1;
    469e:	fe 01       	movw	r30, r28
    46a0:	eb 58       	subi	r30, 0x8B	; 139
    46a2:	ff 4f       	sbci	r31, 0xFF	; 255
    46a4:	81 e0       	ldi	r24, 0x01	; 1
    46a6:	90 e0       	ldi	r25, 0x00	; 0
    46a8:	91 83       	std	Z+1, r25	; 0x01
    46aa:	80 83       	st	Z, r24
    46ac:	64 c0       	rjmp	.+200    	; 0x4776 <main+0x12b8>
	else if (__tmp > 65535)
    46ae:	fe 01       	movw	r30, r28
    46b0:	e9 58       	subi	r30, 0x89	; 137
    46b2:	ff 4f       	sbci	r31, 0xFF	; 255
    46b4:	60 81       	ld	r22, Z
    46b6:	71 81       	ldd	r23, Z+1	; 0x01
    46b8:	82 81       	ldd	r24, Z+2	; 0x02
    46ba:	93 81       	ldd	r25, Z+3	; 0x03
    46bc:	20 e0       	ldi	r18, 0x00	; 0
    46be:	3f ef       	ldi	r19, 0xFF	; 255
    46c0:	4f e7       	ldi	r20, 0x7F	; 127
    46c2:	57 e4       	ldi	r21, 0x47	; 71
    46c4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    46c8:	18 16       	cp	r1, r24
    46ca:	0c f0       	brlt	.+2      	; 0x46ce <main+0x1210>
    46cc:	43 c0       	rjmp	.+134    	; 0x4754 <main+0x1296>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    46ce:	fe 01       	movw	r30, r28
    46d0:	e5 58       	subi	r30, 0x85	; 133
    46d2:	ff 4f       	sbci	r31, 0xFF	; 255
    46d4:	60 81       	ld	r22, Z
    46d6:	71 81       	ldd	r23, Z+1	; 0x01
    46d8:	82 81       	ldd	r24, Z+2	; 0x02
    46da:	93 81       	ldd	r25, Z+3	; 0x03
    46dc:	20 e0       	ldi	r18, 0x00	; 0
    46de:	30 e0       	ldi	r19, 0x00	; 0
    46e0:	40 e2       	ldi	r20, 0x20	; 32
    46e2:	51 e4       	ldi	r21, 0x41	; 65
    46e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    46e8:	dc 01       	movw	r26, r24
    46ea:	cb 01       	movw	r24, r22
    46ec:	8e 01       	movw	r16, r28
    46ee:	0b 58       	subi	r16, 0x8B	; 139
    46f0:	1f 4f       	sbci	r17, 0xFF	; 255
    46f2:	bc 01       	movw	r22, r24
    46f4:	cd 01       	movw	r24, r26
    46f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    46fa:	dc 01       	movw	r26, r24
    46fc:	cb 01       	movw	r24, r22
    46fe:	f8 01       	movw	r30, r16
    4700:	91 83       	std	Z+1, r25	; 0x01
    4702:	80 83       	st	Z, r24
    4704:	1f c0       	rjmp	.+62     	; 0x4744 <main+0x1286>
    4706:	fe 01       	movw	r30, r28
    4708:	ed 58       	subi	r30, 0x8D	; 141
    470a:	ff 4f       	sbci	r31, 0xFF	; 255
    470c:	88 ec       	ldi	r24, 0xC8	; 200
    470e:	90 e0       	ldi	r25, 0x00	; 0
    4710:	91 83       	std	Z+1, r25	; 0x01
    4712:	80 83       	st	Z, r24
    4714:	fe 01       	movw	r30, r28
    4716:	ed 58       	subi	r30, 0x8D	; 141
    4718:	ff 4f       	sbci	r31, 0xFF	; 255
    471a:	80 81       	ld	r24, Z
    471c:	91 81       	ldd	r25, Z+1	; 0x01
    471e:	01 97       	sbiw	r24, 0x01	; 1
    4720:	f1 f7       	brne	.-4      	; 0x471e <main+0x1260>
    4722:	fe 01       	movw	r30, r28
    4724:	ed 58       	subi	r30, 0x8D	; 141
    4726:	ff 4f       	sbci	r31, 0xFF	; 255
    4728:	91 83       	std	Z+1, r25	; 0x01
    472a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    472c:	de 01       	movw	r26, r28
    472e:	ab 58       	subi	r26, 0x8B	; 139
    4730:	bf 4f       	sbci	r27, 0xFF	; 255
    4732:	fe 01       	movw	r30, r28
    4734:	eb 58       	subi	r30, 0x8B	; 139
    4736:	ff 4f       	sbci	r31, 0xFF	; 255
    4738:	80 81       	ld	r24, Z
    473a:	91 81       	ldd	r25, Z+1	; 0x01
    473c:	01 97       	sbiw	r24, 0x01	; 1
    473e:	11 96       	adiw	r26, 0x01	; 1
    4740:	9c 93       	st	X, r25
    4742:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4744:	fe 01       	movw	r30, r28
    4746:	eb 58       	subi	r30, 0x8B	; 139
    4748:	ff 4f       	sbci	r31, 0xFF	; 255
    474a:	80 81       	ld	r24, Z
    474c:	91 81       	ldd	r25, Z+1	; 0x01
    474e:	00 97       	sbiw	r24, 0x00	; 0
    4750:	d1 f6       	brne	.-76     	; 0x4706 <main+0x1248>
    4752:	27 c0       	rjmp	.+78     	; 0x47a2 <main+0x12e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4754:	8e 01       	movw	r16, r28
    4756:	0b 58       	subi	r16, 0x8B	; 139
    4758:	1f 4f       	sbci	r17, 0xFF	; 255
    475a:	fe 01       	movw	r30, r28
    475c:	e9 58       	subi	r30, 0x89	; 137
    475e:	ff 4f       	sbci	r31, 0xFF	; 255
    4760:	60 81       	ld	r22, Z
    4762:	71 81       	ldd	r23, Z+1	; 0x01
    4764:	82 81       	ldd	r24, Z+2	; 0x02
    4766:	93 81       	ldd	r25, Z+3	; 0x03
    4768:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    476c:	dc 01       	movw	r26, r24
    476e:	cb 01       	movw	r24, r22
    4770:	f8 01       	movw	r30, r16
    4772:	91 83       	std	Z+1, r25	; 0x01
    4774:	80 83       	st	Z, r24
    4776:	de 01       	movw	r26, r28
    4778:	af 58       	subi	r26, 0x8F	; 143
    477a:	bf 4f       	sbci	r27, 0xFF	; 255
    477c:	fe 01       	movw	r30, r28
    477e:	eb 58       	subi	r30, 0x8B	; 139
    4780:	ff 4f       	sbci	r31, 0xFF	; 255
    4782:	80 81       	ld	r24, Z
    4784:	91 81       	ldd	r25, Z+1	; 0x01
    4786:	8d 93       	st	X+, r24
    4788:	9c 93       	st	X, r25
    478a:	fe 01       	movw	r30, r28
    478c:	ef 58       	subi	r30, 0x8F	; 143
    478e:	ff 4f       	sbci	r31, 0xFF	; 255
    4790:	80 81       	ld	r24, Z
    4792:	91 81       	ldd	r25, Z+1	; 0x01
    4794:	01 97       	sbiw	r24, 0x01	; 1
    4796:	f1 f7       	brne	.-4      	; 0x4794 <main+0x12d6>
    4798:	fe 01       	movw	r30, r28
    479a:	ef 58       	subi	r30, 0x8F	; 143
    479c:	ff 4f       	sbci	r31, 0xFF	; 255
    479e:	91 83       	std	Z+1, r25	; 0x01
    47a0:	80 83       	st	Z, r24
						_delay_ms(500);
						CLCD_vClearScreen();
    47a2:	0e 94 2e 19 	call	0x325c	; 0x325c <CLCD_vClearScreen>
						CLCD_vSendString("Remaining trials");
    47a6:	80 ee       	ldi	r24, 0xE0	; 224
    47a8:	90 e0       	ldi	r25, 0x00	; 0
    47aa:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <CLCD_vSendString>
						CLCD_vGoToXY(0,1);
    47ae:	80 e0       	ldi	r24, 0x00	; 0
    47b0:	61 e0       	ldi	r22, 0x01	; 1
    47b2:	0e 94 d5 17 	call	0x2faa	; 0x2faa <CLCD_vGoToXY>
						CLCD_vSendNumber(trials);
    47b6:	fe 01       	movw	r30, r28
    47b8:	e3 51       	subi	r30, 0x13	; 19
    47ba:	ff 4f       	sbci	r31, 0xFF	; 255
    47bc:	80 81       	ld	r24, Z
    47be:	88 2f       	mov	r24, r24
    47c0:	90 e0       	ldi	r25, 0x00	; 0
    47c2:	0e 94 6f 18 	call	0x30de	; 0x30de <CLCD_vSendNumber>
    47c6:	fe 01       	movw	r30, r28
    47c8:	e3 59       	subi	r30, 0x93	; 147
    47ca:	ff 4f       	sbci	r31, 0xFF	; 255
    47cc:	80 e0       	ldi	r24, 0x00	; 0
    47ce:	90 e0       	ldi	r25, 0x00	; 0
    47d0:	af e2       	ldi	r26, 0x2F	; 47
    47d2:	b4 e4       	ldi	r27, 0x44	; 68
    47d4:	80 83       	st	Z, r24
    47d6:	91 83       	std	Z+1, r25	; 0x01
    47d8:	a2 83       	std	Z+2, r26	; 0x02
    47da:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    47dc:	8e 01       	movw	r16, r28
    47de:	07 59       	subi	r16, 0x97	; 151
    47e0:	1f 4f       	sbci	r17, 0xFF	; 255
    47e2:	fe 01       	movw	r30, r28
    47e4:	e3 59       	subi	r30, 0x93	; 147
    47e6:	ff 4f       	sbci	r31, 0xFF	; 255
    47e8:	60 81       	ld	r22, Z
    47ea:	71 81       	ldd	r23, Z+1	; 0x01
    47ec:	82 81       	ldd	r24, Z+2	; 0x02
    47ee:	93 81       	ldd	r25, Z+3	; 0x03
    47f0:	20 e0       	ldi	r18, 0x00	; 0
    47f2:	30 e0       	ldi	r19, 0x00	; 0
    47f4:	4a ef       	ldi	r20, 0xFA	; 250
    47f6:	54 e4       	ldi	r21, 0x44	; 68
    47f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    47fc:	dc 01       	movw	r26, r24
    47fe:	cb 01       	movw	r24, r22
    4800:	f8 01       	movw	r30, r16
    4802:	80 83       	st	Z, r24
    4804:	91 83       	std	Z+1, r25	; 0x01
    4806:	a2 83       	std	Z+2, r26	; 0x02
    4808:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    480a:	fe 01       	movw	r30, r28
    480c:	e7 59       	subi	r30, 0x97	; 151
    480e:	ff 4f       	sbci	r31, 0xFF	; 255
    4810:	60 81       	ld	r22, Z
    4812:	71 81       	ldd	r23, Z+1	; 0x01
    4814:	82 81       	ldd	r24, Z+2	; 0x02
    4816:	93 81       	ldd	r25, Z+3	; 0x03
    4818:	20 e0       	ldi	r18, 0x00	; 0
    481a:	30 e0       	ldi	r19, 0x00	; 0
    481c:	40 e8       	ldi	r20, 0x80	; 128
    481e:	5f e3       	ldi	r21, 0x3F	; 63
    4820:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4824:	88 23       	and	r24, r24
    4826:	44 f4       	brge	.+16     	; 0x4838 <main+0x137a>
		__ticks = 1;
    4828:	fe 01       	movw	r30, r28
    482a:	e9 59       	subi	r30, 0x99	; 153
    482c:	ff 4f       	sbci	r31, 0xFF	; 255
    482e:	81 e0       	ldi	r24, 0x01	; 1
    4830:	90 e0       	ldi	r25, 0x00	; 0
    4832:	91 83       	std	Z+1, r25	; 0x01
    4834:	80 83       	st	Z, r24
    4836:	64 c0       	rjmp	.+200    	; 0x4900 <main+0x1442>
	else if (__tmp > 65535)
    4838:	fe 01       	movw	r30, r28
    483a:	e7 59       	subi	r30, 0x97	; 151
    483c:	ff 4f       	sbci	r31, 0xFF	; 255
    483e:	60 81       	ld	r22, Z
    4840:	71 81       	ldd	r23, Z+1	; 0x01
    4842:	82 81       	ldd	r24, Z+2	; 0x02
    4844:	93 81       	ldd	r25, Z+3	; 0x03
    4846:	20 e0       	ldi	r18, 0x00	; 0
    4848:	3f ef       	ldi	r19, 0xFF	; 255
    484a:	4f e7       	ldi	r20, 0x7F	; 127
    484c:	57 e4       	ldi	r21, 0x47	; 71
    484e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4852:	18 16       	cp	r1, r24
    4854:	0c f0       	brlt	.+2      	; 0x4858 <main+0x139a>
    4856:	43 c0       	rjmp	.+134    	; 0x48de <main+0x1420>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4858:	fe 01       	movw	r30, r28
    485a:	e3 59       	subi	r30, 0x93	; 147
    485c:	ff 4f       	sbci	r31, 0xFF	; 255
    485e:	60 81       	ld	r22, Z
    4860:	71 81       	ldd	r23, Z+1	; 0x01
    4862:	82 81       	ldd	r24, Z+2	; 0x02
    4864:	93 81       	ldd	r25, Z+3	; 0x03
    4866:	20 e0       	ldi	r18, 0x00	; 0
    4868:	30 e0       	ldi	r19, 0x00	; 0
    486a:	40 e2       	ldi	r20, 0x20	; 32
    486c:	51 e4       	ldi	r21, 0x41	; 65
    486e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4872:	dc 01       	movw	r26, r24
    4874:	cb 01       	movw	r24, r22
    4876:	8e 01       	movw	r16, r28
    4878:	09 59       	subi	r16, 0x99	; 153
    487a:	1f 4f       	sbci	r17, 0xFF	; 255
    487c:	bc 01       	movw	r22, r24
    487e:	cd 01       	movw	r24, r26
    4880:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4884:	dc 01       	movw	r26, r24
    4886:	cb 01       	movw	r24, r22
    4888:	f8 01       	movw	r30, r16
    488a:	91 83       	std	Z+1, r25	; 0x01
    488c:	80 83       	st	Z, r24
    488e:	1f c0       	rjmp	.+62     	; 0x48ce <main+0x1410>
    4890:	fe 01       	movw	r30, r28
    4892:	eb 59       	subi	r30, 0x9B	; 155
    4894:	ff 4f       	sbci	r31, 0xFF	; 255
    4896:	88 ec       	ldi	r24, 0xC8	; 200
    4898:	90 e0       	ldi	r25, 0x00	; 0
    489a:	91 83       	std	Z+1, r25	; 0x01
    489c:	80 83       	st	Z, r24
    489e:	fe 01       	movw	r30, r28
    48a0:	eb 59       	subi	r30, 0x9B	; 155
    48a2:	ff 4f       	sbci	r31, 0xFF	; 255
    48a4:	80 81       	ld	r24, Z
    48a6:	91 81       	ldd	r25, Z+1	; 0x01
    48a8:	01 97       	sbiw	r24, 0x01	; 1
    48aa:	f1 f7       	brne	.-4      	; 0x48a8 <main+0x13ea>
    48ac:	fe 01       	movw	r30, r28
    48ae:	eb 59       	subi	r30, 0x9B	; 155
    48b0:	ff 4f       	sbci	r31, 0xFF	; 255
    48b2:	91 83       	std	Z+1, r25	; 0x01
    48b4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    48b6:	de 01       	movw	r26, r28
    48b8:	a9 59       	subi	r26, 0x99	; 153
    48ba:	bf 4f       	sbci	r27, 0xFF	; 255
    48bc:	fe 01       	movw	r30, r28
    48be:	e9 59       	subi	r30, 0x99	; 153
    48c0:	ff 4f       	sbci	r31, 0xFF	; 255
    48c2:	80 81       	ld	r24, Z
    48c4:	91 81       	ldd	r25, Z+1	; 0x01
    48c6:	01 97       	sbiw	r24, 0x01	; 1
    48c8:	11 96       	adiw	r26, 0x01	; 1
    48ca:	9c 93       	st	X, r25
    48cc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    48ce:	fe 01       	movw	r30, r28
    48d0:	e9 59       	subi	r30, 0x99	; 153
    48d2:	ff 4f       	sbci	r31, 0xFF	; 255
    48d4:	80 81       	ld	r24, Z
    48d6:	91 81       	ldd	r25, Z+1	; 0x01
    48d8:	00 97       	sbiw	r24, 0x00	; 0
    48da:	d1 f6       	brne	.-76     	; 0x4890 <main+0x13d2>
    48dc:	58 c6       	rjmp	.+3248   	; 0x558e <main+0x20d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    48de:	8e 01       	movw	r16, r28
    48e0:	09 59       	subi	r16, 0x99	; 153
    48e2:	1f 4f       	sbci	r17, 0xFF	; 255
    48e4:	fe 01       	movw	r30, r28
    48e6:	e7 59       	subi	r30, 0x97	; 151
    48e8:	ff 4f       	sbci	r31, 0xFF	; 255
    48ea:	60 81       	ld	r22, Z
    48ec:	71 81       	ldd	r23, Z+1	; 0x01
    48ee:	82 81       	ldd	r24, Z+2	; 0x02
    48f0:	93 81       	ldd	r25, Z+3	; 0x03
    48f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    48f6:	dc 01       	movw	r26, r24
    48f8:	cb 01       	movw	r24, r22
    48fa:	f8 01       	movw	r30, r16
    48fc:	91 83       	std	Z+1, r25	; 0x01
    48fe:	80 83       	st	Z, r24
    4900:	de 01       	movw	r26, r28
    4902:	ad 59       	subi	r26, 0x9D	; 157
    4904:	bf 4f       	sbci	r27, 0xFF	; 255
    4906:	fe 01       	movw	r30, r28
    4908:	e9 59       	subi	r30, 0x99	; 153
    490a:	ff 4f       	sbci	r31, 0xFF	; 255
    490c:	80 81       	ld	r24, Z
    490e:	91 81       	ldd	r25, Z+1	; 0x01
    4910:	11 96       	adiw	r26, 0x01	; 1
    4912:	9c 93       	st	X, r25
    4914:	8e 93       	st	-X, r24
    4916:	fe 01       	movw	r30, r28
    4918:	ed 59       	subi	r30, 0x9D	; 157
    491a:	ff 4f       	sbci	r31, 0xFF	; 255
    491c:	80 81       	ld	r24, Z
    491e:	91 81       	ldd	r25, Z+1	; 0x01
    4920:	01 97       	sbiw	r24, 0x01	; 1
    4922:	f1 f7       	brne	.-4      	; 0x4920 <main+0x1462>
    4924:	fe 01       	movw	r30, r28
    4926:	ed 59       	subi	r30, 0x9D	; 157
    4928:	ff 4f       	sbci	r31, 0xFF	; 255
    492a:	91 83       	std	Z+1, r25	; 0x01
    492c:	80 83       	st	Z, r24
    492e:	2f c6       	rjmp	.+3166   	; 0x558e <main+0x20d0>

					else
					{


						if(layer!=2)
    4930:	fe 01       	movw	r30, r28
    4932:	e2 51       	subi	r30, 0x12	; 18
    4934:	ff 4f       	sbci	r31, 0xFF	; 255
    4936:	80 81       	ld	r24, Z
    4938:	82 30       	cpi	r24, 0x02	; 2
    493a:	09 f4       	brne	.+2      	; 0x493e <main+0x1480>
    493c:	b9 c0       	rjmp	.+370    	; 0x4ab0 <main+0x15f2>
						{
						CLCD_vClearScreen();
    493e:	0e 94 2e 19 	call	0x325c	; 0x325c <CLCD_vClearScreen>
						CLCD_vSendString("Welcome User1");
    4942:	81 ef       	ldi	r24, 0xF1	; 241
    4944:	90 e0       	ldi	r25, 0x00	; 0
    4946:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <CLCD_vSendString>
    494a:	fe 01       	movw	r30, r28
    494c:	e1 5a       	subi	r30, 0xA1	; 161
    494e:	ff 4f       	sbci	r31, 0xFF	; 255
    4950:	80 e0       	ldi	r24, 0x00	; 0
    4952:	90 e0       	ldi	r25, 0x00	; 0
    4954:	aa e7       	ldi	r26, 0x7A	; 122
    4956:	b4 e4       	ldi	r27, 0x44	; 68
    4958:	80 83       	st	Z, r24
    495a:	91 83       	std	Z+1, r25	; 0x01
    495c:	a2 83       	std	Z+2, r26	; 0x02
    495e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4960:	8e 01       	movw	r16, r28
    4962:	05 5a       	subi	r16, 0xA5	; 165
    4964:	1f 4f       	sbci	r17, 0xFF	; 255
    4966:	fe 01       	movw	r30, r28
    4968:	e1 5a       	subi	r30, 0xA1	; 161
    496a:	ff 4f       	sbci	r31, 0xFF	; 255
    496c:	60 81       	ld	r22, Z
    496e:	71 81       	ldd	r23, Z+1	; 0x01
    4970:	82 81       	ldd	r24, Z+2	; 0x02
    4972:	93 81       	ldd	r25, Z+3	; 0x03
    4974:	20 e0       	ldi	r18, 0x00	; 0
    4976:	30 e0       	ldi	r19, 0x00	; 0
    4978:	4a ef       	ldi	r20, 0xFA	; 250
    497a:	54 e4       	ldi	r21, 0x44	; 68
    497c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4980:	dc 01       	movw	r26, r24
    4982:	cb 01       	movw	r24, r22
    4984:	f8 01       	movw	r30, r16
    4986:	80 83       	st	Z, r24
    4988:	91 83       	std	Z+1, r25	; 0x01
    498a:	a2 83       	std	Z+2, r26	; 0x02
    498c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    498e:	fe 01       	movw	r30, r28
    4990:	e5 5a       	subi	r30, 0xA5	; 165
    4992:	ff 4f       	sbci	r31, 0xFF	; 255
    4994:	60 81       	ld	r22, Z
    4996:	71 81       	ldd	r23, Z+1	; 0x01
    4998:	82 81       	ldd	r24, Z+2	; 0x02
    499a:	93 81       	ldd	r25, Z+3	; 0x03
    499c:	20 e0       	ldi	r18, 0x00	; 0
    499e:	30 e0       	ldi	r19, 0x00	; 0
    49a0:	40 e8       	ldi	r20, 0x80	; 128
    49a2:	5f e3       	ldi	r21, 0x3F	; 63
    49a4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    49a8:	88 23       	and	r24, r24
    49aa:	44 f4       	brge	.+16     	; 0x49bc <main+0x14fe>
		__ticks = 1;
    49ac:	fe 01       	movw	r30, r28
    49ae:	e7 5a       	subi	r30, 0xA7	; 167
    49b0:	ff 4f       	sbci	r31, 0xFF	; 255
    49b2:	81 e0       	ldi	r24, 0x01	; 1
    49b4:	90 e0       	ldi	r25, 0x00	; 0
    49b6:	91 83       	std	Z+1, r25	; 0x01
    49b8:	80 83       	st	Z, r24
    49ba:	64 c0       	rjmp	.+200    	; 0x4a84 <main+0x15c6>
	else if (__tmp > 65535)
    49bc:	fe 01       	movw	r30, r28
    49be:	e5 5a       	subi	r30, 0xA5	; 165
    49c0:	ff 4f       	sbci	r31, 0xFF	; 255
    49c2:	60 81       	ld	r22, Z
    49c4:	71 81       	ldd	r23, Z+1	; 0x01
    49c6:	82 81       	ldd	r24, Z+2	; 0x02
    49c8:	93 81       	ldd	r25, Z+3	; 0x03
    49ca:	20 e0       	ldi	r18, 0x00	; 0
    49cc:	3f ef       	ldi	r19, 0xFF	; 255
    49ce:	4f e7       	ldi	r20, 0x7F	; 127
    49d0:	57 e4       	ldi	r21, 0x47	; 71
    49d2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    49d6:	18 16       	cp	r1, r24
    49d8:	0c f0       	brlt	.+2      	; 0x49dc <main+0x151e>
    49da:	43 c0       	rjmp	.+134    	; 0x4a62 <main+0x15a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    49dc:	fe 01       	movw	r30, r28
    49de:	e1 5a       	subi	r30, 0xA1	; 161
    49e0:	ff 4f       	sbci	r31, 0xFF	; 255
    49e2:	60 81       	ld	r22, Z
    49e4:	71 81       	ldd	r23, Z+1	; 0x01
    49e6:	82 81       	ldd	r24, Z+2	; 0x02
    49e8:	93 81       	ldd	r25, Z+3	; 0x03
    49ea:	20 e0       	ldi	r18, 0x00	; 0
    49ec:	30 e0       	ldi	r19, 0x00	; 0
    49ee:	40 e2       	ldi	r20, 0x20	; 32
    49f0:	51 e4       	ldi	r21, 0x41	; 65
    49f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    49f6:	dc 01       	movw	r26, r24
    49f8:	cb 01       	movw	r24, r22
    49fa:	8e 01       	movw	r16, r28
    49fc:	07 5a       	subi	r16, 0xA7	; 167
    49fe:	1f 4f       	sbci	r17, 0xFF	; 255
    4a00:	bc 01       	movw	r22, r24
    4a02:	cd 01       	movw	r24, r26
    4a04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a08:	dc 01       	movw	r26, r24
    4a0a:	cb 01       	movw	r24, r22
    4a0c:	f8 01       	movw	r30, r16
    4a0e:	91 83       	std	Z+1, r25	; 0x01
    4a10:	80 83       	st	Z, r24
    4a12:	1f c0       	rjmp	.+62     	; 0x4a52 <main+0x1594>
    4a14:	fe 01       	movw	r30, r28
    4a16:	e9 5a       	subi	r30, 0xA9	; 169
    4a18:	ff 4f       	sbci	r31, 0xFF	; 255
    4a1a:	88 ec       	ldi	r24, 0xC8	; 200
    4a1c:	90 e0       	ldi	r25, 0x00	; 0
    4a1e:	91 83       	std	Z+1, r25	; 0x01
    4a20:	80 83       	st	Z, r24
    4a22:	fe 01       	movw	r30, r28
    4a24:	e9 5a       	subi	r30, 0xA9	; 169
    4a26:	ff 4f       	sbci	r31, 0xFF	; 255
    4a28:	80 81       	ld	r24, Z
    4a2a:	91 81       	ldd	r25, Z+1	; 0x01
    4a2c:	01 97       	sbiw	r24, 0x01	; 1
    4a2e:	f1 f7       	brne	.-4      	; 0x4a2c <main+0x156e>
    4a30:	fe 01       	movw	r30, r28
    4a32:	e9 5a       	subi	r30, 0xA9	; 169
    4a34:	ff 4f       	sbci	r31, 0xFF	; 255
    4a36:	91 83       	std	Z+1, r25	; 0x01
    4a38:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4a3a:	de 01       	movw	r26, r28
    4a3c:	a7 5a       	subi	r26, 0xA7	; 167
    4a3e:	bf 4f       	sbci	r27, 0xFF	; 255
    4a40:	fe 01       	movw	r30, r28
    4a42:	e7 5a       	subi	r30, 0xA7	; 167
    4a44:	ff 4f       	sbci	r31, 0xFF	; 255
    4a46:	80 81       	ld	r24, Z
    4a48:	91 81       	ldd	r25, Z+1	; 0x01
    4a4a:	01 97       	sbiw	r24, 0x01	; 1
    4a4c:	11 96       	adiw	r26, 0x01	; 1
    4a4e:	9c 93       	st	X, r25
    4a50:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4a52:	fe 01       	movw	r30, r28
    4a54:	e7 5a       	subi	r30, 0xA7	; 167
    4a56:	ff 4f       	sbci	r31, 0xFF	; 255
    4a58:	80 81       	ld	r24, Z
    4a5a:	91 81       	ldd	r25, Z+1	; 0x01
    4a5c:	00 97       	sbiw	r24, 0x00	; 0
    4a5e:	d1 f6       	brne	.-76     	; 0x4a14 <main+0x1556>
    4a60:	27 c0       	rjmp	.+78     	; 0x4ab0 <main+0x15f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4a62:	8e 01       	movw	r16, r28
    4a64:	07 5a       	subi	r16, 0xA7	; 167
    4a66:	1f 4f       	sbci	r17, 0xFF	; 255
    4a68:	fe 01       	movw	r30, r28
    4a6a:	e5 5a       	subi	r30, 0xA5	; 165
    4a6c:	ff 4f       	sbci	r31, 0xFF	; 255
    4a6e:	60 81       	ld	r22, Z
    4a70:	71 81       	ldd	r23, Z+1	; 0x01
    4a72:	82 81       	ldd	r24, Z+2	; 0x02
    4a74:	93 81       	ldd	r25, Z+3	; 0x03
    4a76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a7a:	dc 01       	movw	r26, r24
    4a7c:	cb 01       	movw	r24, r22
    4a7e:	f8 01       	movw	r30, r16
    4a80:	91 83       	std	Z+1, r25	; 0x01
    4a82:	80 83       	st	Z, r24
    4a84:	de 01       	movw	r26, r28
    4a86:	ab 5a       	subi	r26, 0xAB	; 171
    4a88:	bf 4f       	sbci	r27, 0xFF	; 255
    4a8a:	fe 01       	movw	r30, r28
    4a8c:	e7 5a       	subi	r30, 0xA7	; 167
    4a8e:	ff 4f       	sbci	r31, 0xFF	; 255
    4a90:	80 81       	ld	r24, Z
    4a92:	91 81       	ldd	r25, Z+1	; 0x01
    4a94:	8d 93       	st	X+, r24
    4a96:	9c 93       	st	X, r25
    4a98:	fe 01       	movw	r30, r28
    4a9a:	eb 5a       	subi	r30, 0xAB	; 171
    4a9c:	ff 4f       	sbci	r31, 0xFF	; 255
    4a9e:	80 81       	ld	r24, Z
    4aa0:	91 81       	ldd	r25, Z+1	; 0x01
    4aa2:	01 97       	sbiw	r24, 0x01	; 1
    4aa4:	f1 f7       	brne	.-4      	; 0x4aa2 <main+0x15e4>
    4aa6:	fe 01       	movw	r30, r28
    4aa8:	eb 5a       	subi	r30, 0xAB	; 171
    4aaa:	ff 4f       	sbci	r31, 0xFF	; 255
    4aac:	91 83       	std	Z+1, r25	; 0x01
    4aae:	80 83       	st	Z, r24
						_delay_ms(1000);
						}
						CLCD_vClearScreen();
    4ab0:	0e 94 2e 19 	call	0x325c	; 0x325c <CLCD_vClearScreen>
						CLCD_vSendString("Select function:");
    4ab4:	8f ef       	ldi	r24, 0xFF	; 255
    4ab6:	90 e0       	ldi	r25, 0x00	; 0
    4ab8:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <CLCD_vSendString>
    4abc:	fe 01       	movw	r30, r28
    4abe:	ef 5a       	subi	r30, 0xAF	; 175
    4ac0:	ff 4f       	sbci	r31, 0xFF	; 255
    4ac2:	80 e0       	ldi	r24, 0x00	; 0
    4ac4:	90 e0       	ldi	r25, 0x00	; 0
    4ac6:	aa e7       	ldi	r26, 0x7A	; 122
    4ac8:	b4 e4       	ldi	r27, 0x44	; 68
    4aca:	80 83       	st	Z, r24
    4acc:	91 83       	std	Z+1, r25	; 0x01
    4ace:	a2 83       	std	Z+2, r26	; 0x02
    4ad0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4ad2:	8e 01       	movw	r16, r28
    4ad4:	03 5b       	subi	r16, 0xB3	; 179
    4ad6:	1f 4f       	sbci	r17, 0xFF	; 255
    4ad8:	fe 01       	movw	r30, r28
    4ada:	ef 5a       	subi	r30, 0xAF	; 175
    4adc:	ff 4f       	sbci	r31, 0xFF	; 255
    4ade:	60 81       	ld	r22, Z
    4ae0:	71 81       	ldd	r23, Z+1	; 0x01
    4ae2:	82 81       	ldd	r24, Z+2	; 0x02
    4ae4:	93 81       	ldd	r25, Z+3	; 0x03
    4ae6:	20 e0       	ldi	r18, 0x00	; 0
    4ae8:	30 e0       	ldi	r19, 0x00	; 0
    4aea:	4a ef       	ldi	r20, 0xFA	; 250
    4aec:	54 e4       	ldi	r21, 0x44	; 68
    4aee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4af2:	dc 01       	movw	r26, r24
    4af4:	cb 01       	movw	r24, r22
    4af6:	f8 01       	movw	r30, r16
    4af8:	80 83       	st	Z, r24
    4afa:	91 83       	std	Z+1, r25	; 0x01
    4afc:	a2 83       	std	Z+2, r26	; 0x02
    4afe:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4b00:	fe 01       	movw	r30, r28
    4b02:	e3 5b       	subi	r30, 0xB3	; 179
    4b04:	ff 4f       	sbci	r31, 0xFF	; 255
    4b06:	60 81       	ld	r22, Z
    4b08:	71 81       	ldd	r23, Z+1	; 0x01
    4b0a:	82 81       	ldd	r24, Z+2	; 0x02
    4b0c:	93 81       	ldd	r25, Z+3	; 0x03
    4b0e:	20 e0       	ldi	r18, 0x00	; 0
    4b10:	30 e0       	ldi	r19, 0x00	; 0
    4b12:	40 e8       	ldi	r20, 0x80	; 128
    4b14:	5f e3       	ldi	r21, 0x3F	; 63
    4b16:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4b1a:	88 23       	and	r24, r24
    4b1c:	44 f4       	brge	.+16     	; 0x4b2e <main+0x1670>
		__ticks = 1;
    4b1e:	fe 01       	movw	r30, r28
    4b20:	e5 5b       	subi	r30, 0xB5	; 181
    4b22:	ff 4f       	sbci	r31, 0xFF	; 255
    4b24:	81 e0       	ldi	r24, 0x01	; 1
    4b26:	90 e0       	ldi	r25, 0x00	; 0
    4b28:	91 83       	std	Z+1, r25	; 0x01
    4b2a:	80 83       	st	Z, r24
    4b2c:	64 c0       	rjmp	.+200    	; 0x4bf6 <main+0x1738>
	else if (__tmp > 65535)
    4b2e:	fe 01       	movw	r30, r28
    4b30:	e3 5b       	subi	r30, 0xB3	; 179
    4b32:	ff 4f       	sbci	r31, 0xFF	; 255
    4b34:	60 81       	ld	r22, Z
    4b36:	71 81       	ldd	r23, Z+1	; 0x01
    4b38:	82 81       	ldd	r24, Z+2	; 0x02
    4b3a:	93 81       	ldd	r25, Z+3	; 0x03
    4b3c:	20 e0       	ldi	r18, 0x00	; 0
    4b3e:	3f ef       	ldi	r19, 0xFF	; 255
    4b40:	4f e7       	ldi	r20, 0x7F	; 127
    4b42:	57 e4       	ldi	r21, 0x47	; 71
    4b44:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4b48:	18 16       	cp	r1, r24
    4b4a:	0c f0       	brlt	.+2      	; 0x4b4e <main+0x1690>
    4b4c:	43 c0       	rjmp	.+134    	; 0x4bd4 <main+0x1716>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4b4e:	fe 01       	movw	r30, r28
    4b50:	ef 5a       	subi	r30, 0xAF	; 175
    4b52:	ff 4f       	sbci	r31, 0xFF	; 255
    4b54:	60 81       	ld	r22, Z
    4b56:	71 81       	ldd	r23, Z+1	; 0x01
    4b58:	82 81       	ldd	r24, Z+2	; 0x02
    4b5a:	93 81       	ldd	r25, Z+3	; 0x03
    4b5c:	20 e0       	ldi	r18, 0x00	; 0
    4b5e:	30 e0       	ldi	r19, 0x00	; 0
    4b60:	40 e2       	ldi	r20, 0x20	; 32
    4b62:	51 e4       	ldi	r21, 0x41	; 65
    4b64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b68:	dc 01       	movw	r26, r24
    4b6a:	cb 01       	movw	r24, r22
    4b6c:	8e 01       	movw	r16, r28
    4b6e:	05 5b       	subi	r16, 0xB5	; 181
    4b70:	1f 4f       	sbci	r17, 0xFF	; 255
    4b72:	bc 01       	movw	r22, r24
    4b74:	cd 01       	movw	r24, r26
    4b76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b7a:	dc 01       	movw	r26, r24
    4b7c:	cb 01       	movw	r24, r22
    4b7e:	f8 01       	movw	r30, r16
    4b80:	91 83       	std	Z+1, r25	; 0x01
    4b82:	80 83       	st	Z, r24
    4b84:	1f c0       	rjmp	.+62     	; 0x4bc4 <main+0x1706>
    4b86:	fe 01       	movw	r30, r28
    4b88:	e7 5b       	subi	r30, 0xB7	; 183
    4b8a:	ff 4f       	sbci	r31, 0xFF	; 255
    4b8c:	88 ec       	ldi	r24, 0xC8	; 200
    4b8e:	90 e0       	ldi	r25, 0x00	; 0
    4b90:	91 83       	std	Z+1, r25	; 0x01
    4b92:	80 83       	st	Z, r24
    4b94:	fe 01       	movw	r30, r28
    4b96:	e7 5b       	subi	r30, 0xB7	; 183
    4b98:	ff 4f       	sbci	r31, 0xFF	; 255
    4b9a:	80 81       	ld	r24, Z
    4b9c:	91 81       	ldd	r25, Z+1	; 0x01
    4b9e:	01 97       	sbiw	r24, 0x01	; 1
    4ba0:	f1 f7       	brne	.-4      	; 0x4b9e <main+0x16e0>
    4ba2:	fe 01       	movw	r30, r28
    4ba4:	e7 5b       	subi	r30, 0xB7	; 183
    4ba6:	ff 4f       	sbci	r31, 0xFF	; 255
    4ba8:	91 83       	std	Z+1, r25	; 0x01
    4baa:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4bac:	de 01       	movw	r26, r28
    4bae:	a5 5b       	subi	r26, 0xB5	; 181
    4bb0:	bf 4f       	sbci	r27, 0xFF	; 255
    4bb2:	fe 01       	movw	r30, r28
    4bb4:	e5 5b       	subi	r30, 0xB5	; 181
    4bb6:	ff 4f       	sbci	r31, 0xFF	; 255
    4bb8:	80 81       	ld	r24, Z
    4bba:	91 81       	ldd	r25, Z+1	; 0x01
    4bbc:	01 97       	sbiw	r24, 0x01	; 1
    4bbe:	11 96       	adiw	r26, 0x01	; 1
    4bc0:	9c 93       	st	X, r25
    4bc2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4bc4:	fe 01       	movw	r30, r28
    4bc6:	e5 5b       	subi	r30, 0xB5	; 181
    4bc8:	ff 4f       	sbci	r31, 0xFF	; 255
    4bca:	80 81       	ld	r24, Z
    4bcc:	91 81       	ldd	r25, Z+1	; 0x01
    4bce:	00 97       	sbiw	r24, 0x00	; 0
    4bd0:	d1 f6       	brne	.-76     	; 0x4b86 <main+0x16c8>
    4bd2:	27 c0       	rjmp	.+78     	; 0x4c22 <main+0x1764>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4bd4:	8e 01       	movw	r16, r28
    4bd6:	05 5b       	subi	r16, 0xB5	; 181
    4bd8:	1f 4f       	sbci	r17, 0xFF	; 255
    4bda:	fe 01       	movw	r30, r28
    4bdc:	e3 5b       	subi	r30, 0xB3	; 179
    4bde:	ff 4f       	sbci	r31, 0xFF	; 255
    4be0:	60 81       	ld	r22, Z
    4be2:	71 81       	ldd	r23, Z+1	; 0x01
    4be4:	82 81       	ldd	r24, Z+2	; 0x02
    4be6:	93 81       	ldd	r25, Z+3	; 0x03
    4be8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4bec:	dc 01       	movw	r26, r24
    4bee:	cb 01       	movw	r24, r22
    4bf0:	f8 01       	movw	r30, r16
    4bf2:	91 83       	std	Z+1, r25	; 0x01
    4bf4:	80 83       	st	Z, r24
    4bf6:	de 01       	movw	r26, r28
    4bf8:	a9 5b       	subi	r26, 0xB9	; 185
    4bfa:	bf 4f       	sbci	r27, 0xFF	; 255
    4bfc:	fe 01       	movw	r30, r28
    4bfe:	e5 5b       	subi	r30, 0xB5	; 181
    4c00:	ff 4f       	sbci	r31, 0xFF	; 255
    4c02:	80 81       	ld	r24, Z
    4c04:	91 81       	ldd	r25, Z+1	; 0x01
    4c06:	8d 93       	st	X+, r24
    4c08:	9c 93       	st	X, r25
    4c0a:	fe 01       	movw	r30, r28
    4c0c:	e9 5b       	subi	r30, 0xB9	; 185
    4c0e:	ff 4f       	sbci	r31, 0xFF	; 255
    4c10:	80 81       	ld	r24, Z
    4c12:	91 81       	ldd	r25, Z+1	; 0x01
    4c14:	01 97       	sbiw	r24, 0x01	; 1
    4c16:	f1 f7       	brne	.-4      	; 0x4c14 <main+0x1756>
    4c18:	fe 01       	movw	r30, r28
    4c1a:	e9 5b       	subi	r30, 0xB9	; 185
    4c1c:	ff 4f       	sbci	r31, 0xFF	; 255
    4c1e:	91 83       	std	Z+1, r25	; 0x01
    4c20:	80 83       	st	Z, r24
						_delay_ms(1000);
						CLCD_vClearScreen();
    4c22:	0e 94 2e 19 	call	0x325c	; 0x325c <CLCD_vClearScreen>
						u8 cursor=0;
    4c26:	fe 01       	movw	r30, r28
    4c28:	eb 51       	subi	r30, 0x1B	; 27
    4c2a:	ff 4f       	sbci	r31, 0xFF	; 255
    4c2c:	10 82       	st	Z, r1
						u8 mode=0xff;
    4c2e:	fe 01       	movw	r30, r28
    4c30:	ec 51       	subi	r30, 0x1C	; 28
    4c32:	ff 4f       	sbci	r31, 0xFF	; 255
    4c34:	8f ef       	ldi	r24, 0xFF	; 255
    4c36:	80 83       	st	Z, r24
    4c38:	f1 c0       	rjmp	.+482    	; 0x4e1c <main+0x195e>
						u8 op;
						while(mode==0xff)
						{
						    CLCD_vGoToXY(0, 0);
    4c3a:	80 e0       	ldi	r24, 0x00	; 0
    4c3c:	60 e0       	ldi	r22, 0x00	; 0
    4c3e:	0e 94 d5 17 	call	0x2faa	; 0x2faa <CLCD_vGoToXY>
						    CLCD_vSendString(arr[cursor]);
    4c42:	ae 01       	movw	r20, r28
    4c44:	4b 50       	subi	r20, 0x0B	; 11
    4c46:	5f 4f       	sbci	r21, 0xFF	; 255
    4c48:	fe 01       	movw	r30, r28
    4c4a:	eb 51       	subi	r30, 0x1B	; 27
    4c4c:	ff 4f       	sbci	r31, 0xFF	; 255
    4c4e:	80 81       	ld	r24, Z
    4c50:	28 2f       	mov	r18, r24
    4c52:	30 e0       	ldi	r19, 0x00	; 0
    4c54:	c9 01       	movw	r24, r18
    4c56:	88 0f       	add	r24, r24
    4c58:	99 1f       	adc	r25, r25
    4c5a:	82 0f       	add	r24, r18
    4c5c:	93 1f       	adc	r25, r19
    4c5e:	88 0f       	add	r24, r24
    4c60:	99 1f       	adc	r25, r25
    4c62:	88 0f       	add	r24, r24
    4c64:	99 1f       	adc	r25, r25
    4c66:	82 0f       	add	r24, r18
    4c68:	93 1f       	adc	r25, r19
    4c6a:	84 0f       	add	r24, r20
    4c6c:	95 1f       	adc	r25, r21
    4c6e:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <CLCD_vSendString>
						    CLCD_vGoToXY(0, 1);
    4c72:	80 e0       	ldi	r24, 0x00	; 0
    4c74:	61 e0       	ldi	r22, 0x01	; 1
    4c76:	0e 94 d5 17 	call	0x2faa	; 0x2faa <CLCD_vGoToXY>
						    CLCD_vSendString(arr[cursor + 1]);
    4c7a:	fe 01       	movw	r30, r28
    4c7c:	eb 51       	subi	r30, 0x1B	; 27
    4c7e:	ff 4f       	sbci	r31, 0xFF	; 255
    4c80:	80 81       	ld	r24, Z
    4c82:	88 2f       	mov	r24, r24
    4c84:	90 e0       	ldi	r25, 0x00	; 0
    4c86:	9c 01       	movw	r18, r24
    4c88:	2f 5f       	subi	r18, 0xFF	; 255
    4c8a:	3f 4f       	sbci	r19, 0xFF	; 255
    4c8c:	c9 01       	movw	r24, r18
    4c8e:	88 0f       	add	r24, r24
    4c90:	99 1f       	adc	r25, r25
    4c92:	82 0f       	add	r24, r18
    4c94:	93 1f       	adc	r25, r19
    4c96:	88 0f       	add	r24, r24
    4c98:	99 1f       	adc	r25, r25
    4c9a:	88 0f       	add	r24, r24
    4c9c:	99 1f       	adc	r25, r25
    4c9e:	28 0f       	add	r18, r24
    4ca0:	39 1f       	adc	r19, r25
    4ca2:	ce 01       	movw	r24, r28
    4ca4:	8b 50       	subi	r24, 0x0B	; 11
    4ca6:	9f 4f       	sbci	r25, 0xFF	; 255
    4ca8:	82 0f       	add	r24, r18
    4caa:	93 1f       	adc	r25, r19
    4cac:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <CLCD_vSendString>
							op=KPD_u8GetPressedKey();
    4cb0:	0e 94 c6 0b 	call	0x178c	; 0x178c <KPD_u8GetPressedKey>
    4cb4:	fe 01       	movw	r30, r28
    4cb6:	ed 51       	subi	r30, 0x1D	; 29
    4cb8:	ff 4f       	sbci	r31, 0xFF	; 255
    4cba:	80 83       	st	Z, r24
							if(op == '+')
    4cbc:	fe 01       	movw	r30, r28
    4cbe:	ed 51       	subi	r30, 0x1D	; 29
    4cc0:	ff 4f       	sbci	r31, 0xFF	; 255
    4cc2:	80 81       	ld	r24, Z
    4cc4:	8b 32       	cpi	r24, 0x2B	; 43
    4cc6:	09 f0       	breq	.+2      	; 0x4cca <main+0x180c>
    4cc8:	4d c0       	rjmp	.+154    	; 0x4d64 <main+0x18a6>
							{
								CLCD_vClearScreen();
    4cca:	0e 94 2e 19 	call	0x325c	; 0x325c <CLCD_vClearScreen>
								if(cursor<4)
    4cce:	fe 01       	movw	r30, r28
    4cd0:	eb 51       	subi	r30, 0x1B	; 27
    4cd2:	ff 4f       	sbci	r31, 0xFF	; 255
    4cd4:	80 81       	ld	r24, Z
    4cd6:	84 30       	cpi	r24, 0x04	; 4
    4cd8:	48 f4       	brcc	.+18     	; 0x4cec <main+0x182e>
									cursor++;
    4cda:	de 01       	movw	r26, r28
    4cdc:	ab 51       	subi	r26, 0x1B	; 27
    4cde:	bf 4f       	sbci	r27, 0xFF	; 255
    4ce0:	fe 01       	movw	r30, r28
    4ce2:	eb 51       	subi	r30, 0x1B	; 27
    4ce4:	ff 4f       	sbci	r31, 0xFF	; 255
    4ce6:	80 81       	ld	r24, Z
    4ce8:	8f 5f       	subi	r24, 0xFF	; 255
    4cea:	8c 93       	st	X, r24
								CLCD_vGoToXY(0,0);
    4cec:	80 e0       	ldi	r24, 0x00	; 0
    4cee:	60 e0       	ldi	r22, 0x00	; 0
    4cf0:	0e 94 d5 17 	call	0x2faa	; 0x2faa <CLCD_vGoToXY>
								CLCD_vSendString(arr[cursor]);
    4cf4:	ae 01       	movw	r20, r28
    4cf6:	4b 50       	subi	r20, 0x0B	; 11
    4cf8:	5f 4f       	sbci	r21, 0xFF	; 255
    4cfa:	fe 01       	movw	r30, r28
    4cfc:	eb 51       	subi	r30, 0x1B	; 27
    4cfe:	ff 4f       	sbci	r31, 0xFF	; 255
    4d00:	80 81       	ld	r24, Z
    4d02:	28 2f       	mov	r18, r24
    4d04:	30 e0       	ldi	r19, 0x00	; 0
    4d06:	c9 01       	movw	r24, r18
    4d08:	88 0f       	add	r24, r24
    4d0a:	99 1f       	adc	r25, r25
    4d0c:	82 0f       	add	r24, r18
    4d0e:	93 1f       	adc	r25, r19
    4d10:	88 0f       	add	r24, r24
    4d12:	99 1f       	adc	r25, r25
    4d14:	88 0f       	add	r24, r24
    4d16:	99 1f       	adc	r25, r25
    4d18:	82 0f       	add	r24, r18
    4d1a:	93 1f       	adc	r25, r19
    4d1c:	84 0f       	add	r24, r20
    4d1e:	95 1f       	adc	r25, r21
    4d20:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <CLCD_vSendString>
								CLCD_vGoToXY(0,1);
    4d24:	80 e0       	ldi	r24, 0x00	; 0
    4d26:	61 e0       	ldi	r22, 0x01	; 1
    4d28:	0e 94 d5 17 	call	0x2faa	; 0x2faa <CLCD_vGoToXY>
								CLCD_vSendString(arr[cursor+1]);
    4d2c:	fe 01       	movw	r30, r28
    4d2e:	eb 51       	subi	r30, 0x1B	; 27
    4d30:	ff 4f       	sbci	r31, 0xFF	; 255
    4d32:	80 81       	ld	r24, Z
    4d34:	88 2f       	mov	r24, r24
    4d36:	90 e0       	ldi	r25, 0x00	; 0
    4d38:	9c 01       	movw	r18, r24
    4d3a:	2f 5f       	subi	r18, 0xFF	; 255
    4d3c:	3f 4f       	sbci	r19, 0xFF	; 255
    4d3e:	c9 01       	movw	r24, r18
    4d40:	88 0f       	add	r24, r24
    4d42:	99 1f       	adc	r25, r25
    4d44:	82 0f       	add	r24, r18
    4d46:	93 1f       	adc	r25, r19
    4d48:	88 0f       	add	r24, r24
    4d4a:	99 1f       	adc	r25, r25
    4d4c:	88 0f       	add	r24, r24
    4d4e:	99 1f       	adc	r25, r25
    4d50:	28 0f       	add	r18, r24
    4d52:	39 1f       	adc	r19, r25
    4d54:	ce 01       	movw	r24, r28
    4d56:	8b 50       	subi	r24, 0x0B	; 11
    4d58:	9f 4f       	sbci	r25, 0xFF	; 255
    4d5a:	82 0f       	add	r24, r18
    4d5c:	93 1f       	adc	r25, r19
    4d5e:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <CLCD_vSendString>
    4d62:	5c c0       	rjmp	.+184    	; 0x4e1c <main+0x195e>
							}

							else if(op=='-')
    4d64:	fe 01       	movw	r30, r28
    4d66:	ed 51       	subi	r30, 0x1D	; 29
    4d68:	ff 4f       	sbci	r31, 0xFF	; 255
    4d6a:	80 81       	ld	r24, Z
    4d6c:	8d 32       	cpi	r24, 0x2D	; 45
    4d6e:	09 f0       	breq	.+2      	; 0x4d72 <main+0x18b4>
    4d70:	4d c0       	rjmp	.+154    	; 0x4e0c <main+0x194e>
							{
		     					CLCD_vClearScreen();
    4d72:	0e 94 2e 19 	call	0x325c	; 0x325c <CLCD_vClearScreen>
		     					if (cursor > 0)
    4d76:	fe 01       	movw	r30, r28
    4d78:	eb 51       	subi	r30, 0x1B	; 27
    4d7a:	ff 4f       	sbci	r31, 0xFF	; 255
    4d7c:	80 81       	ld	r24, Z
    4d7e:	88 23       	and	r24, r24
    4d80:	49 f0       	breq	.+18     	; 0x4d94 <main+0x18d6>
		     						cursor--;
    4d82:	de 01       	movw	r26, r28
    4d84:	ab 51       	subi	r26, 0x1B	; 27
    4d86:	bf 4f       	sbci	r27, 0xFF	; 255
    4d88:	fe 01       	movw	r30, r28
    4d8a:	eb 51       	subi	r30, 0x1B	; 27
    4d8c:	ff 4f       	sbci	r31, 0xFF	; 255
    4d8e:	80 81       	ld	r24, Z
    4d90:	81 50       	subi	r24, 0x01	; 1
    4d92:	8c 93       	st	X, r24
		     					CLCD_vGoToXY(0, 0);
    4d94:	80 e0       	ldi	r24, 0x00	; 0
    4d96:	60 e0       	ldi	r22, 0x00	; 0
    4d98:	0e 94 d5 17 	call	0x2faa	; 0x2faa <CLCD_vGoToXY>
		     					CLCD_vSendString(arr[cursor]);
    4d9c:	ae 01       	movw	r20, r28
    4d9e:	4b 50       	subi	r20, 0x0B	; 11
    4da0:	5f 4f       	sbci	r21, 0xFF	; 255
    4da2:	fe 01       	movw	r30, r28
    4da4:	eb 51       	subi	r30, 0x1B	; 27
    4da6:	ff 4f       	sbci	r31, 0xFF	; 255
    4da8:	80 81       	ld	r24, Z
    4daa:	28 2f       	mov	r18, r24
    4dac:	30 e0       	ldi	r19, 0x00	; 0
    4dae:	c9 01       	movw	r24, r18
    4db0:	88 0f       	add	r24, r24
    4db2:	99 1f       	adc	r25, r25
    4db4:	82 0f       	add	r24, r18
    4db6:	93 1f       	adc	r25, r19
    4db8:	88 0f       	add	r24, r24
    4dba:	99 1f       	adc	r25, r25
    4dbc:	88 0f       	add	r24, r24
    4dbe:	99 1f       	adc	r25, r25
    4dc0:	82 0f       	add	r24, r18
    4dc2:	93 1f       	adc	r25, r19
    4dc4:	84 0f       	add	r24, r20
    4dc6:	95 1f       	adc	r25, r21
    4dc8:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <CLCD_vSendString>
		     					CLCD_vGoToXY(0, 1);
    4dcc:	80 e0       	ldi	r24, 0x00	; 0
    4dce:	61 e0       	ldi	r22, 0x01	; 1
    4dd0:	0e 94 d5 17 	call	0x2faa	; 0x2faa <CLCD_vGoToXY>
		     					CLCD_vSendString(arr[cursor + 1]);
    4dd4:	fe 01       	movw	r30, r28
    4dd6:	eb 51       	subi	r30, 0x1B	; 27
    4dd8:	ff 4f       	sbci	r31, 0xFF	; 255
    4dda:	80 81       	ld	r24, Z
    4ddc:	88 2f       	mov	r24, r24
    4dde:	90 e0       	ldi	r25, 0x00	; 0
    4de0:	9c 01       	movw	r18, r24
    4de2:	2f 5f       	subi	r18, 0xFF	; 255
    4de4:	3f 4f       	sbci	r19, 0xFF	; 255
    4de6:	c9 01       	movw	r24, r18
    4de8:	88 0f       	add	r24, r24
    4dea:	99 1f       	adc	r25, r25
    4dec:	82 0f       	add	r24, r18
    4dee:	93 1f       	adc	r25, r19
    4df0:	88 0f       	add	r24, r24
    4df2:	99 1f       	adc	r25, r25
    4df4:	88 0f       	add	r24, r24
    4df6:	99 1f       	adc	r25, r25
    4df8:	28 0f       	add	r18, r24
    4dfa:	39 1f       	adc	r19, r25
    4dfc:	ce 01       	movw	r24, r28
    4dfe:	8b 50       	subi	r24, 0x0B	; 11
    4e00:	9f 4f       	sbci	r25, 0xFF	; 255
    4e02:	82 0f       	add	r24, r18
    4e04:	93 1f       	adc	r25, r19
    4e06:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <CLCD_vSendString>
    4e0a:	08 c0       	rjmp	.+16     	; 0x4e1c <main+0x195e>

							}
							else
							{
									mode = op;
    4e0c:	fe 01       	movw	r30, r28
    4e0e:	ec 51       	subi	r30, 0x1C	; 28
    4e10:	ff 4f       	sbci	r31, 0xFF	; 255
    4e12:	de 01       	movw	r26, r28
    4e14:	ad 51       	subi	r26, 0x1D	; 29
    4e16:	bf 4f       	sbci	r27, 0xFF	; 255
    4e18:	8c 91       	ld	r24, X
    4e1a:	80 83       	st	Z, r24
						_delay_ms(1000);
						CLCD_vClearScreen();
						u8 cursor=0;
						u8 mode=0xff;
						u8 op;
						while(mode==0xff)
    4e1c:	fe 01       	movw	r30, r28
    4e1e:	ec 51       	subi	r30, 0x1C	; 28
    4e20:	ff 4f       	sbci	r31, 0xFF	; 255
    4e22:	80 81       	ld	r24, Z
    4e24:	8f 3f       	cpi	r24, 0xFF	; 255
    4e26:	09 f4       	brne	.+2      	; 0x4e2a <main+0x196c>
    4e28:	08 cf       	rjmp	.-496    	; 0x4c3a <main+0x177c>
									mode = op;
							}

						 }

						   switch(mode)
    4e2a:	fe 01       	movw	r30, r28
    4e2c:	ec 51       	subi	r30, 0x1C	; 28
    4e2e:	ff 4f       	sbci	r31, 0xFF	; 255
    4e30:	80 81       	ld	r24, Z
    4e32:	28 2f       	mov	r18, r24
    4e34:	30 e0       	ldi	r19, 0x00	; 0
    4e36:	cd 5b       	subi	r28, 0xBD	; 189
    4e38:	de 4f       	sbci	r29, 0xFE	; 254
    4e3a:	39 83       	std	Y+1, r19	; 0x01
    4e3c:	28 83       	st	Y, r18
    4e3e:	c3 54       	subi	r28, 0x43	; 67
    4e40:	d1 40       	sbci	r29, 0x01	; 1
    4e42:	cd 5b       	subi	r28, 0xBD	; 189
    4e44:	de 4f       	sbci	r29, 0xFE	; 254
    4e46:	88 81       	ld	r24, Y
    4e48:	99 81       	ldd	r25, Y+1	; 0x01
    4e4a:	c3 54       	subi	r28, 0x43	; 67
    4e4c:	d1 40       	sbci	r29, 0x01	; 1
    4e4e:	83 30       	cpi	r24, 0x03	; 3
    4e50:	91 05       	cpc	r25, r1
    4e52:	09 f4       	brne	.+2      	; 0x4e56 <main+0x1998>
    4e54:	7d c1       	rjmp	.+762    	; 0x5150 <main+0x1c92>
    4e56:	cd 5b       	subi	r28, 0xBD	; 189
    4e58:	de 4f       	sbci	r29, 0xFE	; 254
    4e5a:	a8 81       	ld	r26, Y
    4e5c:	b9 81       	ldd	r27, Y+1	; 0x01
    4e5e:	c3 54       	subi	r28, 0x43	; 67
    4e60:	d1 40       	sbci	r29, 0x01	; 1
    4e62:	a4 30       	cpi	r26, 0x04	; 4
    4e64:	b1 05       	cpc	r27, r1
    4e66:	a4 f4       	brge	.+40     	; 0x4e90 <main+0x19d2>
    4e68:	cd 5b       	subi	r28, 0xBD	; 189
    4e6a:	de 4f       	sbci	r29, 0xFE	; 254
    4e6c:	e8 81       	ld	r30, Y
    4e6e:	f9 81       	ldd	r31, Y+1	; 0x01
    4e70:	c3 54       	subi	r28, 0x43	; 67
    4e72:	d1 40       	sbci	r29, 0x01	; 1
    4e74:	e1 30       	cpi	r30, 0x01	; 1
    4e76:	f1 05       	cpc	r31, r1
    4e78:	01 f1       	breq	.+64     	; 0x4eba <main+0x19fc>
    4e7a:	cd 5b       	subi	r28, 0xBD	; 189
    4e7c:	de 4f       	sbci	r29, 0xFE	; 254
    4e7e:	28 81       	ld	r18, Y
    4e80:	39 81       	ldd	r19, Y+1	; 0x01
    4e82:	c3 54       	subi	r28, 0x43	; 67
    4e84:	d1 40       	sbci	r29, 0x01	; 1
    4e86:	22 30       	cpi	r18, 0x02	; 2
    4e88:	31 05       	cpc	r19, r1
    4e8a:	09 f4       	brne	.+2      	; 0x4e8e <main+0x19d0>
    4e8c:	c4 c0       	rjmp	.+392    	; 0x5016 <main+0x1b58>
    4e8e:	44 c3       	rjmp	.+1672   	; 0x5518 <main+0x205a>
    4e90:	cd 5b       	subi	r28, 0xBD	; 189
    4e92:	de 4f       	sbci	r29, 0xFE	; 254
    4e94:	88 81       	ld	r24, Y
    4e96:	99 81       	ldd	r25, Y+1	; 0x01
    4e98:	c3 54       	subi	r28, 0x43	; 67
    4e9a:	d1 40       	sbci	r29, 0x01	; 1
    4e9c:	84 30       	cpi	r24, 0x04	; 4
    4e9e:	91 05       	cpc	r25, r1
    4ea0:	09 f4       	brne	.+2      	; 0x4ea4 <main+0x19e6>
    4ea2:	11 c2       	rjmp	.+1058   	; 0x52c6 <main+0x1e08>
    4ea4:	cd 5b       	subi	r28, 0xBD	; 189
    4ea6:	de 4f       	sbci	r29, 0xFE	; 254
    4ea8:	a8 81       	ld	r26, Y
    4eaa:	b9 81       	ldd	r27, Y+1	; 0x01
    4eac:	c3 54       	subi	r28, 0x43	; 67
    4eae:	d1 40       	sbci	r29, 0x01	; 1
    4eb0:	a5 30       	cpi	r26, 0x05	; 5
    4eb2:	b1 05       	cpc	r27, r1
    4eb4:	09 f4       	brne	.+2      	; 0x4eb8 <main+0x19fa>
    4eb6:	a7 c2       	rjmp	.+1358   	; 0x5406 <main+0x1f48>
    4eb8:	2f c3       	rjmp	.+1630   	; 0x5518 <main+0x205a>
						   {
						   	case 1:
								CLCD_vClearScreen();
    4eba:	0e 94 2e 19 	call	0x325c	; 0x325c <CLCD_vClearScreen>
								if(door==0)
    4ebe:	fe 01       	movw	r30, r28
    4ec0:	ee 50       	subi	r30, 0x0E	; 14
    4ec2:	ff 4f       	sbci	r31, 0xFF	; 255
    4ec4:	80 81       	ld	r24, Z
    4ec6:	88 23       	and	r24, r24
    4ec8:	71 f4       	brne	.+28     	; 0x4ee6 <main+0x1a28>
								{
									CLCD_vSendString("door opening");
    4eca:	80 e1       	ldi	r24, 0x10	; 16
    4ecc:	91 e0       	ldi	r25, 0x01	; 1
    4ece:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <CLCD_vSendString>
									servo_rotate(180);
    4ed2:	84 eb       	ldi	r24, 0xB4	; 180
    4ed4:	90 e0       	ldi	r25, 0x00	; 0
    4ed6:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <servo_rotate>
									door=1;
    4eda:	fe 01       	movw	r30, r28
    4edc:	ee 50       	subi	r30, 0x0E	; 14
    4ede:	ff 4f       	sbci	r31, 0xFF	; 255
    4ee0:	81 e0       	ldi	r24, 0x01	; 1
    4ee2:	80 83       	st	Z, r24
    4ee4:	12 c0       	rjmp	.+36     	; 0x4f0a <main+0x1a4c>
								}
								else if(door==1)
    4ee6:	fe 01       	movw	r30, r28
    4ee8:	ee 50       	subi	r30, 0x0E	; 14
    4eea:	ff 4f       	sbci	r31, 0xFF	; 255
    4eec:	80 81       	ld	r24, Z
    4eee:	81 30       	cpi	r24, 0x01	; 1
    4ef0:	61 f4       	brne	.+24     	; 0x4f0a <main+0x1a4c>
								{
									CLCD_vSendString("door closing");
    4ef2:	8d e1       	ldi	r24, 0x1D	; 29
    4ef4:	91 e0       	ldi	r25, 0x01	; 1
    4ef6:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <CLCD_vSendString>
									servo_rotate(0);
    4efa:	80 e0       	ldi	r24, 0x00	; 0
    4efc:	90 e0       	ldi	r25, 0x00	; 0
    4efe:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <servo_rotate>
									door=0;
    4f02:	fe 01       	movw	r30, r28
    4f04:	ee 50       	subi	r30, 0x0E	; 14
    4f06:	ff 4f       	sbci	r31, 0xFF	; 255
    4f08:	10 82       	st	Z, r1
    4f0a:	fe 01       	movw	r30, r28
    4f0c:	ed 5b       	subi	r30, 0xBD	; 189
    4f0e:	ff 4f       	sbci	r31, 0xFF	; 255
    4f10:	80 e0       	ldi	r24, 0x00	; 0
    4f12:	90 e0       	ldi	r25, 0x00	; 0
    4f14:	aa ef       	ldi	r26, 0xFA	; 250
    4f16:	b4 e4       	ldi	r27, 0x44	; 68
    4f18:	80 83       	st	Z, r24
    4f1a:	91 83       	std	Z+1, r25	; 0x01
    4f1c:	a2 83       	std	Z+2, r26	; 0x02
    4f1e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4f20:	8e 01       	movw	r16, r28
    4f22:	01 5c       	subi	r16, 0xC1	; 193
    4f24:	1f 4f       	sbci	r17, 0xFF	; 255
    4f26:	fe 01       	movw	r30, r28
    4f28:	ed 5b       	subi	r30, 0xBD	; 189
    4f2a:	ff 4f       	sbci	r31, 0xFF	; 255
    4f2c:	60 81       	ld	r22, Z
    4f2e:	71 81       	ldd	r23, Z+1	; 0x01
    4f30:	82 81       	ldd	r24, Z+2	; 0x02
    4f32:	93 81       	ldd	r25, Z+3	; 0x03
    4f34:	20 e0       	ldi	r18, 0x00	; 0
    4f36:	30 e0       	ldi	r19, 0x00	; 0
    4f38:	4a ef       	ldi	r20, 0xFA	; 250
    4f3a:	54 e4       	ldi	r21, 0x44	; 68
    4f3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4f40:	dc 01       	movw	r26, r24
    4f42:	cb 01       	movw	r24, r22
    4f44:	f8 01       	movw	r30, r16
    4f46:	80 83       	st	Z, r24
    4f48:	91 83       	std	Z+1, r25	; 0x01
    4f4a:	a2 83       	std	Z+2, r26	; 0x02
    4f4c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4f4e:	fe 01       	movw	r30, r28
    4f50:	ff 96       	adiw	r30, 0x3f	; 63
    4f52:	60 81       	ld	r22, Z
    4f54:	71 81       	ldd	r23, Z+1	; 0x01
    4f56:	82 81       	ldd	r24, Z+2	; 0x02
    4f58:	93 81       	ldd	r25, Z+3	; 0x03
    4f5a:	20 e0       	ldi	r18, 0x00	; 0
    4f5c:	30 e0       	ldi	r19, 0x00	; 0
    4f5e:	40 e8       	ldi	r20, 0x80	; 128
    4f60:	5f e3       	ldi	r21, 0x3F	; 63
    4f62:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4f66:	88 23       	and	r24, r24
    4f68:	2c f4       	brge	.+10     	; 0x4f74 <main+0x1ab6>
		__ticks = 1;
    4f6a:	81 e0       	ldi	r24, 0x01	; 1
    4f6c:	90 e0       	ldi	r25, 0x00	; 0
    4f6e:	9e af       	std	Y+62, r25	; 0x3e
    4f70:	8d af       	std	Y+61, r24	; 0x3d
    4f72:	46 c0       	rjmp	.+140    	; 0x5000 <main+0x1b42>
	else if (__tmp > 65535)
    4f74:	fe 01       	movw	r30, r28
    4f76:	ff 96       	adiw	r30, 0x3f	; 63
    4f78:	60 81       	ld	r22, Z
    4f7a:	71 81       	ldd	r23, Z+1	; 0x01
    4f7c:	82 81       	ldd	r24, Z+2	; 0x02
    4f7e:	93 81       	ldd	r25, Z+3	; 0x03
    4f80:	20 e0       	ldi	r18, 0x00	; 0
    4f82:	3f ef       	ldi	r19, 0xFF	; 255
    4f84:	4f e7       	ldi	r20, 0x7F	; 127
    4f86:	57 e4       	ldi	r21, 0x47	; 71
    4f88:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4f8c:	18 16       	cp	r1, r24
    4f8e:	64 f5       	brge	.+88     	; 0x4fe8 <main+0x1b2a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4f90:	fe 01       	movw	r30, r28
    4f92:	ed 5b       	subi	r30, 0xBD	; 189
    4f94:	ff 4f       	sbci	r31, 0xFF	; 255
    4f96:	60 81       	ld	r22, Z
    4f98:	71 81       	ldd	r23, Z+1	; 0x01
    4f9a:	82 81       	ldd	r24, Z+2	; 0x02
    4f9c:	93 81       	ldd	r25, Z+3	; 0x03
    4f9e:	20 e0       	ldi	r18, 0x00	; 0
    4fa0:	30 e0       	ldi	r19, 0x00	; 0
    4fa2:	40 e2       	ldi	r20, 0x20	; 32
    4fa4:	51 e4       	ldi	r21, 0x41	; 65
    4fa6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4faa:	dc 01       	movw	r26, r24
    4fac:	cb 01       	movw	r24, r22
    4fae:	bc 01       	movw	r22, r24
    4fb0:	cd 01       	movw	r24, r26
    4fb2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4fb6:	dc 01       	movw	r26, r24
    4fb8:	cb 01       	movw	r24, r22
    4fba:	9e af       	std	Y+62, r25	; 0x3e
    4fbc:	8d af       	std	Y+61, r24	; 0x3d
    4fbe:	0f c0       	rjmp	.+30     	; 0x4fde <main+0x1b20>
    4fc0:	88 ec       	ldi	r24, 0xC8	; 200
    4fc2:	90 e0       	ldi	r25, 0x00	; 0
    4fc4:	9c af       	std	Y+60, r25	; 0x3c
    4fc6:	8b af       	std	Y+59, r24	; 0x3b
    4fc8:	8b ad       	ldd	r24, Y+59	; 0x3b
    4fca:	9c ad       	ldd	r25, Y+60	; 0x3c
    4fcc:	01 97       	sbiw	r24, 0x01	; 1
    4fce:	f1 f7       	brne	.-4      	; 0x4fcc <main+0x1b0e>
    4fd0:	9c af       	std	Y+60, r25	; 0x3c
    4fd2:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4fd4:	8d ad       	ldd	r24, Y+61	; 0x3d
    4fd6:	9e ad       	ldd	r25, Y+62	; 0x3e
    4fd8:	01 97       	sbiw	r24, 0x01	; 1
    4fda:	9e af       	std	Y+62, r25	; 0x3e
    4fdc:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4fde:	8d ad       	ldd	r24, Y+61	; 0x3d
    4fe0:	9e ad       	ldd	r25, Y+62	; 0x3e
    4fe2:	00 97       	sbiw	r24, 0x00	; 0
    4fe4:	69 f7       	brne	.-38     	; 0x4fc0 <main+0x1b02>
    4fe6:	98 c2       	rjmp	.+1328   	; 0x5518 <main+0x205a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4fe8:	fe 01       	movw	r30, r28
    4fea:	ff 96       	adiw	r30, 0x3f	; 63
    4fec:	60 81       	ld	r22, Z
    4fee:	71 81       	ldd	r23, Z+1	; 0x01
    4ff0:	82 81       	ldd	r24, Z+2	; 0x02
    4ff2:	93 81       	ldd	r25, Z+3	; 0x03
    4ff4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ff8:	dc 01       	movw	r26, r24
    4ffa:	cb 01       	movw	r24, r22
    4ffc:	9e af       	std	Y+62, r25	; 0x3e
    4ffe:	8d af       	std	Y+61, r24	; 0x3d
    5000:	8d ad       	ldd	r24, Y+61	; 0x3d
    5002:	9e ad       	ldd	r25, Y+62	; 0x3e
    5004:	9a af       	std	Y+58, r25	; 0x3a
    5006:	89 af       	std	Y+57, r24	; 0x39
    5008:	89 ad       	ldd	r24, Y+57	; 0x39
    500a:	9a ad       	ldd	r25, Y+58	; 0x3a
    500c:	01 97       	sbiw	r24, 0x01	; 1
    500e:	f1 f7       	brne	.-4      	; 0x500c <main+0x1b4e>
    5010:	9a af       	std	Y+58, r25	; 0x3a
    5012:	89 af       	std	Y+57, r24	; 0x39
    5014:	81 c2       	rjmp	.+1282   	; 0x5518 <main+0x205a>
								}

								_delay_ms(2000);
								break;
						   	case 2:
								CLCD_vClearScreen();
    5016:	0e 94 2e 19 	call	0x325c	; 0x325c <CLCD_vClearScreen>
								if(led==0)
    501a:	fe 01       	movw	r30, r28
    501c:	e0 51       	subi	r30, 0x10	; 16
    501e:	ff 4f       	sbci	r31, 0xFF	; 255
    5020:	80 81       	ld	r24, Z
    5022:	88 23       	and	r24, r24
    5024:	79 f4       	brne	.+30     	; 0x5044 <main+0x1b86>
								{
									CLCD_vSendString("Lights on");
    5026:	8a e2       	ldi	r24, 0x2A	; 42
    5028:	91 e0       	ldi	r25, 0x01	; 1
    502a:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <CLCD_vSendString>
									DIO_u8SetPinValue(DIO_u8PORTB,DIO_u8PIN0,DIO_u8PIN_HIGH);
    502e:	81 e0       	ldi	r24, 0x01	; 1
    5030:	60 e0       	ldi	r22, 0x00	; 0
    5032:	41 e0       	ldi	r20, 0x01	; 1
    5034:	0e 94 47 10 	call	0x208e	; 0x208e <DIO_u8SetPinValue>
									led=1;
    5038:	fe 01       	movw	r30, r28
    503a:	e0 51       	subi	r30, 0x10	; 16
    503c:	ff 4f       	sbci	r31, 0xFF	; 255
    503e:	81 e0       	ldi	r24, 0x01	; 1
    5040:	80 83       	st	Z, r24
    5042:	13 c0       	rjmp	.+38     	; 0x506a <main+0x1bac>
								}
								else if(led==1)
    5044:	fe 01       	movw	r30, r28
    5046:	e0 51       	subi	r30, 0x10	; 16
    5048:	ff 4f       	sbci	r31, 0xFF	; 255
    504a:	80 81       	ld	r24, Z
    504c:	81 30       	cpi	r24, 0x01	; 1
    504e:	69 f4       	brne	.+26     	; 0x506a <main+0x1bac>
								{
									CLCD_vSendString("Lights off");
    5050:	84 e3       	ldi	r24, 0x34	; 52
    5052:	91 e0       	ldi	r25, 0x01	; 1
    5054:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <CLCD_vSendString>
									DIO_u8SetPinValue(DIO_u8PORTB,DIO_u8PIN0,DIO_u8PIN_LOW);
    5058:	81 e0       	ldi	r24, 0x01	; 1
    505a:	60 e0       	ldi	r22, 0x00	; 0
    505c:	40 e0       	ldi	r20, 0x00	; 0
    505e:	0e 94 47 10 	call	0x208e	; 0x208e <DIO_u8SetPinValue>
									led=0;
    5062:	fe 01       	movw	r30, r28
    5064:	e0 51       	subi	r30, 0x10	; 16
    5066:	ff 4f       	sbci	r31, 0xFF	; 255
    5068:	10 82       	st	Z, r1
    506a:	80 e0       	ldi	r24, 0x00	; 0
    506c:	90 e0       	ldi	r25, 0x00	; 0
    506e:	aa ef       	ldi	r26, 0xFA	; 250
    5070:	b4 e4       	ldi	r27, 0x44	; 68
    5072:	8d ab       	std	Y+53, r24	; 0x35
    5074:	9e ab       	std	Y+54, r25	; 0x36
    5076:	af ab       	std	Y+55, r26	; 0x37
    5078:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    507a:	6d a9       	ldd	r22, Y+53	; 0x35
    507c:	7e a9       	ldd	r23, Y+54	; 0x36
    507e:	8f a9       	ldd	r24, Y+55	; 0x37
    5080:	98 ad       	ldd	r25, Y+56	; 0x38
    5082:	20 e0       	ldi	r18, 0x00	; 0
    5084:	30 e0       	ldi	r19, 0x00	; 0
    5086:	4a ef       	ldi	r20, 0xFA	; 250
    5088:	54 e4       	ldi	r21, 0x44	; 68
    508a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    508e:	dc 01       	movw	r26, r24
    5090:	cb 01       	movw	r24, r22
    5092:	89 ab       	std	Y+49, r24	; 0x31
    5094:	9a ab       	std	Y+50, r25	; 0x32
    5096:	ab ab       	std	Y+51, r26	; 0x33
    5098:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    509a:	69 a9       	ldd	r22, Y+49	; 0x31
    509c:	7a a9       	ldd	r23, Y+50	; 0x32
    509e:	8b a9       	ldd	r24, Y+51	; 0x33
    50a0:	9c a9       	ldd	r25, Y+52	; 0x34
    50a2:	20 e0       	ldi	r18, 0x00	; 0
    50a4:	30 e0       	ldi	r19, 0x00	; 0
    50a6:	40 e8       	ldi	r20, 0x80	; 128
    50a8:	5f e3       	ldi	r21, 0x3F	; 63
    50aa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    50ae:	88 23       	and	r24, r24
    50b0:	2c f4       	brge	.+10     	; 0x50bc <main+0x1bfe>
		__ticks = 1;
    50b2:	81 e0       	ldi	r24, 0x01	; 1
    50b4:	90 e0       	ldi	r25, 0x00	; 0
    50b6:	98 ab       	std	Y+48, r25	; 0x30
    50b8:	8f a7       	std	Y+47, r24	; 0x2f
    50ba:	3f c0       	rjmp	.+126    	; 0x513a <main+0x1c7c>
	else if (__tmp > 65535)
    50bc:	69 a9       	ldd	r22, Y+49	; 0x31
    50be:	7a a9       	ldd	r23, Y+50	; 0x32
    50c0:	8b a9       	ldd	r24, Y+51	; 0x33
    50c2:	9c a9       	ldd	r25, Y+52	; 0x34
    50c4:	20 e0       	ldi	r18, 0x00	; 0
    50c6:	3f ef       	ldi	r19, 0xFF	; 255
    50c8:	4f e7       	ldi	r20, 0x7F	; 127
    50ca:	57 e4       	ldi	r21, 0x47	; 71
    50cc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    50d0:	18 16       	cp	r1, r24
    50d2:	4c f5       	brge	.+82     	; 0x5126 <main+0x1c68>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    50d4:	6d a9       	ldd	r22, Y+53	; 0x35
    50d6:	7e a9       	ldd	r23, Y+54	; 0x36
    50d8:	8f a9       	ldd	r24, Y+55	; 0x37
    50da:	98 ad       	ldd	r25, Y+56	; 0x38
    50dc:	20 e0       	ldi	r18, 0x00	; 0
    50de:	30 e0       	ldi	r19, 0x00	; 0
    50e0:	40 e2       	ldi	r20, 0x20	; 32
    50e2:	51 e4       	ldi	r21, 0x41	; 65
    50e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    50e8:	dc 01       	movw	r26, r24
    50ea:	cb 01       	movw	r24, r22
    50ec:	bc 01       	movw	r22, r24
    50ee:	cd 01       	movw	r24, r26
    50f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    50f4:	dc 01       	movw	r26, r24
    50f6:	cb 01       	movw	r24, r22
    50f8:	98 ab       	std	Y+48, r25	; 0x30
    50fa:	8f a7       	std	Y+47, r24	; 0x2f
    50fc:	0f c0       	rjmp	.+30     	; 0x511c <main+0x1c5e>
    50fe:	88 ec       	ldi	r24, 0xC8	; 200
    5100:	90 e0       	ldi	r25, 0x00	; 0
    5102:	9e a7       	std	Y+46, r25	; 0x2e
    5104:	8d a7       	std	Y+45, r24	; 0x2d
    5106:	8d a5       	ldd	r24, Y+45	; 0x2d
    5108:	9e a5       	ldd	r25, Y+46	; 0x2e
    510a:	01 97       	sbiw	r24, 0x01	; 1
    510c:	f1 f7       	brne	.-4      	; 0x510a <main+0x1c4c>
    510e:	9e a7       	std	Y+46, r25	; 0x2e
    5110:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5112:	8f a5       	ldd	r24, Y+47	; 0x2f
    5114:	98 a9       	ldd	r25, Y+48	; 0x30
    5116:	01 97       	sbiw	r24, 0x01	; 1
    5118:	98 ab       	std	Y+48, r25	; 0x30
    511a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    511c:	8f a5       	ldd	r24, Y+47	; 0x2f
    511e:	98 a9       	ldd	r25, Y+48	; 0x30
    5120:	00 97       	sbiw	r24, 0x00	; 0
    5122:	69 f7       	brne	.-38     	; 0x50fe <main+0x1c40>
    5124:	f9 c1       	rjmp	.+1010   	; 0x5518 <main+0x205a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5126:	69 a9       	ldd	r22, Y+49	; 0x31
    5128:	7a a9       	ldd	r23, Y+50	; 0x32
    512a:	8b a9       	ldd	r24, Y+51	; 0x33
    512c:	9c a9       	ldd	r25, Y+52	; 0x34
    512e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5132:	dc 01       	movw	r26, r24
    5134:	cb 01       	movw	r24, r22
    5136:	98 ab       	std	Y+48, r25	; 0x30
    5138:	8f a7       	std	Y+47, r24	; 0x2f
    513a:	8f a5       	ldd	r24, Y+47	; 0x2f
    513c:	98 a9       	ldd	r25, Y+48	; 0x30
    513e:	9c a7       	std	Y+44, r25	; 0x2c
    5140:	8b a7       	std	Y+43, r24	; 0x2b
    5142:	8b a5       	ldd	r24, Y+43	; 0x2b
    5144:	9c a5       	ldd	r25, Y+44	; 0x2c
    5146:	01 97       	sbiw	r24, 0x01	; 1
    5148:	f1 f7       	brne	.-4      	; 0x5146 <main+0x1c88>
    514a:	9c a7       	std	Y+44, r25	; 0x2c
    514c:	8b a7       	std	Y+43, r24	; 0x2b
    514e:	e4 c1       	rjmp	.+968    	; 0x5518 <main+0x205a>
								}

								_delay_ms(2000);
								break;
						   	case 3:
								CLCD_vClearScreen();
    5150:	0e 94 2e 19 	call	0x325c	; 0x325c <CLCD_vClearScreen>
								if(fan==0)
    5154:	fe 01       	movw	r30, r28
    5156:	ef 50       	subi	r30, 0x0F	; 15
    5158:	ff 4f       	sbci	r31, 0xFF	; 255
    515a:	80 81       	ld	r24, Z
    515c:	88 23       	and	r24, r24
    515e:	f1 f4       	brne	.+60     	; 0x519c <main+0x1cde>
								{
									CLCD_vSendString("fan on");
    5160:	8f e3       	ldi	r24, 0x3F	; 63
    5162:	91 e0       	ldi	r25, 0x01	; 1
    5164:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <CLCD_vSendString>
									DIO_u8SetPinDirection(DIO_u8PORTD,DIO_u8PIN1,DIO_u8PIN_OUTPUT);
    5168:	83 e0       	ldi	r24, 0x03	; 3
    516a:	61 e0       	ldi	r22, 0x01	; 1
    516c:	41 e0       	ldi	r20, 0x01	; 1
    516e:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <DIO_u8SetPinDirection>
									DIO_u8SetPinDirection(DIO_u8PORTD,DIO_u8PIN2,DIO_u8PIN_OUTPUT);
    5172:	83 e0       	ldi	r24, 0x03	; 3
    5174:	62 e0       	ldi	r22, 0x02	; 2
    5176:	41 e0       	ldi	r20, 0x01	; 1
    5178:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <DIO_u8SetPinDirection>

									DIO_u8SetPinValue(DIO_u8PORTD,DIO_u8PIN1,DIO_u8PIN_HIGH);
    517c:	83 e0       	ldi	r24, 0x03	; 3
    517e:	61 e0       	ldi	r22, 0x01	; 1
    5180:	41 e0       	ldi	r20, 0x01	; 1
    5182:	0e 94 47 10 	call	0x208e	; 0x208e <DIO_u8SetPinValue>
									DIO_u8SetPinValue(DIO_u8PORTD,DIO_u8PIN2,DIO_u8PIN_HIGH);
    5186:	83 e0       	ldi	r24, 0x03	; 3
    5188:	62 e0       	ldi	r22, 0x02	; 2
    518a:	41 e0       	ldi	r20, 0x01	; 1
    518c:	0e 94 47 10 	call	0x208e	; 0x208e <DIO_u8SetPinValue>

									fan=1;
    5190:	fe 01       	movw	r30, r28
    5192:	ef 50       	subi	r30, 0x0F	; 15
    5194:	ff 4f       	sbci	r31, 0xFF	; 255
    5196:	81 e0       	ldi	r24, 0x01	; 1
    5198:	80 83       	st	Z, r24
    519a:	22 c0       	rjmp	.+68     	; 0x51e0 <main+0x1d22>
								}
								else if(fan==1)
    519c:	fe 01       	movw	r30, r28
    519e:	ef 50       	subi	r30, 0x0F	; 15
    51a0:	ff 4f       	sbci	r31, 0xFF	; 255
    51a2:	80 81       	ld	r24, Z
    51a4:	81 30       	cpi	r24, 0x01	; 1
    51a6:	e1 f4       	brne	.+56     	; 0x51e0 <main+0x1d22>
								{
									CLCD_vSendString("fan off");
    51a8:	86 e4       	ldi	r24, 0x46	; 70
    51aa:	91 e0       	ldi	r25, 0x01	; 1
    51ac:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <CLCD_vSendString>
									DIO_u8SetPinDirection(DIO_u8PORTD,DIO_u8PIN1,DIO_u8PIN_OUTPUT);
    51b0:	83 e0       	ldi	r24, 0x03	; 3
    51b2:	61 e0       	ldi	r22, 0x01	; 1
    51b4:	41 e0       	ldi	r20, 0x01	; 1
    51b6:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <DIO_u8SetPinDirection>
									DIO_u8SetPinDirection(DIO_u8PORTD,DIO_u8PIN2,DIO_u8PIN_OUTPUT);
    51ba:	83 e0       	ldi	r24, 0x03	; 3
    51bc:	62 e0       	ldi	r22, 0x02	; 2
    51be:	41 e0       	ldi	r20, 0x01	; 1
    51c0:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <DIO_u8SetPinDirection>

									DIO_u8SetPinValue(DIO_u8PORTD,DIO_u8PIN1,DIO_u8PIN_LOW);
    51c4:	83 e0       	ldi	r24, 0x03	; 3
    51c6:	61 e0       	ldi	r22, 0x01	; 1
    51c8:	40 e0       	ldi	r20, 0x00	; 0
    51ca:	0e 94 47 10 	call	0x208e	; 0x208e <DIO_u8SetPinValue>
									DIO_u8SetPinValue(DIO_u8PORTD,DIO_u8PIN2,DIO_u8PIN_LOW);
    51ce:	83 e0       	ldi	r24, 0x03	; 3
    51d0:	62 e0       	ldi	r22, 0x02	; 2
    51d2:	40 e0       	ldi	r20, 0x00	; 0
    51d4:	0e 94 47 10 	call	0x208e	; 0x208e <DIO_u8SetPinValue>
									fan=0;
    51d8:	fe 01       	movw	r30, r28
    51da:	ef 50       	subi	r30, 0x0F	; 15
    51dc:	ff 4f       	sbci	r31, 0xFF	; 255
    51de:	10 82       	st	Z, r1
    51e0:	80 e0       	ldi	r24, 0x00	; 0
    51e2:	90 e0       	ldi	r25, 0x00	; 0
    51e4:	aa ef       	ldi	r26, 0xFA	; 250
    51e6:	b4 e4       	ldi	r27, 0x44	; 68
    51e8:	8f a3       	std	Y+39, r24	; 0x27
    51ea:	98 a7       	std	Y+40, r25	; 0x28
    51ec:	a9 a7       	std	Y+41, r26	; 0x29
    51ee:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    51f0:	6f a1       	ldd	r22, Y+39	; 0x27
    51f2:	78 a5       	ldd	r23, Y+40	; 0x28
    51f4:	89 a5       	ldd	r24, Y+41	; 0x29
    51f6:	9a a5       	ldd	r25, Y+42	; 0x2a
    51f8:	20 e0       	ldi	r18, 0x00	; 0
    51fa:	30 e0       	ldi	r19, 0x00	; 0
    51fc:	4a ef       	ldi	r20, 0xFA	; 250
    51fe:	54 e4       	ldi	r21, 0x44	; 68
    5200:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5204:	dc 01       	movw	r26, r24
    5206:	cb 01       	movw	r24, r22
    5208:	8b a3       	std	Y+35, r24	; 0x23
    520a:	9c a3       	std	Y+36, r25	; 0x24
    520c:	ad a3       	std	Y+37, r26	; 0x25
    520e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    5210:	6b a1       	ldd	r22, Y+35	; 0x23
    5212:	7c a1       	ldd	r23, Y+36	; 0x24
    5214:	8d a1       	ldd	r24, Y+37	; 0x25
    5216:	9e a1       	ldd	r25, Y+38	; 0x26
    5218:	20 e0       	ldi	r18, 0x00	; 0
    521a:	30 e0       	ldi	r19, 0x00	; 0
    521c:	40 e8       	ldi	r20, 0x80	; 128
    521e:	5f e3       	ldi	r21, 0x3F	; 63
    5220:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5224:	88 23       	and	r24, r24
    5226:	2c f4       	brge	.+10     	; 0x5232 <main+0x1d74>
		__ticks = 1;
    5228:	81 e0       	ldi	r24, 0x01	; 1
    522a:	90 e0       	ldi	r25, 0x00	; 0
    522c:	9a a3       	std	Y+34, r25	; 0x22
    522e:	89 a3       	std	Y+33, r24	; 0x21
    5230:	3f c0       	rjmp	.+126    	; 0x52b0 <main+0x1df2>
	else if (__tmp > 65535)
    5232:	6b a1       	ldd	r22, Y+35	; 0x23
    5234:	7c a1       	ldd	r23, Y+36	; 0x24
    5236:	8d a1       	ldd	r24, Y+37	; 0x25
    5238:	9e a1       	ldd	r25, Y+38	; 0x26
    523a:	20 e0       	ldi	r18, 0x00	; 0
    523c:	3f ef       	ldi	r19, 0xFF	; 255
    523e:	4f e7       	ldi	r20, 0x7F	; 127
    5240:	57 e4       	ldi	r21, 0x47	; 71
    5242:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5246:	18 16       	cp	r1, r24
    5248:	4c f5       	brge	.+82     	; 0x529c <main+0x1dde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    524a:	6f a1       	ldd	r22, Y+39	; 0x27
    524c:	78 a5       	ldd	r23, Y+40	; 0x28
    524e:	89 a5       	ldd	r24, Y+41	; 0x29
    5250:	9a a5       	ldd	r25, Y+42	; 0x2a
    5252:	20 e0       	ldi	r18, 0x00	; 0
    5254:	30 e0       	ldi	r19, 0x00	; 0
    5256:	40 e2       	ldi	r20, 0x20	; 32
    5258:	51 e4       	ldi	r21, 0x41	; 65
    525a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    525e:	dc 01       	movw	r26, r24
    5260:	cb 01       	movw	r24, r22
    5262:	bc 01       	movw	r22, r24
    5264:	cd 01       	movw	r24, r26
    5266:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    526a:	dc 01       	movw	r26, r24
    526c:	cb 01       	movw	r24, r22
    526e:	9a a3       	std	Y+34, r25	; 0x22
    5270:	89 a3       	std	Y+33, r24	; 0x21
    5272:	0f c0       	rjmp	.+30     	; 0x5292 <main+0x1dd4>
    5274:	88 ec       	ldi	r24, 0xC8	; 200
    5276:	90 e0       	ldi	r25, 0x00	; 0
    5278:	98 a3       	std	Y+32, r25	; 0x20
    527a:	8f 8f       	std	Y+31, r24	; 0x1f
    527c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    527e:	98 a1       	ldd	r25, Y+32	; 0x20
    5280:	01 97       	sbiw	r24, 0x01	; 1
    5282:	f1 f7       	brne	.-4      	; 0x5280 <main+0x1dc2>
    5284:	98 a3       	std	Y+32, r25	; 0x20
    5286:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5288:	89 a1       	ldd	r24, Y+33	; 0x21
    528a:	9a a1       	ldd	r25, Y+34	; 0x22
    528c:	01 97       	sbiw	r24, 0x01	; 1
    528e:	9a a3       	std	Y+34, r25	; 0x22
    5290:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5292:	89 a1       	ldd	r24, Y+33	; 0x21
    5294:	9a a1       	ldd	r25, Y+34	; 0x22
    5296:	00 97       	sbiw	r24, 0x00	; 0
    5298:	69 f7       	brne	.-38     	; 0x5274 <main+0x1db6>
    529a:	3e c1       	rjmp	.+636    	; 0x5518 <main+0x205a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    529c:	6b a1       	ldd	r22, Y+35	; 0x23
    529e:	7c a1       	ldd	r23, Y+36	; 0x24
    52a0:	8d a1       	ldd	r24, Y+37	; 0x25
    52a2:	9e a1       	ldd	r25, Y+38	; 0x26
    52a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    52a8:	dc 01       	movw	r26, r24
    52aa:	cb 01       	movw	r24, r22
    52ac:	9a a3       	std	Y+34, r25	; 0x22
    52ae:	89 a3       	std	Y+33, r24	; 0x21
    52b0:	89 a1       	ldd	r24, Y+33	; 0x21
    52b2:	9a a1       	ldd	r25, Y+34	; 0x22
    52b4:	9e 8f       	std	Y+30, r25	; 0x1e
    52b6:	8d 8f       	std	Y+29, r24	; 0x1d
    52b8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    52ba:	9e 8d       	ldd	r25, Y+30	; 0x1e
    52bc:	01 97       	sbiw	r24, 0x01	; 1
    52be:	f1 f7       	brne	.-4      	; 0x52bc <main+0x1dfe>
    52c0:	9e 8f       	std	Y+30, r25	; 0x1e
    52c2:	8d 8f       	std	Y+29, r24	; 0x1d
    52c4:	29 c1       	rjmp	.+594    	; 0x5518 <main+0x205a>
								}
								_delay_ms(2000);
								break;
						   	case 4:
								if(music==0)
    52c6:	fe 01       	movw	r30, r28
    52c8:	ed 50       	subi	r30, 0x0D	; 13
    52ca:	ff 4f       	sbci	r31, 0xFF	; 255
    52cc:	80 81       	ld	r24, Z
    52ce:	88 23       	and	r24, r24
    52d0:	79 f4       	brne	.+30     	; 0x52f0 <main+0x1e32>
								{
									CLCD_vSendString("Music on");
    52d2:	8e e4       	ldi	r24, 0x4E	; 78
    52d4:	91 e0       	ldi	r25, 0x01	; 1
    52d6:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <CLCD_vSendString>
									DIO_u8SetPinValue(DIO_u8PORTD,DIO_u8PIN3,DIO_u8PIN_HIGH);
    52da:	83 e0       	ldi	r24, 0x03	; 3
    52dc:	63 e0       	ldi	r22, 0x03	; 3
    52de:	41 e0       	ldi	r20, 0x01	; 1
    52e0:	0e 94 47 10 	call	0x208e	; 0x208e <DIO_u8SetPinValue>
									music=1;
    52e4:	fe 01       	movw	r30, r28
    52e6:	ed 50       	subi	r30, 0x0D	; 13
    52e8:	ff 4f       	sbci	r31, 0xFF	; 255
    52ea:	81 e0       	ldi	r24, 0x01	; 1
    52ec:	80 83       	st	Z, r24
    52ee:	13 c0       	rjmp	.+38     	; 0x5316 <main+0x1e58>
								}
								else if(music==1)
    52f0:	fe 01       	movw	r30, r28
    52f2:	ed 50       	subi	r30, 0x0D	; 13
    52f4:	ff 4f       	sbci	r31, 0xFF	; 255
    52f6:	80 81       	ld	r24, Z
    52f8:	81 30       	cpi	r24, 0x01	; 1
    52fa:	69 f4       	brne	.+26     	; 0x5316 <main+0x1e58>
								{
									CLCD_vSendString("Music off");
    52fc:	87 e5       	ldi	r24, 0x57	; 87
    52fe:	91 e0       	ldi	r25, 0x01	; 1
    5300:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <CLCD_vSendString>
									DIO_u8SetPinValue(DIO_u8PORTD,DIO_u8PIN3,DIO_u8PIN_LOW);
    5304:	83 e0       	ldi	r24, 0x03	; 3
    5306:	63 e0       	ldi	r22, 0x03	; 3
    5308:	40 e0       	ldi	r20, 0x00	; 0
    530a:	0e 94 47 10 	call	0x208e	; 0x208e <DIO_u8SetPinValue>
									music=0;
    530e:	fe 01       	movw	r30, r28
    5310:	ed 50       	subi	r30, 0x0D	; 13
    5312:	ff 4f       	sbci	r31, 0xFF	; 255
    5314:	10 82       	st	Z, r1
    5316:	80 e0       	ldi	r24, 0x00	; 0
    5318:	90 e0       	ldi	r25, 0x00	; 0
    531a:	aa e7       	ldi	r26, 0x7A	; 122
    531c:	b4 e4       	ldi	r27, 0x44	; 68
    531e:	89 8f       	std	Y+25, r24	; 0x19
    5320:	9a 8f       	std	Y+26, r25	; 0x1a
    5322:	ab 8f       	std	Y+27, r26	; 0x1b
    5324:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5326:	69 8d       	ldd	r22, Y+25	; 0x19
    5328:	7a 8d       	ldd	r23, Y+26	; 0x1a
    532a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    532c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    532e:	20 e0       	ldi	r18, 0x00	; 0
    5330:	30 e0       	ldi	r19, 0x00	; 0
    5332:	4a ef       	ldi	r20, 0xFA	; 250
    5334:	54 e4       	ldi	r21, 0x44	; 68
    5336:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    533a:	dc 01       	movw	r26, r24
    533c:	cb 01       	movw	r24, r22
    533e:	8d 8b       	std	Y+21, r24	; 0x15
    5340:	9e 8b       	std	Y+22, r25	; 0x16
    5342:	af 8b       	std	Y+23, r26	; 0x17
    5344:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    5346:	6d 89       	ldd	r22, Y+21	; 0x15
    5348:	7e 89       	ldd	r23, Y+22	; 0x16
    534a:	8f 89       	ldd	r24, Y+23	; 0x17
    534c:	98 8d       	ldd	r25, Y+24	; 0x18
    534e:	20 e0       	ldi	r18, 0x00	; 0
    5350:	30 e0       	ldi	r19, 0x00	; 0
    5352:	40 e8       	ldi	r20, 0x80	; 128
    5354:	5f e3       	ldi	r21, 0x3F	; 63
    5356:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    535a:	88 23       	and	r24, r24
    535c:	2c f4       	brge	.+10     	; 0x5368 <main+0x1eaa>
		__ticks = 1;
    535e:	81 e0       	ldi	r24, 0x01	; 1
    5360:	90 e0       	ldi	r25, 0x00	; 0
    5362:	9c 8b       	std	Y+20, r25	; 0x14
    5364:	8b 8b       	std	Y+19, r24	; 0x13
    5366:	3f c0       	rjmp	.+126    	; 0x53e6 <main+0x1f28>
	else if (__tmp > 65535)
    5368:	6d 89       	ldd	r22, Y+21	; 0x15
    536a:	7e 89       	ldd	r23, Y+22	; 0x16
    536c:	8f 89       	ldd	r24, Y+23	; 0x17
    536e:	98 8d       	ldd	r25, Y+24	; 0x18
    5370:	20 e0       	ldi	r18, 0x00	; 0
    5372:	3f ef       	ldi	r19, 0xFF	; 255
    5374:	4f e7       	ldi	r20, 0x7F	; 127
    5376:	57 e4       	ldi	r21, 0x47	; 71
    5378:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    537c:	18 16       	cp	r1, r24
    537e:	4c f5       	brge	.+82     	; 0x53d2 <main+0x1f14>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5380:	69 8d       	ldd	r22, Y+25	; 0x19
    5382:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5384:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5386:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5388:	20 e0       	ldi	r18, 0x00	; 0
    538a:	30 e0       	ldi	r19, 0x00	; 0
    538c:	40 e2       	ldi	r20, 0x20	; 32
    538e:	51 e4       	ldi	r21, 0x41	; 65
    5390:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5394:	dc 01       	movw	r26, r24
    5396:	cb 01       	movw	r24, r22
    5398:	bc 01       	movw	r22, r24
    539a:	cd 01       	movw	r24, r26
    539c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    53a0:	dc 01       	movw	r26, r24
    53a2:	cb 01       	movw	r24, r22
    53a4:	9c 8b       	std	Y+20, r25	; 0x14
    53a6:	8b 8b       	std	Y+19, r24	; 0x13
    53a8:	0f c0       	rjmp	.+30     	; 0x53c8 <main+0x1f0a>
    53aa:	88 ec       	ldi	r24, 0xC8	; 200
    53ac:	90 e0       	ldi	r25, 0x00	; 0
    53ae:	9a 8b       	std	Y+18, r25	; 0x12
    53b0:	89 8b       	std	Y+17, r24	; 0x11
    53b2:	89 89       	ldd	r24, Y+17	; 0x11
    53b4:	9a 89       	ldd	r25, Y+18	; 0x12
    53b6:	01 97       	sbiw	r24, 0x01	; 1
    53b8:	f1 f7       	brne	.-4      	; 0x53b6 <main+0x1ef8>
    53ba:	9a 8b       	std	Y+18, r25	; 0x12
    53bc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    53be:	8b 89       	ldd	r24, Y+19	; 0x13
    53c0:	9c 89       	ldd	r25, Y+20	; 0x14
    53c2:	01 97       	sbiw	r24, 0x01	; 1
    53c4:	9c 8b       	std	Y+20, r25	; 0x14
    53c6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    53c8:	8b 89       	ldd	r24, Y+19	; 0x13
    53ca:	9c 89       	ldd	r25, Y+20	; 0x14
    53cc:	00 97       	sbiw	r24, 0x00	; 0
    53ce:	69 f7       	brne	.-38     	; 0x53aa <main+0x1eec>
    53d0:	14 c0       	rjmp	.+40     	; 0x53fa <main+0x1f3c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    53d2:	6d 89       	ldd	r22, Y+21	; 0x15
    53d4:	7e 89       	ldd	r23, Y+22	; 0x16
    53d6:	8f 89       	ldd	r24, Y+23	; 0x17
    53d8:	98 8d       	ldd	r25, Y+24	; 0x18
    53da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    53de:	dc 01       	movw	r26, r24
    53e0:	cb 01       	movw	r24, r22
    53e2:	9c 8b       	std	Y+20, r25	; 0x14
    53e4:	8b 8b       	std	Y+19, r24	; 0x13
    53e6:	8b 89       	ldd	r24, Y+19	; 0x13
    53e8:	9c 89       	ldd	r25, Y+20	; 0x14
    53ea:	98 8b       	std	Y+16, r25	; 0x10
    53ec:	8f 87       	std	Y+15, r24	; 0x0f
    53ee:	8f 85       	ldd	r24, Y+15	; 0x0f
    53f0:	98 89       	ldd	r25, Y+16	; 0x10
    53f2:	01 97       	sbiw	r24, 0x01	; 1
    53f4:	f1 f7       	brne	.-4      	; 0x53f2 <main+0x1f34>
    53f6:	98 8b       	std	Y+16, r25	; 0x10
    53f8:	8f 87       	std	Y+15, r24	; 0x0f
								}
								_delay_ms(1000);
								DIO_u8SetPinValue(DIO_u8PORTD,DIO_u8PIN3,DIO_u8PIN_LOW);
    53fa:	83 e0       	ldi	r24, 0x03	; 3
    53fc:	63 e0       	ldi	r22, 0x03	; 3
    53fe:	40 e0       	ldi	r20, 0x00	; 0
    5400:	0e 94 47 10 	call	0x208e	; 0x208e <DIO_u8SetPinValue>
    5404:	89 c0       	rjmp	.+274    	; 0x5518 <main+0x205a>

								break;
						   	case 5:
								CLCD_vClearScreen();
    5406:	0e 94 2e 19 	call	0x325c	; 0x325c <CLCD_vClearScreen>
								CLCD_vSendString("Temperature : ");
    540a:	81 e6       	ldi	r24, 0x61	; 97
    540c:	91 e0       	ldi	r25, 0x01	; 1
    540e:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <CLCD_vSendString>
								u8 u8Home_Temperature =  MADC_u8ReadADC(2);
    5412:	82 e0       	ldi	r24, 0x02	; 2
    5414:	0e 94 ca 19 	call	0x3394	; 0x3394 <MADC_u8ReadADC>
    5418:	fe 01       	movw	r30, r28
    541a:	ef 51       	subi	r30, 0x1F	; 31
    541c:	ff 4f       	sbci	r31, 0xFF	; 255
    541e:	80 83       	st	Z, r24
								CLCD_vSendNumber(2*u8Home_Temperature);
    5420:	fe 01       	movw	r30, r28
    5422:	ef 51       	subi	r30, 0x1F	; 31
    5424:	ff 4f       	sbci	r31, 0xFF	; 255
    5426:	80 81       	ld	r24, Z
    5428:	88 2f       	mov	r24, r24
    542a:	90 e0       	ldi	r25, 0x00	; 0
    542c:	88 0f       	add	r24, r24
    542e:	99 1f       	adc	r25, r25
    5430:	0e 94 6f 18 	call	0x30de	; 0x30de <CLCD_vSendNumber>
    5434:	80 e0       	ldi	r24, 0x00	; 0
    5436:	90 e0       	ldi	r25, 0x00	; 0
    5438:	aa ef       	ldi	r26, 0xFA	; 250
    543a:	b4 e4       	ldi	r27, 0x44	; 68
    543c:	8b 87       	std	Y+11, r24	; 0x0b
    543e:	9c 87       	std	Y+12, r25	; 0x0c
    5440:	ad 87       	std	Y+13, r26	; 0x0d
    5442:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5444:	6b 85       	ldd	r22, Y+11	; 0x0b
    5446:	7c 85       	ldd	r23, Y+12	; 0x0c
    5448:	8d 85       	ldd	r24, Y+13	; 0x0d
    544a:	9e 85       	ldd	r25, Y+14	; 0x0e
    544c:	20 e0       	ldi	r18, 0x00	; 0
    544e:	30 e0       	ldi	r19, 0x00	; 0
    5450:	4a ef       	ldi	r20, 0xFA	; 250
    5452:	54 e4       	ldi	r21, 0x44	; 68
    5454:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5458:	dc 01       	movw	r26, r24
    545a:	cb 01       	movw	r24, r22
    545c:	8f 83       	std	Y+7, r24	; 0x07
    545e:	98 87       	std	Y+8, r25	; 0x08
    5460:	a9 87       	std	Y+9, r26	; 0x09
    5462:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5464:	6f 81       	ldd	r22, Y+7	; 0x07
    5466:	78 85       	ldd	r23, Y+8	; 0x08
    5468:	89 85       	ldd	r24, Y+9	; 0x09
    546a:	9a 85       	ldd	r25, Y+10	; 0x0a
    546c:	20 e0       	ldi	r18, 0x00	; 0
    546e:	30 e0       	ldi	r19, 0x00	; 0
    5470:	40 e8       	ldi	r20, 0x80	; 128
    5472:	5f e3       	ldi	r21, 0x3F	; 63
    5474:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5478:	88 23       	and	r24, r24
    547a:	2c f4       	brge	.+10     	; 0x5486 <main+0x1fc8>
		__ticks = 1;
    547c:	81 e0       	ldi	r24, 0x01	; 1
    547e:	90 e0       	ldi	r25, 0x00	; 0
    5480:	9e 83       	std	Y+6, r25	; 0x06
    5482:	8d 83       	std	Y+5, r24	; 0x05
    5484:	3f c0       	rjmp	.+126    	; 0x5504 <main+0x2046>
	else if (__tmp > 65535)
    5486:	6f 81       	ldd	r22, Y+7	; 0x07
    5488:	78 85       	ldd	r23, Y+8	; 0x08
    548a:	89 85       	ldd	r24, Y+9	; 0x09
    548c:	9a 85       	ldd	r25, Y+10	; 0x0a
    548e:	20 e0       	ldi	r18, 0x00	; 0
    5490:	3f ef       	ldi	r19, 0xFF	; 255
    5492:	4f e7       	ldi	r20, 0x7F	; 127
    5494:	57 e4       	ldi	r21, 0x47	; 71
    5496:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    549a:	18 16       	cp	r1, r24
    549c:	4c f5       	brge	.+82     	; 0x54f0 <main+0x2032>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    549e:	6b 85       	ldd	r22, Y+11	; 0x0b
    54a0:	7c 85       	ldd	r23, Y+12	; 0x0c
    54a2:	8d 85       	ldd	r24, Y+13	; 0x0d
    54a4:	9e 85       	ldd	r25, Y+14	; 0x0e
    54a6:	20 e0       	ldi	r18, 0x00	; 0
    54a8:	30 e0       	ldi	r19, 0x00	; 0
    54aa:	40 e2       	ldi	r20, 0x20	; 32
    54ac:	51 e4       	ldi	r21, 0x41	; 65
    54ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    54b2:	dc 01       	movw	r26, r24
    54b4:	cb 01       	movw	r24, r22
    54b6:	bc 01       	movw	r22, r24
    54b8:	cd 01       	movw	r24, r26
    54ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    54be:	dc 01       	movw	r26, r24
    54c0:	cb 01       	movw	r24, r22
    54c2:	9e 83       	std	Y+6, r25	; 0x06
    54c4:	8d 83       	std	Y+5, r24	; 0x05
    54c6:	0f c0       	rjmp	.+30     	; 0x54e6 <main+0x2028>
    54c8:	88 ec       	ldi	r24, 0xC8	; 200
    54ca:	90 e0       	ldi	r25, 0x00	; 0
    54cc:	9c 83       	std	Y+4, r25	; 0x04
    54ce:	8b 83       	std	Y+3, r24	; 0x03
    54d0:	8b 81       	ldd	r24, Y+3	; 0x03
    54d2:	9c 81       	ldd	r25, Y+4	; 0x04
    54d4:	01 97       	sbiw	r24, 0x01	; 1
    54d6:	f1 f7       	brne	.-4      	; 0x54d4 <main+0x2016>
    54d8:	9c 83       	std	Y+4, r25	; 0x04
    54da:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    54dc:	8d 81       	ldd	r24, Y+5	; 0x05
    54de:	9e 81       	ldd	r25, Y+6	; 0x06
    54e0:	01 97       	sbiw	r24, 0x01	; 1
    54e2:	9e 83       	std	Y+6, r25	; 0x06
    54e4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    54e6:	8d 81       	ldd	r24, Y+5	; 0x05
    54e8:	9e 81       	ldd	r25, Y+6	; 0x06
    54ea:	00 97       	sbiw	r24, 0x00	; 0
    54ec:	69 f7       	brne	.-38     	; 0x54c8 <main+0x200a>
    54ee:	14 c0       	rjmp	.+40     	; 0x5518 <main+0x205a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    54f0:	6f 81       	ldd	r22, Y+7	; 0x07
    54f2:	78 85       	ldd	r23, Y+8	; 0x08
    54f4:	89 85       	ldd	r24, Y+9	; 0x09
    54f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    54f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    54fc:	dc 01       	movw	r26, r24
    54fe:	cb 01       	movw	r24, r22
    5500:	9e 83       	std	Y+6, r25	; 0x06
    5502:	8d 83       	std	Y+5, r24	; 0x05
    5504:	8d 81       	ldd	r24, Y+5	; 0x05
    5506:	9e 81       	ldd	r25, Y+6	; 0x06
    5508:	9a 83       	std	Y+2, r25	; 0x02
    550a:	89 83       	std	Y+1, r24	; 0x01
    550c:	89 81       	ldd	r24, Y+1	; 0x01
    550e:	9a 81       	ldd	r25, Y+2	; 0x02
    5510:	01 97       	sbiw	r24, 0x01	; 1
    5512:	f1 f7       	brne	.-4      	; 0x5510 <main+0x2052>
    5514:	9a 83       	std	Y+2, r25	; 0x02
    5516:	89 83       	std	Y+1, r24	; 0x01
								break;
						   }



						CLCD_vClearScreen();
    5518:	0e 94 2e 19 	call	0x325c	; 0x325c <CLCD_vClearScreen>
						CLCD_vGoToXY(0, 0);
    551c:	80 e0       	ldi	r24, 0x00	; 0
    551e:	60 e0       	ldi	r22, 0x00	; 0
    5520:	0e 94 d5 17 	call	0x2faa	; 0x2faa <CLCD_vGoToXY>
						CLCD_vSendString("1. User select");
    5524:	80 e7       	ldi	r24, 0x70	; 112
    5526:	91 e0       	ldi	r25, 0x01	; 1
    5528:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <CLCD_vSendString>
						CLCD_vGoToXY(0, 1);
    552c:	80 e0       	ldi	r24, 0x00	; 0
    552e:	61 e0       	ldi	r22, 0x01	; 1
    5530:	0e 94 d5 17 	call	0x2faa	; 0x2faa <CLCD_vGoToXY>
						CLCD_vSendString("2. Mode select");
    5534:	8f e7       	ldi	r24, 0x7F	; 127
    5536:	91 e0       	ldi	r25, 0x01	; 1
    5538:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <CLCD_vSendString>

						u8 ret = 0xff;
    553c:	fe 01       	movw	r30, r28
    553e:	ee 51       	subi	r30, 0x1E	; 30
    5540:	ff 4f       	sbci	r31, 0xFF	; 255
    5542:	8f ef       	ldi	r24, 0xFF	; 255
    5544:	80 83       	st	Z, r24
    5546:	11 c0       	rjmp	.+34     	; 0x556a <main+0x20ac>
						while (ret = 0xff)
						{
							ret = KPD_u8GetPressedKey();
							if (ret == 1) {
								layer = 0;
    5548:	fe 01       	movw	r30, r28
    554a:	e2 51       	subi	r30, 0x12	; 18
    554c:	ff 4f       	sbci	r31, 0xFF	; 255
    554e:	10 82       	st	Z, r1
    5550:	1e c0       	rjmp	.+60     	; 0x558e <main+0x20d0>
								break;
							}
							else if (ret == 2)
    5552:	fe 01       	movw	r30, r28
    5554:	ee 51       	subi	r30, 0x1E	; 30
    5556:	ff 4f       	sbci	r31, 0xFF	; 255
    5558:	80 81       	ld	r24, Z
    555a:	82 30       	cpi	r24, 0x02	; 2
    555c:	31 f4       	brne	.+12     	; 0x556a <main+0x20ac>
							{
								layer = 2;
    555e:	fe 01       	movw	r30, r28
    5560:	e2 51       	subi	r30, 0x12	; 18
    5562:	ff 4f       	sbci	r31, 0xFF	; 255
    5564:	82 e0       	ldi	r24, 0x02	; 2
    5566:	80 83       	st	Z, r24
    5568:	12 c0       	rjmp	.+36     	; 0x558e <main+0x20d0>
						CLCD_vSendString("1. User select");
						CLCD_vGoToXY(0, 1);
						CLCD_vSendString("2. Mode select");

						u8 ret = 0xff;
						while (ret = 0xff)
    556a:	fe 01       	movw	r30, r28
    556c:	ee 51       	subi	r30, 0x1E	; 30
    556e:	ff 4f       	sbci	r31, 0xFF	; 255
    5570:	8f ef       	ldi	r24, 0xFF	; 255
    5572:	80 83       	st	Z, r24
						{
							ret = KPD_u8GetPressedKey();
    5574:	0e 94 c6 0b 	call	0x178c	; 0x178c <KPD_u8GetPressedKey>
    5578:	fe 01       	movw	r30, r28
    557a:	ee 51       	subi	r30, 0x1E	; 30
    557c:	ff 4f       	sbci	r31, 0xFF	; 255
    557e:	80 83       	st	Z, r24
							if (ret == 1) {
    5580:	fe 01       	movw	r30, r28
    5582:	ee 51       	subi	r30, 0x1E	; 30
    5584:	ff 4f       	sbci	r31, 0xFF	; 255
    5586:	80 81       	ld	r24, Z
    5588:	81 30       	cpi	r24, 0x01	; 1
    558a:	f1 f2       	breq	.-68     	; 0x5548 <main+0x208a>
    558c:	e2 cf       	rjmp	.-60     	; 0x5552 <main+0x2094>

			u8 pressed_key = 0xff;
			pressed_key = KPD_u8GetPressedKey();
			if (pressed_key == 1 || layer>1)
			{
				while(layer>0)
    558e:	fe 01       	movw	r30, r28
    5590:	e2 51       	subi	r30, 0x12	; 18
    5592:	ff 4f       	sbci	r31, 0xFF	; 255
    5594:	80 81       	ld	r24, Z
    5596:	88 23       	and	r24, r24
    5598:	11 f0       	breq	.+4      	; 0x559e <main+0x20e0>
    559a:	0c 94 93 1e 	jmp	0x3d26	; 0x3d26 <main+0x868>
					}
				}
			}
			}

		} while (pressed_key = 0xff && layer==1);
    559e:	9e 01       	movw	r18, r28
    55a0:	24 51       	subi	r18, 0x14	; 20
    55a2:	3f 4f       	sbci	r19, 0xFF	; 255
    55a4:	ca 59       	subi	r28, 0x9A	; 154
    55a6:	de 4f       	sbci	r29, 0xFE	; 254
    55a8:	39 83       	std	Y+1, r19	; 0x01
    55aa:	28 83       	st	Y, r18
    55ac:	c6 56       	subi	r28, 0x66	; 102
    55ae:	d1 40       	sbci	r29, 0x01	; 1
    55b0:	ca 59       	subi	r28, 0x9A	; 154
    55b2:	de 4f       	sbci	r29, 0xFE	; 254
    55b4:	a8 81       	ld	r26, Y
    55b6:	b9 81       	ldd	r27, Y+1	; 0x01
    55b8:	c6 56       	subi	r28, 0x66	; 102
    55ba:	d1 40       	sbci	r29, 0x01	; 1
    55bc:	1c 92       	st	X, r1
    55be:	fe 01       	movw	r30, r28
    55c0:	e2 51       	subi	r30, 0x12	; 18
    55c2:	ff 4f       	sbci	r31, 0xFF	; 255
    55c4:	80 81       	ld	r24, Z
    55c6:	81 30       	cpi	r24, 0x01	; 1
    55c8:	41 f4       	brne	.+16     	; 0x55da <main+0x211c>
    55ca:	81 e0       	ldi	r24, 0x01	; 1
    55cc:	ca 59       	subi	r28, 0x9A	; 154
    55ce:	de 4f       	sbci	r29, 0xFE	; 254
    55d0:	e8 81       	ld	r30, Y
    55d2:	f9 81       	ldd	r31, Y+1	; 0x01
    55d4:	c6 56       	subi	r28, 0x66	; 102
    55d6:	d1 40       	sbci	r29, 0x01	; 1
    55d8:	80 83       	st	Z, r24
    55da:	fe 01       	movw	r30, r28
    55dc:	e4 51       	subi	r30, 0x14	; 20
    55de:	ff 4f       	sbci	r31, 0xFF	; 255
    55e0:	80 81       	ld	r24, Z
    55e2:	88 23       	and	r24, r24
    55e4:	11 f0       	breq	.+4      	; 0x55ea <main+0x212c>
    55e6:	0c 94 76 1e 	jmp	0x3cec	; 0x3cec <main+0x82e>
    55ea:	0c 94 a3 1d 	jmp	0x3b46	; 0x3b46 <main+0x688>

000055ee <checkldr>:
	}
}


void checkldr(void)
{
    55ee:	df 93       	push	r29
    55f0:	cf 93       	push	r28
    55f2:	0f 92       	push	r0
    55f4:	cd b7       	in	r28, 0x3d	; 61
    55f6:	de b7       	in	r29, 0x3e	; 62
	static u16 cnt=0;
	cnt++;
    55f8:	80 91 fc 02 	lds	r24, 0x02FC
    55fc:	90 91 fd 02 	lds	r25, 0x02FD
    5600:	01 96       	adiw	r24, 0x01	; 1
    5602:	90 93 fd 02 	sts	0x02FD, r25
    5606:	80 93 fc 02 	sts	0x02FC, r24
	u8 reading;
	if (cnt >= 50)
    560a:	80 91 fc 02 	lds	r24, 0x02FC
    560e:	90 91 fd 02 	lds	r25, 0x02FD
    5612:	82 33       	cpi	r24, 0x32	; 50
    5614:	91 05       	cpc	r25, r1
    5616:	a0 f0       	brcs	.+40     	; 0x5640 <checkldr+0x52>
	{
		reading = MADC_u8ReadADC(MADC_CHANNEL_ADC3);
    5618:	83 e0       	ldi	r24, 0x03	; 3
    561a:	0e 94 ca 19 	call	0x3394	; 0x3394 <MADC_u8ReadADC>
    561e:	89 83       	std	Y+1, r24	; 0x01
		if (reading < 5) {
    5620:	89 81       	ldd	r24, Y+1	; 0x01
    5622:	85 30       	cpi	r24, 0x05	; 5
    5624:	28 f4       	brcc	.+10     	; 0x5630 <checkldr+0x42>
			LED_u8On(DIO_u8PORTD, DIO_u8PIN0);
    5626:	83 e0       	ldi	r24, 0x03	; 3
    5628:	60 e0       	ldi	r22, 0x00	; 0
    562a:	0e 94 4a 0a 	call	0x1494	; 0x1494 <LED_u8On>
    562e:	04 c0       	rjmp	.+8      	; 0x5638 <checkldr+0x4a>
		} else {
			LED_u8Off(DIO_u8PORTD, DIO_u8PIN0);
    5630:	83 e0       	ldi	r24, 0x03	; 3
    5632:	60 e0       	ldi	r22, 0x00	; 0
    5634:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <LED_u8Off>
		}
		cnt = 0;
    5638:	10 92 fd 02 	sts	0x02FD, r1
    563c:	10 92 fc 02 	sts	0x02FC, r1
	}
}
    5640:	0f 90       	pop	r0
    5642:	cf 91       	pop	r28
    5644:	df 91       	pop	r29
    5646:	08 95       	ret

00005648 <__udivmodhi4>:
    5648:	aa 1b       	sub	r26, r26
    564a:	bb 1b       	sub	r27, r27
    564c:	51 e1       	ldi	r21, 0x11	; 17
    564e:	07 c0       	rjmp	.+14     	; 0x565e <__udivmodhi4_ep>

00005650 <__udivmodhi4_loop>:
    5650:	aa 1f       	adc	r26, r26
    5652:	bb 1f       	adc	r27, r27
    5654:	a6 17       	cp	r26, r22
    5656:	b7 07       	cpc	r27, r23
    5658:	10 f0       	brcs	.+4      	; 0x565e <__udivmodhi4_ep>
    565a:	a6 1b       	sub	r26, r22
    565c:	b7 0b       	sbc	r27, r23

0000565e <__udivmodhi4_ep>:
    565e:	88 1f       	adc	r24, r24
    5660:	99 1f       	adc	r25, r25
    5662:	5a 95       	dec	r21
    5664:	a9 f7       	brne	.-22     	; 0x5650 <__udivmodhi4_loop>
    5666:	80 95       	com	r24
    5668:	90 95       	com	r25
    566a:	bc 01       	movw	r22, r24
    566c:	cd 01       	movw	r24, r26
    566e:	08 95       	ret

00005670 <__prologue_saves__>:
    5670:	2f 92       	push	r2
    5672:	3f 92       	push	r3
    5674:	4f 92       	push	r4
    5676:	5f 92       	push	r5
    5678:	6f 92       	push	r6
    567a:	7f 92       	push	r7
    567c:	8f 92       	push	r8
    567e:	9f 92       	push	r9
    5680:	af 92       	push	r10
    5682:	bf 92       	push	r11
    5684:	cf 92       	push	r12
    5686:	df 92       	push	r13
    5688:	ef 92       	push	r14
    568a:	ff 92       	push	r15
    568c:	0f 93       	push	r16
    568e:	1f 93       	push	r17
    5690:	cf 93       	push	r28
    5692:	df 93       	push	r29
    5694:	cd b7       	in	r28, 0x3d	; 61
    5696:	de b7       	in	r29, 0x3e	; 62
    5698:	ca 1b       	sub	r28, r26
    569a:	db 0b       	sbc	r29, r27
    569c:	0f b6       	in	r0, 0x3f	; 63
    569e:	f8 94       	cli
    56a0:	de bf       	out	0x3e, r29	; 62
    56a2:	0f be       	out	0x3f, r0	; 63
    56a4:	cd bf       	out	0x3d, r28	; 61
    56a6:	09 94       	ijmp

000056a8 <__epilogue_restores__>:
    56a8:	2a 88       	ldd	r2, Y+18	; 0x12
    56aa:	39 88       	ldd	r3, Y+17	; 0x11
    56ac:	48 88       	ldd	r4, Y+16	; 0x10
    56ae:	5f 84       	ldd	r5, Y+15	; 0x0f
    56b0:	6e 84       	ldd	r6, Y+14	; 0x0e
    56b2:	7d 84       	ldd	r7, Y+13	; 0x0d
    56b4:	8c 84       	ldd	r8, Y+12	; 0x0c
    56b6:	9b 84       	ldd	r9, Y+11	; 0x0b
    56b8:	aa 84       	ldd	r10, Y+10	; 0x0a
    56ba:	b9 84       	ldd	r11, Y+9	; 0x09
    56bc:	c8 84       	ldd	r12, Y+8	; 0x08
    56be:	df 80       	ldd	r13, Y+7	; 0x07
    56c0:	ee 80       	ldd	r14, Y+6	; 0x06
    56c2:	fd 80       	ldd	r15, Y+5	; 0x05
    56c4:	0c 81       	ldd	r16, Y+4	; 0x04
    56c6:	1b 81       	ldd	r17, Y+3	; 0x03
    56c8:	aa 81       	ldd	r26, Y+2	; 0x02
    56ca:	b9 81       	ldd	r27, Y+1	; 0x01
    56cc:	ce 0f       	add	r28, r30
    56ce:	d1 1d       	adc	r29, r1
    56d0:	0f b6       	in	r0, 0x3f	; 63
    56d2:	f8 94       	cli
    56d4:	de bf       	out	0x3e, r29	; 62
    56d6:	0f be       	out	0x3f, r0	; 63
    56d8:	cd bf       	out	0x3d, r28	; 61
    56da:	ed 01       	movw	r28, r26
    56dc:	08 95       	ret

000056de <__eerd_byte_m32>:
    56de:	e1 99       	sbic	0x1c, 1	; 28
    56e0:	fe cf       	rjmp	.-4      	; 0x56de <__eerd_byte_m32>
    56e2:	9f bb       	out	0x1f, r25	; 31
    56e4:	8e bb       	out	0x1e, r24	; 30
    56e6:	e0 9a       	sbi	0x1c, 0	; 28
    56e8:	99 27       	eor	r25, r25
    56ea:	8d b3       	in	r24, 0x1d	; 29
    56ec:	08 95       	ret

000056ee <__eewr_byte_m32>:
    56ee:	26 2f       	mov	r18, r22

000056f0 <__eewr_r18_m32>:
    56f0:	e1 99       	sbic	0x1c, 1	; 28
    56f2:	fe cf       	rjmp	.-4      	; 0x56f0 <__eewr_r18_m32>
    56f4:	9f bb       	out	0x1f, r25	; 31
    56f6:	8e bb       	out	0x1e, r24	; 30
    56f8:	2d bb       	out	0x1d, r18	; 29
    56fa:	0f b6       	in	r0, 0x3f	; 63
    56fc:	f8 94       	cli
    56fe:	e2 9a       	sbi	0x1c, 2	; 28
    5700:	e1 9a       	sbi	0x1c, 1	; 28
    5702:	0f be       	out	0x3f, r0	; 63
    5704:	01 96       	adiw	r24, 0x01	; 1
    5706:	08 95       	ret

00005708 <_exit>:
    5708:	f8 94       	cli

0000570a <__stop_program>:
    570a:	ff cf       	rjmp	.-2      	; 0x570a <__stop_program>
